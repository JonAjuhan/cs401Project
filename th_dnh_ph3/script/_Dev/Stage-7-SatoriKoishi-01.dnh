#TouhouDanmakufu[Stage]
#ScriptVersion[3]
#Title["(Satori & Koishi Stage) Stage 6"]
#Text["Preliminary stage 6."]
#Image["./ExRumia(星符「ミッドナイトレヴァリエ」).jpg"]

#System["./system/Andi_System.txt"]
#Background["./system/Background/Satori/BG_work.txt"]

#include "./Index.txt"

let bossScript;
let stageBGM;
let bossBGM;

@Loading{
	let csd = GetCurrentScriptDirectory();

	bossScript = LoadScriptInThread(csd~"./Plural-7-SatoriKoishi.dnh");

	stageBGM = csd~"bgm/bgm - Last Remote@Magnum Opus.ogg";
	LoadSound(stageBGM);

	bossBGM  = csd~"bgm/bgm - Hartmann's Youkai Girl@Magnum Opus.ogg";
	LoadSound(bossBGM);
	
	SetCommonData("InitialPlayerPower",400);
	
}

@Initialize
{
	SetCommonData("IsStage",true);
	SetScriptID(SCRIPT_STAGE);
	InitPlural;
	TStage();
}
task InitPlural{
	wait(1200); //give it time to compile
	StartScript(bossScript); //will wait for event before starting boss
}

@MainLoop{
	CheckGameOver;
	yield;
}

@Finalize
{
}






task TStage {
	let csd = GetCurrentScriptDirectory();

	SetBGM("Last Remote@Magnum Opus",88.29,271.67);
	if(noPackage){ ShowPointOfCollection; }
	
	FadeToBlack(0,0,60);
	
	yield;
	//Stop bg movement
	// Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+1,[false]);
	//Set yaw/pitch/roll
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+2,[-30,-30,-30,0]);
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+2,[0,0,0,180]);
	//Set coefficients for movement thereof
	// Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+3,[0,0,0,0]);
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+3,[1,1,1,180]);
	//Set brightness
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+4,[0,0]);
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+4,[255,180]);
	
	loop(60){yield;}//1秒くらいあれば、コンパイル完了すると思われる。
	
	
	let x; let y; let dir; let side;

	//solo big guy
	// let fairy = TBigINFairy1(cx,0,1.5,90,60);
	// ObjMove_SetDestAtWeight(fairy,cx,cy*2/3,120,10);
	// ObjMove_AddPatternA2(fairy,240,0,270,0.05,0,1.5); //300
	
	let xarr = [0.4,0.6,0.25,0.5,0.75];
	ascent(i in 0..length(xarr)){
		TStaticKunaiFairy1(sx*xarr[i],-30,cy*0.6,60,180);
		wait(90);
	}
	
	wait(120); //240
	//throw up some vaguely cryptic and/or expository text
	StageIntro("Stage Final","Vilification",
	           "[r][r]A closed mind cannot hear hatred,[r]but nor can it be heard itself.[r]To turn a blind eye,[r]or force it awake?",
			   dirimg~"ThirdEyes.png",[0,0,255,255]);
	wait(240);	
	
	Notify(SCRIPT_BACKGROUND,EV_USER_STAGE+1,[true]);
	
	
	xarr = [0.4,0.6,0.25,0.5,0.75];
	ascent(i in 0..length(xarr)){
		let fa = TCardFanFairy1(sx*xarr[i],-30,60);
		ObjMove_SetDestAtWeight(fa,sx*xarr[i],cy*0.6, 60,10);
		ObjMove_AddPatternA2(fa,61,0,270,0.1,0,2);
		wait(90);
	}
	let fa = TCardFanFairy2(-30,cy*2/3,90);
	ObjMove_AddPatternA1(fa,0, (cx-(-30))/90, 0);
	
	wait(180);
	
	ascent(i in 0..length(xarr)){
		let fa = TCardFanFairy3(sx*xarr[i],-30,60);
		ObjMove_SetDestAtWeight(fa,sx*xarr[i],cy*0.6, 60,10);
		ObjMove_AddPatternA2(fa,61,0,270,0.1,0,2);
		
		let dir = (-1)^i;
		ascent(j in 0..3){
			fa = TBallDropFairy1(cx+(cx+30)*dir,cy/2, 30);
			ObjMove_AddPatternA1(fa,0, 2,90+(90+10*j)*dir);			
		}
		
		wait(90);
	}

	wait(180);
	
	ascent(i in 0..5){
		ascent(j in 0..2){
			let dir = (-1)^j;
			let yy = TStaticLaserYinYang1(cx+cx/2*dir,-30,  30);
			ObjMove_AddPatternA2(yy,0, 3.5,90, 0, 0.15*(3.5/2)*dir, 3.5);
			
			let fa = TBallDropFairy1(cx+(cx+30)*dir,cy/2, 30);
			ObjMove_AddPatternA1(fa,0, 2,90+110*dir);
		}
		wait(60);
	}
	wait(180);
	
	
	

	wait(300); //wait for leftover enemies to finish
	
	/////////////////////////////////////////////////////
	//End of the aforementioned bit where you say where to put enemies
	/////////////////////////////////////////////////////
	
	//Clean up any leftover shots and wait a moment before starting boss
	//There shouldn't be any enemies left by the time we get here
	loop(150){
		DeleteShotAll(TYPE_ALL,TYPE_FADE);
		yield;
	}
	//Start the boss plural
	// StartScript(bossScript);
	NotifyEvent(bossScript,EV_START_BOSS,[]);
	
	// SetBGM("Deaf to All But the Song",70.7, 141.38); //now done in dialogue single
	while(!IsCloseScript(bossScript) && GetPlayerState() != STATE_END){
		yield;
	}
	CloseStgScene();
	CloseScript(GetOwnScriptID); //
}



//......................................................................
////////////////////////////////////////////////////////////////////////
//ABOVE: STAGE TASK
////////////////////////////////////////////////////////////////////////
//BELOW: ENEMY TASKS
////////////////////////////////////////////////////////////////////////
//......................................................................





function TStaticKunaiFairy1(x0,y0,y1,f1,f2){
	let fa = SpawnFairy(x0,y0,"blue","INSet1",14,200);
	// ObjMove_AddPatternA1(fa,0,s,a);
	ObjMove_SetDestAtWeight(fa,x0,y1,f1,10);
	let x=x0; let y=y0;
	Manage;
	ManageMove;
	ManageFinalize;
	return fa;
	task Manage{
		let N; let ms; let del;
		alternative(rank)
		case(RANK_EASY){ N=1; ms=3.5; del=10; }
		case(RANK_NORM){ N=1; ms=4.0; del=10; }
		case(RANK_HARD){ N=2; ms=5.0; del=10; }
		case(RANK_LUNA){ N=2; ms=6.0; del=10; }
		
		while(!Obj_IsDeleted(fa)){
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			
			ascent(i in 0..5){
				ascent(j in 0..N){
					CreateShotA1(x,y, ms*(1/(j+1))^0.5, 90+72*i, KUNAI_BLUE,3);
				}
			}
			SE_Play(se_shot2,80);
			wait(del);
		}
	}
	task ManageMove{
		let count=0;
		while(count<f2 && !Obj_IsDeleted(fa)){
			count++; yield;
		}
		// ObjMove_SetDestAtWeight(fa,x0,y0,f1,10);
		let a = getangle(OM_GetX(fa),OM_GetY(fa),x0,y0);
		OM_AddPatternA2(fa,0, 0,a, 0.01, 0, 1.5);
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}







//blue single split
function TCardFanFairy1(x,y,shotdel){
	let fa = SpawnFairy(x,y,"green","MoF",14,250);
	Manage;
	ManageFinalize;
	return fa;
	task Manage{
		// let N; let ms; let del;
		let N; let M; let L; let s; let acc; let angv; let ms; let del1; let del2;
		alternative(rank)
		case(RANK_EASY){ N= 13; L=0; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_NORM){ N= 14; L=0; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_HARD){ N= 15; L=0; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_LUNA){ N= 16; L=0; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		// case(RANK_HARD){ N= 5; M=1; L=2; s=3; acc=0.05; ms=3.25; angv=0.35; del1=60; del2=60; }
		
		wait(shotdel);
		if(Obj_IsDeleted(fa)){return;}
		
		x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
		let angle = GetAngleToPlayer(fa);
		let shot = CreateShotA2(x,y, s,angle, -s/del1, 0, CARD_BLUE, 10);
		AddShot(shot,L);
		task AddShot(shot0,num){
			SE_Play(se_chime,80);
			ObjMove_AddPatternA2(shot0,0,NO_CHANGE,NO_CHANGE, -s/del1, NO_CHANGE, 0);
			O_SetPropertyAtFrame(shot0,MOVE_ANGV,0,del1);
			wait(del2);
			if(Obj_IsDeleted(shot0)){return;}
			let x = ObjMove_GetX(shot0); let y = ObjMove_GetY(shot0);
			let a0 = ObjMove_GetAngle(shot0);
			// let s1 = s-1*(|a0-angle|)/180;
			ascent(i in 0..N){
				let off = lerp(-1,1,i/(N-1));
				let shot;
				//first row
				shot = CreateShotA2(x,y, s,     a0-60*off, -s/del1, ms, CARD_BLUE, 0);
				//second row
				shot = CreateShotA2(x,y, s*0.75,a0-55*off, -s/del1, ms, CARD_BLUE, 0);
				//backwards
				shot = CreateShotA2(x,y, ms,    a0-60*off, -s/del1,-ms, CARD_BLUE, 0);
			}
			Obj_Delete(shot0);
			SE_Play(se_chime2,80);
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}




//green recursive reverse split
function TCardFanFairy2(x,y,shotdel){
	let fa = SpawnFairy(x,y,"green","MoF",14,350);
	Manage;
	ManageFinalize;
	return fa;
	task Manage{
		// let N; let ms; let del;
		let N; let M; let L; let s; let acc; let angv; let ms; let del1; let del2;
		alternative(rank)
		case(RANK_EASY){ N= 3; L=2; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_NORM){ N= 4; L=2; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_HARD){ N= 5; L=2; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		case(RANK_LUNA){ N= 6; L=2; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=60; }
		// case(RANK_HARD){ N= 5; M=1; L=2; s=3; acc=0.05; ms=3.25; angv=0.35; del1=60; del2=60; }
		
		wait(shotdel);
		if(Obj_IsDeleted(fa)){return;}
		
		x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
		let angle = GetAngleToPlayer(fa);
		let shot = CreateShotA2(x,y, s,angle, -s/del1, 0, CARD_GREEN, 10);
		AddShot(shot,L);
		task AddShot(shot0,num){
			SE_Play(se_chime,80);
			ObjMove_AddPatternA2(shot0,0,NO_CHANGE,NO_CHANGE, -s/del1, NO_CHANGE, 0);
			O_SetPropertyAtFrame(shot0,MOVE_ANGV,0,del1);
			wait(del2);
			if(Obj_IsDeleted(shot0)){return;}
			let x = ObjMove_GetX(shot0); let y = ObjMove_GetY(shot0);
			let a0 = ObjMove_GetAngle(shot0);
			// let s1 = s-0.5*((L+1)-num);
			// let s1 = s*cos((L-num)*4);
			let s1 = s-1*(|a0-angle|)/180;
			// let a1 = a0-30; let a2 = a1+60;
			ascent(i in 0..N){
				let off = lerp(-1,1,i/(N-1));
				let shot = CreateShotA2(x,y, s,a0+180-60*off, -s1/del1, 0, CARD_GREEN, 0);
				if(num>0){ AddShot(shot,num-1); }
				else{
					// ObjMove_AddPatternA2(shot,del2,NO_CHANGE,a0, acc, angv*off, ms);
					ObjMove_AddPatternA2(shot,del2,s,a0, -acc, angv*off, ms);
				}
			}
			Obj_Delete(shot0);
			SE_Play(se_chime2,80);
			if(num==0){ SE_Play_Del(se_chime2,80,del2); }
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}






//purple double 360 3-card angle split
function TCardFanFairy3(x,y,shotdel){
	let fa = SpawnFairy(x,y,"green","MoF",14,350);
	Manage;
	ManageFinalize;
	return fa;
	task Manage{
		// let N; let ms; let del;
		let N; let M; let L; let s; let acc; let angv; let ms; let del1; let del2;
		alternative(rank)
		case(RANK_EASY){ N= 3; M= 5; L=1; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=30; }
		case(RANK_NORM){ N= 3; M=10; L=1; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=30; }
		case(RANK_HARD){ N= 3; M=15; L=1; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=30; }
		case(RANK_LUNA){ N= 3; M=20; L=1; s=3; acc=0.05; ms=1.25; angv=0.35; del1=60; del2=30; }
		// case(RANK_HARD){ N= 5; M=1; L=2; s=3; acc=0.05; ms=3.25; angv=0.35; del1=60; del2=60; }
		
		wait(shotdel);
		if(Obj_IsDeleted(fa)){return;}
		
		x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
		let angle = GetAngleToPlayer(fa);
		ascent(i in 0..M){
			let shot = CreateShotA2(x,y, s,angle+i*360/M, -s/del2, 0, CARD_PURPLE, 10);
			AddShot(shot,L);
		}
		task AddShot(shot0,num){
			SE_Play(se_chime,80);
			ObjMove_AddPatternA2(shot0,0,NO_CHANGE,NO_CHANGE, -s/del1, NO_CHANGE, ms);
			O_SetPropertyAtFrame(shot0,MOVE_ANGV,0,del1);
			wait(del2);
			if(Obj_IsDeleted(shot0)){return;}
			let x = ObjMove_GetX(shot0); let y = ObjMove_GetY(shot0);
			let a0 = ObjMove_GetAngle(shot0);
			let ms1 = max(0,ms-9999*num);
			// let s1 = s-0.5*((L+1)-num);
			// let s1 = s*cos((L-num)*4);
			// let s1 = s-1*(|a0-angle|)/180;
			// let a1 = a0-30; let a2 = a1+60;
			ascent(i in 0..N){
				// let off = lerp(-1,1,i/(N-1));
				// let vary = lerp(0.5,1.5,i/N);
				// let shot = CreateShotA2(x,y, s*vary, a0-60*(-1)^num, (ms-s)/del2, ms1, CARD_PURPLE, 0);
				let shot = CreateShotA2(x,y, s+0.3*i, a0-60*(-1)^num, (ms-s)/del2, ms1, CARD_PURPLE, 0);
				if(num>0){ AddShot(shot,num-1); }
			}
			Obj_Delete(shot0);
			SE_Play(se_chime2,80);
			// if(num==0){ SE_Play_Del(se_chime2,80,del2); }
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}






function TBallDropFairy1(x,y,shootdel){
	let fa = SpawnFairy(x,y,"blue","INSet1",14,150);
	Manage;
	ManageFinalize;
	return fa;
	task Manage{
		let s; let ms; let del;
		alternative(rank)
		case(RANK_EASY){ s=-1.5; ms=1.75; del=60; } //ms=1.5
		case(RANK_NORM){ s=-1.5; ms=1.75; del=40; }
		case(RANK_HARD){ s=-1.5; ms=1.75; del=30; }
		case(RANK_LUNA){ s=-1.5; ms=1.75; del=20; }
		
		while(!Obj_IsDeleted(fa)){
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			
			// CreateShotA1(x,y, ms*(1/(j+1))^0.5, 90+72*i, LARGE_BLUE,3);
			CreateShotA2(x,y, s,90, (ms-s)/90, ms,  LARGE_BLUE,3);
			
			SE_Play(se_chime,80);
			wait(del);
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}




function TStaticLaserYinYang1(x,y,shootdel){
	// let fa = SpawnFairy(x,y,"blue","INSet1",14,300);
	let fa = SpawnYinYang(x,y,"blue",150,shootdel);
	Manage;
	ManageFinalize;
	return fa;
	task Manage{
		let s0; let s1; let del; //60/40/30/20
		alternative(rank)
		case(RANK_EASY){ s0=3; s1=3.5; del=20; }
		case(RANK_NORM){ s0=3; s1=3.5; del=15; }
		case(RANK_HARD){ s0=3; s1=3.5; del=20; }
		case(RANK_LUNA){ s0=3; s1=3.5; del=10; }
		
		while(!Obj_IsDeleted(fa)){
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			ascent(i in 0..6){
				// let shot = CreateLooseLaserA1(x,y,s0, 90+i*360/6, 120, 15, LAS_C_RED, 30);
				let a = 90+i*360/6;
				let shot = CreateLooseLaserA1(x,y,s0, a, 120, 12, LAS_LARGE_RED, 15);
				ObjMove_SetDestAtWeight(shot, x+250*cos(a),y+250*sin(a), 120, 10);
				ObjMove_AddPatternA2(shot,135,NO_CHANGE,NO_CHANGE, s1/15,0,s1);
				// ObjMove_AddPatternA2(shot,30,NO_CHANGE,NO_CHANGE, -s0/120,0,0);
				// ObjMove_AddPatternA2(shot,150,NO_CHANGE,NO_CHANGE, s1/60,0,s1);
			}
			SE_Play(se_laser2,80);
			wait(del);
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(fa) && ObjEnemy_GetLife(fa)>0){yield;}
		if(!Obj_IsDeleted(fa)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(fa); y = ObjMove_GetY(fa);
			DropItemsSmall(x,y);
			Obj_Delete(fa);
		}
	}
}








//Alright, now for some trash enemies

function TKedama1(x,y,s,a,color,life){
	let kd = SpawnKedama(x,y,color,life);
	ObjMove_AddPatternA1(kd,0,s,a);
	Manage;
	ManageFinalize;
	return kd;
	
	task Manage{
		let del;
		alternative(rank)
		case(RANK_EASY){ del = 90; s = 2;    }
		case(RANK_NORM){ del = 45; s = 2.75; }
		case(RANK_HARD){ del = 30; s = 3.5;  }
		case(RANK_LUNA){ del = 10; s = 4.25; }
		others{ del = 1; }
		
		wait(2*del); //lengthy delay before it actually shoots anything
		while(!Obj_IsDeleted(kd) && ObjEnemy_GetLife(kd)>0){
			x = ObjMove_GetX(kd); y = ObjMove_GetY(kd);
			ascent(i in 0..3){
				CreateShotA1(x,y,s*(1-0.15*i),GetAngleToPlayer(kd), KUNAI_RED,10);
			}
			SE_Play(se_shot,60);
			loop(del){yield; if(ObjEnemy_GetLife(kd)==0){break;}}
		}
		
		
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(kd) && ObjEnemy_GetLife(kd)>0){yield;}
		if(!Obj_IsDeleted(kd)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(kd); y = ObjMove_GetY(kd);
			ascent(i in 0..3){
				CreateShotA1(x,y,s*(1-0.15*i),rand(0,360), BALL_BLUE,0);
			}

			alternative(color)
			case("red"){  DropItemsSmallest(x,y, I_POWER); }
			case("blue"){ DropItemsSmallest(x,y, I_POINT); }
			others{ DropItemsSmallest(x,y, tern(rand(0,1)<0.5,I_POINT,I_POWER)); }
			
			
			Obj_Delete(kd);
		}
	}
	
}


function DropItemsSmallest(x,y,type){
	DropItemsA1(x,y, type,1,0,0);
	ItemExplode(x,y,randint(1,2));
}

function DropItemsSmaller(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,3,15,a);
	DropItemsA1(x,y,I_POWER,1,0,a);
	ItemExplode(x,y,3);
}

function DropItemsSmall(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POWER,3,8,a);
	ItemExplode(x,y,5);
}
function DropItemsLarge(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POINT_S,16,28,a+360/16);
	DropItemsA1(x,y,I_POWER_L,1,0,a);
	ItemExplode(x,y,10);
}
function DropItemsLifePiece(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POINT_S,16,28,a+360/16);
	DropItemsA1(x,y,I_EXTEND_S,1,0,a);
	ItemExplode(x,y,10);
}


function SetTurnAtFrame(obj,del,turndegrees,turnradius){	
	let circum = todeg(2*pi*turnradius);
	let arclength = circum * turndegrees/360;
	
	let spd = ObjMove_GetSpeed(obj);
	let turntime = (|arclength/spd|);             //works for finding angv,
	let angv = circum/turntime*sign(turndegrees); //but then never stops?
	let actualrealfinalturntime = turndegrees/angv; // ￣\_(ツ)_/￣ this works for some reason
		
	Manage;
	task Manage{
		wait(del);
		ObjMove_SetAngularVelocity(obj,angv);
		loop(actualrealfinalturntime){ yield; } //wait to face new angle
		ObjMove_SetAngularVelocity(obj,0);
	}
	
	return turntime;
}