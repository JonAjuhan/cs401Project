//my shitty one
let MAGICCIRCLE_DEFAULT = 0;
let MAGICCIRCLE_RAINBOW = 1;
let MAGICCIRCLE_WHITE = 2;
let MagicCircleType = MAGICCIRCLE_DEFAULT;
let MagicCircleColor = [255,255,255];

//Changing these takes effect next period
let MCircNextPeriod = 240; //180
let MCircNextAlpha = 120; //180
let MCircNextScale = 2.5; //3
//Actual values used - change Next values too to prevent being reset
let MCircPeriod = 240; //180
let MCircAlpha = 120; //120
let MCircScale = 2.5; //3

let MCircRotSpd = 1.5; //9

let objMagicCircle;
let objSpellCircle;

task TMagicCircle() {
	//apparently I've disabled starting the script that normally does this
	objSpellCircle = MagicCircle(); //the normal, better one
	
	yield;
	
	
	objMagicCircle = ObjPrim_Create(OBJ_SPRITE_2D);
	let img = CSD~"../img/magiccircle_rb.png";
	//let boss = GetEnemyBossObjectID();
	let objscene = GetEnemyBossSceneObjectID();
	
	ObjPrim_SetTexture(objMagicCircle, img);
	let off;
	alternative(MagicCircleType)
		case(MAGICCIRCLE_DEFAULT){ off = 0; }
		case(MAGICCIRCLE_RAINBOW){ off = 0; }
		case(MAGICCIRCLE_WHITE)  { off = 1170; }
	ObjSprite2D_SetSourceRect(objMagicCircle, off, 0, off+129, 129);
//	ObjSprite2D_SetSourceRect(objMagicCircle, 0, 0, 129, 129);
	ObjRender_SetScaleXYZ(objMagicCircle,MCircScale,MCircScale,0);
	Obj_SetRenderPriorityI(objMagicCircle,21);
	ObjSprite2D_SetDestCenter(objMagicCircle);
	ObjRender_SetPosition(objMagicCircle,ex,ey,0);
	ObjRender_SetAlpha(objMagicCircle,MCircAlpha);
	ObjRender_SetBlendType(objMagicCircle,BLEND_ADD_ARGB);
	
	let hiding=false;
	
	let angx = 0; 
	let angy = 90; 
	let angz = 0;
	
	let x = ex; let y = ey;
	let count = 0;
	while(ObjEnemyBossScene_GetInfo(objscene,INFO_IS_SPELL)){
		while(MCircAlpha==0){yield;}
		MCircPeriod = MCircNextPeriod;
		MCircAlpha  = MCircNextAlpha; 
		MCircScale  = MCircNextScale;
		
		loop(MCircPeriod) {
			ObjRender_SetPosition(objMagicCircle,x,y,0);
			
			ObjRender_SetAngleX(objMagicCircle,  max( 25*cos(count*180/MCircPeriod) ,0));
			ObjRender_SetAngleY(objMagicCircle,  max( 25*sin(count*180/MCircPeriod) ,0));
			
			alternative(MagicCircleType)
			case(MAGICCIRCLE_DEFAULT){angz += MCircRotSpd;}
			case(MAGICCIRCLE_RAINBOW){angz += MCircRotSpd*sin(count*180/MCircPeriod)*sign(sin(count*180/MCircPeriod));}
			case(MAGICCIRCLE_WHITE){  angz += MCircRotSpd;}
			ObjRender_SetAngleZ(objMagicCircle,angz);
			
			ObjRender_SetScaleXYZ(objMagicCircle,MCircScale*0.95,MCircScale,0);
			
			if(hiding || getdatd("HideMagicCircle",false)){
				if(!hiding){Hide;}
			}else{
				ObjRender_SetAlpha(objMagicCircle,MCircAlpha);//*tern(getdatd("HideMagicCircle",false),0,1));
			}
			
			x=(ex+2*x)/3; y=(ey+2*y)/3;
			count++;
			yield;
		}
		alternative(MagicCircleType)
			case(MAGICCIRCLE_RAINBOW){ 
				off += 130; off %= 910; 
				ObjRender_SetAngleX(objMagicCircle,   45*cos(count*180/MCircPeriod));
				ObjRender_SetAngleY(objMagicCircle,90+90*sin(count*180/MCircPeriod));
			}
			case(MAGICCIRCLE_WHITE)  { 
				off = 1170; 
			}
		ObjSprite2D_SetSourceRect(objMagicCircle, off, 0, off+129, 129);
	}
	
	task Hide{
		hiding = true;
		let fadetime = getdatd("HideMagicCircleTime",20);
		descent(i in 0..fadetime){
			ObjRender_SetAlpha(objMagicCircle,MCircAlpha*i/fadetime);
			yield;
		}
		while(getdatd("HideMagicCircle",false)){
			ObjRender_SetAlpha(objMagicCircle,0);
			yield;
		}
		fadetime = getdatd("HideMagicCircleTime",fadetime);
		ascent(i in 0..fadetime){
			ObjRender_SetAlpha(objMagicCircle,MCircAlpha*i/fadetime);
			yield;
		}
		hiding = false;
	}
	
}





//actual one
let dirCurrent = GetCurrentScriptDirectory();
let typeEnd = 0;
let END_FAILED = 1;
let END_SUCCESS = 2;
let text = ObjText_Create();







function MagicCircle(){
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	MagicCircleTask;
	return obj;
	
	task MagicCircleTask(){
		
		//頂点奇数：偶数：円の外側、円の内側
		let countVertex = 64;
		let listRadius = [];
		loop(countVertex/2)
		{
			listRadius = listRadius ~ [0]; //[0] //rand(0,512)
			listRadius = listRadius ~ [100];
		}

		//let path = dirCurrent ~ "../img/magiccircle_00.png";
		let path = dirCurrent ~ "../img/Default_MagicCircle.png";
	//DRAWTEST(path,20,20);
	//DRAWTEST2(path,px,py);
		
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP); //PRIMITIVE_TRIANGLESTRIP
		ObjPrim_SetVertexCount(obj, countVertex);
		ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
		//Obj_SetRenderPriorityI(obj, 30);
		Obj_SetRenderPriority(obj, 0.3);
		ObjPrim_SetTexture(obj, path);
		ascent(iVert in 0..countVertex / 2)
		{
			let left = iVert * 128;
			let indexVert = iVert * 2;
			ObjPrim_SetVertexUVT(obj, indexVert + 0, left, 0);
			ObjPrim_SetVertexUVT(obj, indexVert + 1, left, 64);		
		}

		loop(5){yield;}
		let objScene = GetEnemyBossSceneObjectID();
		let objBoss = GetEnemyBossObjectID()[0];
		let timerOrg = ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF);
		let bLastSpell = ObjEnemyBossScene_GetInfo(objScene, INFO_IS_LAST_SPELL);
		
		let cx = 0;
		let cy = 0;
		//let maxRadius = 256 * 1.2;
		let maxRadius = 512 * 1.2;
		//let alpha = 0;
		let alpha = Obj_GetValueD(obj,"MinAlpha",0)/255;
		let maxalpha = Obj_GetValueD(obj,"MaxAlpha",255)/255;
		let effalpha = alpha;
		let frame = 0;
		let angleRender = 0;
		let hiding = false;

		function UpdateAlpha()
		{
			if(getdatd("HideMagicCircle",false) || hiding){
				if(!hiding){Hide;}
			}else{
				effalpha=alpha;
			}
			//effalpha = alpha*tern(getdatd("HideMagicCircle",false),0,1);
			if(bLastSpell)
			{
				ObjRender_SetColor(obj, 255 * effalpha, 192 * effalpha, 192 * effalpha);
			}
			else
			{
				ObjRender_SetColor(obj, 192 * effalpha, 192 * effalpha, 255 * effalpha);
			}

			ObjRender_SetPosition(obj, cx, cy, 0);
			ObjRender_SetAngleZ(obj, angleRender);
		}

		while(typeEnd == 0)
		{
			if(!Obj_IsDeleted(objBoss))
			{
				cx = ObjRender_GetX(objBoss);
				cy = ObjRender_GetY(objBoss);
			}

			alpha += 1/120;  // / 120;
			alpha = min(alpha, maxalpha);
			angleRender += 360/countVertex/4;

			let timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
			let rRate = timer / timerOrg;
			let bMiss = ( ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) > 0 || ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) > 0 );
	//
			ascent(iVert in 0..countVertex / 2)
			{
				let indexVert = iVert * 2;
				let angle = 360 / (countVertex / 2 - 1) * iVert;

				//Outer circle (shrinks inward)
				let vx1 = listRadius[indexVert] * cos(angle);
				let vy1 = listRadius[indexVert] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1*listRadius[indexVert], vy1*listRadius[indexVert], 0);	//ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1, vy1, 0);
				//Inner circle
				let vx2 = listRadius[indexVert+1] * cos(angle);
				let vy2 = listRadius[indexVert+1] * sin(angle);			
				ObjPrim_SetVertexPosition(obj, indexVert + 1, vx2, vy2, 0);

				//魔方陣拡大
				//Contract outer - Initially expand to full size?
				if(frame >= 0){//外側
					let dr = (maxRadius * rRate - listRadius[indexVert]) / 16;
					listRadius[indexVert] = listRadius[indexVert] + dr;
					//listRadius[indexVert+1] = listRadius[indexVert] - 15;
				}
				//Contract inner
				if(frame > 45){//内側
					let rRateIn = rRate - 0.08;
					if(bMiss)
					{
						rRateIn = rRate - 0.04;
					}
					if(rRateIn < 0){rRateIn=0;}
					//let dr= (maxRadius * rRateIn - listRadius[indexVert + 1]) / 64 /32;
					let dr = (maxRadius * rRate - listRadius[indexVert+1]) / 1024;
					listRadius[indexVert + 1] = listRadius[indexVert + 1] + dr; //dr/32
					//listRadius[indexVert + 1] = listRadius[indexVert]*16;
				//	listRadius[indexVert + 1] = maxRadius/2+frame/2*rRateIn;
				
				}else{listRadius[indexVert + 1] = listRadius[indexVert + 1] + 1;}

			}

			UpdateAlpha();
			frame++;

			yield;
		}

		//スペルカード取得失敗
		//When spell ends
		if(typeEnd == END_FAILED){
	//BREAK(nyaa,se_explode);
			Obj_Delete(obj);
			// NotifyEventAll(EV_USER_STAGE+3,[]); //tell system to show failure message
			NotifyEventAll(EV_FAIL_SPELL,[]); //tell system to show failure message
			CloseScript(GetOwnScriptID()); //hey, this isn't a separate script
			return;
		}

		let rRate = 1.0;
		frame = 0;
		alpha = 1;
		//スペルカード取得成功
		loop(105)
		{
			angleRender += 360 / countVertex / 4;
			let dx = (GetPlayerX() - cx) / 16;
			let dy = (GetPlayerY() - cy) / 16;
			cx += dx;
			cy += dy;
			if(frame >= 45)
			{
				alpha -= 1 / 45;
				alpha = max(alpha, 0);
			}

			
			ascent(iVert in 0..countVertex / 2)
			{
				let indexVert = iVert * 2;
				let angle = 360 / (countVertex / 2 - 1) * iVert;

				let vx1 = listRadius[indexVert] * cos(angle);
				let vy1 = listRadius[indexVert] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1, vy1, 0);
	//

				let vx2 = listRadius[indexVert+1] * cos(angle);
				let vy2 = listRadius[indexVert+1] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 1, vx2, vy2, 0);
	//

				let drOut = 0;
				let drIn = 0;
				if(frame <= 45)
				{
					//魔方陣拡大
					let rRateOut = 1.0;
					drOut = (maxRadius * rRateOut - listRadius[indexVert]) / 8;

					let rRateIn = rRateOut - 0.08;
					if(rRateIn<0){rRateIn=0;}
					drIn = (maxRadius * rRateIn - listRadius[indexVert+1]) / 8;
				}
				else
				{
					cx = GetPlayerX();
					cy = GetPlayerY();

					rRate -= 1.0 / 60.0;
					let rRateOut = rRate * sin(angle % 60);
					drOut = (maxRadius * rRateOut - listRadius[indexVert]) / 16;

					let rRateIn = rRate * sin(angle % 60)-0.08;
					if(rRateIn<0){rRateIn=0;}
					drIn=(maxRadius * rRateIn - listRadius[indexVert+1])/16;
				}
				listRadius[indexVert] = listRadius[indexVert] + drOut;
				listRadius[indexVert + 1] = listRadius[indexVert + 1] + drIn;
			}

			UpdateAlpha();
			frame++;
			yield;
		}

		Obj_Delete(obj);
		CloseScript(GetOwnScriptID()); //hey, this isn't a separate script
	
	
	
		task Hide{
			hiding = true;
			let fadetime = getdatd("HideMagicCircleTime",20);
			descent(i in 0..fadetime){
				effalpha = alpha*i/fadetime;
				yield;
			}
			while(getdatd("HideMagicCircle",false)){
				effalpha = 0;
				yield;
			}
			fadetime = getdatd("HideMagicCircleTime",fadetime);
			ascent(i in 0..fadetime){
				effalpha = alpha*i/fadetime;
				yield;
			}
			hiding = false;
		}
	
	
	}
	
	
}














//make player aware that thing happened
function BREAK(se1,se2) {
	SE_Play(se1,100);
	SE_Play(se2,100);
}


function DRAWTEST(img,x,y) {
	//let img = CSD~"../img/magiccircle_rb.png";
	let boss = GetEnemyBossObjectID();
	let objscene = GetEnemyBossSceneObjectID();
	let objTest = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objTest, img);

	ObjSprite2D_SetSourceRect(objTest, 0, 0, 129, 129);
	ObjRender_SetScaleXYZ(objTest,1,1,0);
	Obj_SetRenderPriorityI(objTest,51);
	ObjSprite2D_SetDestCenter(objTest);
	ObjRender_SetPosition(objTest,x,y,0);
	ObjRender_SetBlendType(objTest,BLEND_ADD_ARGB);
	
}


task DRAWTEST2(path,x,y) {
	let countVertex = 64;
	let listRadius = [];
	loop(countVertex){listRadius = listRadius ~ [0];}
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	//ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, countVertex);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriority(obj, 0.3);
	ObjPrim_SetTexture(obj, path);
	
	ascent(iVert in 0..countVertex / 2)
	{
		let left = iVert * 128;
		let indexVert = iVert * 2;
		ObjPrim_SetVertexUVT(obj, indexVert + 0, left, 0);
		ObjPrim_SetVertexUVT(obj, indexVert + 1, left, 64);		
	}
	
	
	while(true){
		ascent(i in 0..countVertex/2) {
			ObjPrim_SetVertexPosition(obj, 2*i,   px+50*cos(i*743/countVertex), py+50*sin(i*743/countVertex), 0);
			ObjPrim_SetVertexPosition(obj, 2*i+1, px+40*cos(i*743/countVertex), py+40*sin(i*743/countVertex), 0);
		}
		yield;
	}
}

























//Shitty jank version heavily modified at random in an attempt to get it to work
//Turns out my timers were out of sync
/*
function MagicCircle2(){
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	MagicCircleTask;
	return obj;
	
	task MagicCircleTask(){
		
		//頂点奇数：偶数：円の外側、円の内側
		let countVertex = 64; //64
		let listRadius = [];
		loop(countVertex/2)
		{
			listRadius = listRadius ~ [0]; //[0] //rand(0,512)
			listRadius = listRadius ~ [100];		//0,100
		}

		//let path = dirCurrent ~ "../img/magiccircle_00.png";
		let path = dirCurrent ~ "../img/Default_MagicCircle.png";
	//DRAWTEST(path,20,20);
	//DRAWTEST2(path,px,py);
//		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP); //PRIMITIVE_TRIANGLESTRIP
		ObjPrim_SetVertexCount(obj, countVertex);
		ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
		//Obj_SetRenderPriorityI(obj, 30);
		Obj_SetRenderPriority(obj, 0.3);
		ObjPrim_SetTexture(obj, path);
		ascent(iVert in 0..countVertex / 2)
		{
			let left = iVert * 128;
			let indexVert = iVert * 2;
			ObjPrim_SetVertexUVT(obj, indexVert + 0, left, 0);
			ObjPrim_SetVertexUVT(obj, indexVert + 1, left, 64);		
		}

		loop(5){yield;}
		let objScene = GetEnemyBossSceneObjectID();
		let objBoss = GetEnemyBossObjectID()[0];
		let timerOrg = ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF);
		let bLastSpell = ObjEnemyBossScene_GetInfo(objScene, INFO_IS_LAST_SPELL);
		
		let cx = 0;
		let cy = 0;
		//let maxRadius = 256 * 1.2;
		let maxRadius = 512 * 1.2;
		let alpha = Obj_GetValueD(obj,"MinAlpha",0);
		let maxalpha = Obj_GetValueD(obj,"MaxAlpha",255)/255;
		let frame = 0;
		let angleRender = 0;

		function UpdateVertex()
		{
			if(bLastSpell)
			{
				ObjRender_SetColor(obj, 255 * alpha, 192 * alpha, 192 * alpha);
			}
			else
			{
				ObjRender_SetColor(obj, 192 * alpha, 192 * alpha, 255 * alpha);
			}

			ObjRender_SetPosition(obj, cx, cy, 0);
			ObjRender_SetAngleZ(obj, angleRender);
		}

		while(typeEnd == 0)
		{
			if(!Obj_IsDeleted(objBoss))
			{
				cx = ObjRender_GetX(objBoss);
				cy = ObjRender_GetY(objBoss);
			}

			alpha += 1/120;  // / 120;
			alpha = min(alpha, maxalpha);
			angleRender += 360 / countVertex / 4;

			let timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
			let rRate = timer / timerOrg;
			let bMiss = ( ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) > 0 || ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) > 0 );
	//
			ascent(iVert in 0..countVertex / 2)
			{
				let indexVert = iVert * 2;
				let angle = 360 / (countVertex / 2 - 1) * iVert;

				//Outer circle (shrinks inward)
				let vx1 = listRadius[indexVert] * cos(angle);
				let vy1 = listRadius[indexVert] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1*listRadius[indexVert], vy1*listRadius[indexVert], 0);	//ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1, vy1, 0);
				//Inner circle
				let vx2 = listRadius[indexVert+1] * cos(angle);
				let vy2 = listRadius[indexVert+1] * sin(angle);			
				ObjPrim_SetVertexPosition(obj, indexVert + 1, vx2, vy2, 0);

				//魔方陣拡大
				//Contract outer - Initially expand to full size?
				if(frame >= 0){//外側
					let dr = (maxRadius * rRate - listRadius[indexVert]) / 16;
					listRadius[indexVert] = listRadius[indexVert] + dr;
					//listRadius[indexVert+1] = listRadius[indexVert] - 15;
				}
				//Contract inner
				if(frame > 45){//内側
					let rRateIn = rRate - 0.08;
					if(bMiss)
					{
						rRateIn = rRate - 0.04;
					}
					if(rRateIn < 0){rRateIn=0;}
					//let dr= (maxRadius * rRateIn - listRadius[indexVert + 1]) / 64 /32;
					let dr = (maxRadius * rRate - listRadius[indexVert+1]) / 1024;
//					listRadius[indexVert + 1] = listRadius[indexVert + 1] + dr; //dr/32
					//listRadius[indexVert + 1] = listRadius[indexVert]*16;
					listRadius[indexVert + 1] = maxRadius/2+frame/2*rRateIn;
				
				} //else{listRadius[indexVert + 1] = listRadius[indexVert + 1] + 1;}

			}

			UpdateVertex();
			frame++;

			yield;
		}

		//スペルカード取得失敗
		//When spell ends
		if(typeEnd == END_FAILED){
	//BREAK(nyaa,se_explode);
			Obj_Delete(obj);
			NotifyEventAll(EV_USER_STAGE+3,[]); //tell system to show failure message
			CloseScript(GetOwnScriptID());
			return;
		}

		let rRate = 1.0;
		frame = 0;
		alpha = 1;
		//スペルカード取得成功
		loop(105)
		{
			angleRender += 360 / countVertex / 4;
			let dx = (GetPlayerX() - cx) / 16;
			let dy = (GetPlayerY() - cy) / 16;
			cx += dx;
			cy += dy;
			if(frame >= 45)
			{
				alpha -= 1 / 45;
				alpha = max(alpha, 0);
			}

			ascent(iVert in 0..countVertex / 2)
			{
				let indexVert = iVert * 2;
				let angle = 360 / (countVertex / 2 - 1) * iVert;

				let vx1 = listRadius[indexVert] * cos(angle);
				let vy1 = listRadius[indexVert] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1, vy1, 0);
	//

				let vx2 = listRadius[indexVert+1] * cos(angle);
				let vy2 = listRadius[indexVert+1] * sin(angle);
				ObjPrim_SetVertexPosition(obj, indexVert + 1, vx2, vy2, 0);
	//

				let drOut = 0;
				let drIn = 0;
				if(frame <= 45)
				{
					//魔方陣拡大
					let rRateOut = 1.0;
					drOut = (maxRadius * rRateOut - listRadius[indexVert]) / 8;

					let rRateIn = rRateOut - 0.08;
					if(rRateIn<0){rRateIn=0;}
					drIn = (maxRadius * rRateIn - listRadius[indexVert+1]) / 8;
				}
				else
				{
					cx = GetPlayerX();
					cy = GetPlayerY();

					rRate -= 1.0 / 60.0;
					let rRateOut = rRate * sin(angle % 60);
					drOut = (maxRadius * rRateOut - listRadius[indexVert]) / 16;

					let rRateIn = rRate * sin(angle % 60)-0.08;
					if(rRateIn<0){rRateIn=0;}
					drIn=(maxRadius * rRateIn - listRadius[indexVert+1])/16;
				}
				listRadius[indexVert] = listRadius[indexVert] + drOut;
				listRadius[indexVert + 1] = listRadius[indexVert + 1] + drIn;
			}

			UpdateVertex();
			frame++;
			yield;
		}

		Obj_Delete(obj);
		CloseScript(GetOwnScriptID());
		
		
	}

}
*/