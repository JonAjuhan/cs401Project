// #include "./Resources.txt"
#include "./TypeFunctions.txt"

let EV_SPAWN_ITEM = EV_USER_SYSTEM+1;




let EV_SET_SONG    = EV_USER_SYSTEM+10;
let EV_FADE_SONG   = EV_USER_SYSTEM+11;
let EV_STOP_SONG   = EV_USER_SYSTEM+12;
let EV_RESUME_SONG = EV_USER_SYSTEM+13;
let EV_START_SONG  = EV_USER_SYSTEM+14;
let EV_DELETE_SONG = EV_USER_SYSTEM+15;

let EV_START_BOSS  = EV_USER_STAGE+10; //signal already-running plural to start boss

// let EV_CANCEL_PLAYER_DEATH = EV_USER_PLAYER+2; //NYI
// let EV_GET_CONTINUE = EV_USER_PLAYER+2; //NYI

// let EV_SET_DIFFICULTY = EV_USER+8; //unused, I do this with common data
// let EV_FAM_DIE = EV_USER+3; //unused afaik

//For a full list of built-in events, see:
//http://www.geocities.co.jp/SiliconValley-Oakland/9951/pre/th_dnh_help_v3_data/description.html#Event

let EV_FAIL_SPELL = EV_USER_SYSTEM+66; //since there doesn't seem to be one of these otherwise

// [centerObj, circleindex, rotspd,rotoff, distort, mRad, maxalpha, r,g,b]
let EV_ADD_MAGICCIRCLE = EV_USER_SYSTEM+888; 





//Notify system to do a screen shatter effect (beyond that which happens automatically)
//Pass any arguments as [ "key:value", "key:value" ]
let EV_SHATTER_SCREEN = EV_USER_SYSTEM+333; 
let EV_SET_FULLSCREEN = EV_USER_SYSTEM+165;
let EV_PLAY_SOUND = EV_USER_SYSTEM+69; //for times when a sound needs to be played by system




////////////////////////////////////
//Experimental, should not be used//
let EV_FREEZE_STAGE = EV_USER_PACKAGE+495; //PauseStageScene from package, for args[0] frames
let EV_MOVE_OBJECTS = EV_USER_PACKAGE+2468; // [ [objID,frame,x,y,time], [...], [...]  ]



// let EV_REQUEST_RUN_SCRIPT = EV_USER_PACKAGE+17;



//////////////////////////////////////////////////////////////////////////////////////////////

let SCRIPT_ALL="";
let SCRIPT_OWN=":p";
let SCRIPT_PACKAGE     = "PackageScriptID";
let SCRIPT_SYSTEM      = "SystemScriptID"; 
let SCRIPT_STAGE       = "StageScriptID";
let SCRIPT_PLURAL      = "PluralScriptID"; 
let SCRIPT_SINGLE      = "SingleScriptID";
let SCRIPT_PLAYER      = "PlayerScriptID";

let SCRIPT_BACKGROUND  = "BackgroundScriptID";
let SCRIPT_MAGICCIRCLE = "MagicCircleScriptID";

let SCRIPT_SHOT        = "ShotScriptID";
let SCRIPT_ITEM        = "ItemScriptID";
let SCRIPT_PAUSE       = "PauseScriptID";
let SCRIPT_ENDSCENE    = "EndSceneScriptID";
let SCRIPT_MUSIC       = "MusicScriptID"; //same as system script

function GetScriptID(type){
	if(type==SCRIPT_OWN){return GetOwnScriptID;}
	let id = GetCommonData(type,ID_INVALID);
	return id;
}
function SetScriptID(type){
	SetCommonData(type,GetOwnScriptID);
}

function Notify(type,event,args){
	let id = GetScriptID(type);
	// let hash = cast(GetNextHash(),args);
	let hash;
	if(length(args)==0){ hash = [ GetNextHash() ]; }
	// else{ hash = cast(GetNextHash(),args[0]); }
	else{ hash = cast(GetNextHash(),args); }
	
	// WriteLog("hash,args,args[0]");
	// WriteLog(hash);
	// WriteLog(args);
	// if(length(args)>0){WriteLog(args[0]);}
	// WriteLog("typeof( hash,args,args[0] )");
	// WriteLog(typeof(hash));
	// WriteLog(typeof(args));
	// if(length(args)>0){WriteLog(typeof(args[0]));}
	
	args = args ~ hash;
	// if(compatible(args, [hash] )){
		// args = args ~ [ hash ];
	// }else{
		// WriteLog("Failed to append hash to args");
		// WriteLog("args: "~dbtost(args));
		// WriteLog("hash: "~dbtost(hash));
	// }
	
	if(id==ID_INVALID || type==SCRIPT_ALL || ((type==SCRIPT_PACKAGE)!=(GetOwnScriptID==GetScriptID(SCRIPT_PACKAGE))) ) {
		NotifyEventAll(event,args);
	}
	else{
		NotifyEvent(id,event,args);
	}
	return hash;
}

task SetEventResult(hash,result){
	SetCommonData("EventResult"~itoa(hash), result);
	yield; yield;
	DeleteCommonData("EventResult"~itoa(hash));
}

function GetEventResult(hash){
	let val = GetCommonData("EventResult"~itoa(hash), NULL);
	DeleteCommonData("EventResult"~itoa(hash));
	return val;
}

function GetEventResults(hashes){
	let vals = [];
	ascent(i in 0..length(hashes)){
		vals = vals ~ [ GetEventResult(hashes[i]) ];
	}
	return vals;
}



let NEXT_HASH = 1;
function GetNextHash{
	let hash = NEXT_HASH;
	NEXT_HASH = NEXT_HASH%2048+1;
	// let hash = GetCommonData("NextHash",1);
	// SetCommonData("NextHash",hash%2048+1);
	return hash;
}








// function MatchArrayType(arr,v){
	// if(length(arr)==0){ return v; }
	// let u = arr[0];
	// let tA = Obj_GetType(u);
	// let tV = Obj_GetType(v);
	// if(tA==tV){ return v; }
	// if(tA==
// }

