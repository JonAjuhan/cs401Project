let csd = GetCurrentScriptDirectory;
let sed = csd~"../se/";

//////////////////////////////////////////////////////////////////////
// Shots
//////////////////////////////////////////////////////////////////////
let se_shot =  sed~"shot.wav";  //the punchiest - louder than the others

let se_shot1 = sed~"Shot1.wav"; //quite soft
let se_shot2 = sed~"Shot2.wav"; //kinda rolls the start
let se_shot3 = sed~"Shot3.wav"; //muffled a bit
let se_shot4 = sed~"Shot4.wav"; //different; higher-pitch, muffled whipcrack?
let se_shot5 = sed~"Shot5.wav"; //different; distant gunshot? muffled
let se_shot6 = sed~"Shot6.wav"; //distant se_shot?
let se_shot7 = sed~"Shot7.wav"; //sounds more like an energy pellet sort of thing
let se_shot8 = sed~"Shot8.wav"; //twangy, zingy, charge-shot-y, version of standard shot se
function se_shotrand{ return sed~"shot"~itoa(rand(1,8))~".wav";}

let se_tan00    = sed~"se_tan00.wav";
let se_tan01    = sed~"se_tan01.wav";
let se_tan02    = sed~"se_tan02.wav";

//////////////////////////////////////////////////////////////////////
// Chimes
//////////////////////////////////////////////////////////////////////
let se_chime       = sed~"chime.wav";     //normal chime
let se_chime2      = sed~"chime2.wav";    //flourish chime
let se_chime3      = sed~"chime3.wav";    //flat chime

let se_flourish    = sed~"se_kira01.wav"; //
let se_kira        = sed~"se_kira02_clipped.wav";

let se_kira01      = sed~"se_kira01.wav";	//long flourish
let se_kira02      = sed~"se_kira02.wav";	//short flourish

let se_wave        = sed~"hiwave.wav";	    //Koishi wave hi, resembles flourish but flatter
let se_warn        = sed~"warn.wav";	    //resembles short flourish but lower

//////////////////////////////////////////////////////////////////////
// Charges
//////////////////////////////////////////////////////////////////////
let se_charge        = sed~"charge.wav";      //
let se_charge1       = sed~"charge.wav";      //"Pulse" charge
let se_charge2       = sed~"charge2.wav";     //"Gather" charge
let se_charge3       = sed~"charge3.wav";     //"Round" charge

let se_charge2b      = sed~"se_power0.wav";   //Longer, warblier "gather" charge
let se_charge3b      = sed~"charge3-2.wav";   //Longer "round" charge
//Aliases
let se_charge_pulse  = sed~"charge.wav";
let se_charge_gather = sed~"charge2.wav";
let se_charge_round  = sed~"charge3.wav";



//////////////////////////////////////////////////////////////////////
// Lasers
//////////////////////////////////////////////////////////////////////

let se_laser  = sed~"se_lazer00.wav";   //tEEEEEEEEEEEww
let se_laser1 = sed~"laser1.wav";       //sounds a bit like a Seal
let se_laser2 = sed~"laser2.wav";       //like se_laser but a bit flatter, maybe? might be the same

//////////////////////////////////////////////////////////////////////
// Other "shot" stuff
//////////////////////////////////////////////////////////////////////

let se_slash    = sed~"se_slash.wav";

let se_seal     = sed~"se_gun00.wav"; //Fantasy Seal
let se_spark    = sed~"spark.wav";    //Master Spark

let se_swrlaser = sed~"swrlaser.wav";
let se_swrbeam  = sed~"swrbeam.wav";

let se_split    = sed~"split.wav";
let se_exshot   = sed~"exattack.wav"; //sounds like kira02 sorta?



//////////////////////////////////////////////////////////////////////
// Effects
//////////////////////////////////////////////////////////////////////
let se_explode   = sed~"explode.wav";    //Okuu "crash" explosion

let se_horn      = sed~"se_horn.wav"; 
let se_hornshort = sed~"se_hornshort.wav";

let se_splash     = sed~"se_water.wav";
let se_anchor     = sed~"se_anchor.wav";


let se_caution    = sed~"caution.wav";

let se_bonus      = sed~"capture.wav"; //Spellcard bonus
let se_bonus1     = sed~"bonus1.wav";  //Spawn piece - lower pitch
let se_bonus2     = sed~"bonus2.wav";  //Spawn piece - higher pitch



let se_fam        = sed~"se_option.wav";
let se_fam2       = sed~"se_option_short.wav";
let se_paf        = sed~"se_enep00.wav";   //normal enemy explode paf

let se_warp       = sed~"se_warp_n.wav"; //SA ReimuA screen warp
let se_warp_l     = sed~"se_warp_l.wav"; //left
let se_warp_r     = sed~"se_warp_r.wav"; //right

let se_gap        = sed~"gap.wav";       //Open gap
let se_gap2       = sed~"gap2.wav";      //more... dramatic gap open???
let se_gapshot    = sed~"gapshot.wav";   //swoosh

let se_ice        = sed~"ice.wav";

let se_vanish     = sed~"vanish.wav"; //Koishi vanish




let se_train      = sed~"train1.wav";
let se_tracks     = sed~"train2.wav";

let se_timestop   = sed~"timestop.wav";





//////////////////////////////////////////////////////////////////////
// Others
//////////////////////////////////////////////////////////////////////
let se_nyaa         = sed~"orin.wav";
let se_awoo         = sed~"wolf.wav";
let se_laugh        = sed~"se_laugh.wav";
let se_warnbeep     = sed~"timecount.wav";	//beep
let se_warncritical = sed~"se_life1.wav";	//"last life" warning beeps

//////////////////////////////////////////////////////////////////////
// ???
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
// Troll
//////////////////////////////////////////////////////////////////////
let se_theworld   = sed~"TrollSounds/za warudo.wav";

//////////////////////////////////////////////////////////////////////
// Highly irregular
//////////////////////////////////////////////////////////////////////
let se_smite = sed~"smite.wav";
let se_thunder = sed~"thunder.wav";
let se_glint = sed~"glint.wav";
let se_shift = sed~"se_shift.wav";
let se_sukima = sed~"se_sukima.wav"; //gap open? then some weird noise?
let se_bubble     = sed~"bubble.wav";
let se_timestall  = sed~"timestopshrink.wav";
let se_timeunstall= sed~"timereversegrow.wav";

//////////////////////////////////////////////////////////////////////








//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// System
//////////////////////////////////////////////////////////////////////
let se_spellcard    = sed~"spellcard.wav"; 
let se_spellbreak   = sed~"spellbreak.wav";
let se_defeated     = sed~"defeated.wav";  

let se_extend       = sed~"extend.wav";
let se_item         = sed~"item.wav";
let se_item2        = sed~"item2.wav";

let se_pause        = sed~"Touhou Pause.wav";
let se_select       = sed~"select.wav";
let se_confirm      = sed~"selectok.wav";
let se_cancel       = sed~"selectcancel.wav";
let se_invalid      = sed~"selectinvalid.wav";

let se_time1        = sed~"se_timeout1.wav";
let se_time2        = sed~"se_timeout2.wav";
let se_graze        = sed~"graze.wav";

let se_damage1      = sed~"se_damage00.wav";
let se_damage2      = sed~"se_damage01.wav";
let se_nodamage     = sed~"se_nodamage.wav";

let se_plshot       = sed~"playershot.wav";
let se_pichuun      = sed~"se_pitchuun.wav";


//////////////////////////////////////////////////////////////////////
//Aliases (outdated, do not use)
//////////////////////////////////////////////////////////////////////
let explode=se_explode;
let horn=se_horn;
let paf=se_paf;
let spellcard=se_spellcard;
let spellbreak=se_spellbreak;
let defeated=se_defeated;
let nyaa=se_nyaa;
let awoo=se_awoo;
//////////////////////////////////////////////////////////////////////





// function SE_Play(let path, let vl){
	// vl*=GetAreaCommonData("CONFIG","SE Volume",0.80);
	// let seobj = ObjSound_Create;
	// ObjSound_Load(seobj,path);
	// ObjSound_Play(seobj);
	// ObjSound_SetVolumeRate(seobj,vl);
	// Manage; return seobj;
	// task Manage{
		// loop(120){yield;}
		// // RemoveSound(path);
		// Obj_Delete(seobj);
	// }
// }



// function SE_Play(let path, let vl){
	// vl*=GetAreaCommonData("CONFIG","SE Volume",0.80);
	// let seobj = ObjSound_Create;
	// ObjSound_Load(seobj,path);
	// ObjSound_Play(seobj);
	// ObjSound_SetVolumeRate(seobj,vl);
	// Manage; return seobj;
	// task Manage{
		// // let name = path[length(path)-9..length(path)-4];
		// let dirs = SplitString(path,"/"); let name = dirs[length(dirs)-1];
		// SetCommonData("SM_"~name,seobj);
		
		// // loop(270){yield;} //180    //120
		// loop(120){yield;}
		
		// //If the sound has been played again since starting this task,
		// //leave it loaded. Then the last one to use it unloads it.
		// //This seems to help prevent sounds from being "cut off".
		// if(GetCommonData("SM_"~name,NULL)==seobj){
			// while(ObjSound_IsPlaying(seobj)){yield;} //Moving this into the if seems to cause problems?
			// // RemoveSound(path);
		// }
		// Obj_Delete(seobj);
	// }
// }



//Maintains one ObjSound for each path, playing the sound on the same object each time
//As such, there is no potential for excessive objects to be created
//and objects do not need to be actively deleted.
//TODO: Ensure that sound objects are created by system script and thus exempt from autodeletion.
function SE_Play(let path, let vl){
	let dirs = SplitString(path,"/"); let name = dirs[length(dirs)-1];
	// let seobj = GetCommonData("SM_"~name,ObjSound_Create);
	let seobj = GetCommonData("SM_"~name,NULL);
	if(seobj==NULL){
		if(GetOwnScriptID == GetScriptID(SCRIPT_SYSTEM)){ seobj = ObjSound_Create; }
		else{ Notify(SCRIPT_SYSTEM,EV_PLAY_SOUND,[path,rtoa(vl)]); return ID_INVALID; }
	}
	SetCommonData("SM_"~name,seobj);
	ObjSound_Load(seobj,path);
	ObjSound_SetVolumeRate(seobj,vl*GetAreaCommonData("CONFIG","SE Volume",0.80) );
	// ObjSound_SetPanRate(seobj,0);
	ObjSound_Play(seobj);
	return seobj;
}




//specify se obj and duration
task SE_PlayA2(let path, let vl, let seobj, dur) {
	vl*=GetAreaCommonData("CONFIG","SE Volume",0.80);
	ObjSound_Load(seobj,path);
	ObjSound_Play(seobj);
	ObjSound_SetVolumeRate(seobj,vl);
	loop(dur){yield;}
	MaybeRemoveSound(path);
}


task SE_Play_Del(let path, let vl, let del) {
	loop(del){yield;}
	SE_Play(path,vl);
}


function ObjSound_PlaySE(obj,path){
	// let vl=GetAreaCommonData("CONFIG","SE Volume",0.80);
	ObjSound_Load(obj,path);
	ObjSound_Play(obj);
}





function MaybeRemoveSound(path){
	alternative(path)
	case(
		se_shot,
		se_shot1,
		se_shot2,
		se_shot3,
		se_shot4,
		se_shot5,
		se_shot6,
		se_shot7,
		se_shot8,
		se_chime,
		se_chime2,
		se_kira01,
		se_kira02,
		se_fam,
		se_fam2,
		se_paf,
		se_item
	){return false;}
	others{
		RemoveSound(path);
		return true;
	}
}