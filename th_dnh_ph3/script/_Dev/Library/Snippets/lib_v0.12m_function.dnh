//==============================================================================
//	★ 東方弾幕風ph3 v0.12m互換関数置換ライブラリ
//------------------------------------------------------------------------------
//	v0.12mで書かれたスクリプトの関数をph3の関数に置き換えるライブラリです
//	このファイルを#includeで取り込むか、必要な部分をコピペして使用してください
//	同名で使用できる関数は入れてません。
//	今の所、[東方弾幕風ph3 .0 pre10]まで対応してます。Writed by ごれ
//==============================================================================
#include "./lib_v0.12m_Effect.dnh"

function SetViewTo(x,y,z){
SetCameraFocusX(x);
SetCameraFocusY(y);
SetCameraFocusZ(z);
}
function SetViewFrom(r,a,e){
SetCameraRadius(r);
SetCameraAzimuthAngle(a);
SetCameraElevationAngle(e);
}

function SetPerspectiveClip(a,b){
SetCameraPerspectiveClip(a,b);
}
function WriteZBuffer(id,flag){
ObjRender_SetZWrite(id,flag);
}
function UseZBuffer(id,flag){
ObjRender_SetZTest(id,flag);
}
function SetFog(sta,end,r,g,b){
SetFogParam(sta,end,r,g,b);
}
//------------------------------------------------------------------------------
//　　システム数値取得
//------------------------------------------------------------------------------
function GetCenterX{
	return (GetStgFrameWidth/2);
}
function GetCenterY{
	return (GetStgFrameHeight/2);
}
function GetClipMinX{
	return (GetStgFrameLeft*0);
}
function GetClipMaxX{
	return (GetStgFrameWidth);
}
function GetClipMinY{
	return (GetStgFrameTop*0);
}
function GetClipMaxY{
	return (GetStgFrameHeight);
}

function SpellBorderline
{
	return (GetSpellStock() < Bomb_Border[GetGameMode]);
}
function LifeBorderline
{
	return (GetPlayerLife() < Player_Border[GetGameMode]);
}

//チャプターグレイズ加算
function AddGrazet(Value){
	AddCommonData("ChapterGraze",Value);
	AddCommonData("TotalGraze",Value);
}

function GetFps{
return GetCurrentFps;
}
function GetTime{
return GetStageTime;
}

//------------------------------------------------------------------------------
//　　ステージ側プレイヤー情報取得関係
//------------------------------------------------------------------------------
let obj_Player;


function SetPlayerX(PlayerX){
ObjMove_SetX(obj_Player,PlayerX);
}
function SetPlayerY(PlayerY){
ObjMove_SetY(obj_Player,PlayerY);
}

function ForbidShot(flag){
SetForbidPlayerShot(flag);
}
function ForbidBomb(flag){
SetForbidPlayerSpell(flag);
}
//低速移動禁止
function IsSlowMoveForbid{
	return GetCommonData("ForbidSlowMove",false);
}
//GetPlayerLifeは同名で存在してます

function GetPlayerBomb{
return GetPlayerSpell;
}
function SetPlayerInvincibility(f){
SetPlayerInvincibilityFrame(f);
}
function ExtendPlayer(value){
SetPlayerLife(GetPlayerLife+value);
SetCommonData("ExtendCount",GetCommonData("ExtendCount",0)+value);
}
function AddBomb(value){
SetPlayerSpell(GetPlayerBomb+value);
}
let MOVE_SLOW = 1;
let MOVE_NORMAL = 0;
function GetPlayerMoveState{
if(GetVirtualKeyState(VK_SLOWMOVE)==KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE)==KEY_HOLD){
	if(IsSlowMoveForbid==false){
		return MOVE_SLOW;
	}else{
		return MOVE_NORMAL;
	}
}else{
	return MOVE_NORMAL;
}
}
function IsSlowPl{
return (GetPlayerMoveState==MOVE_SLOW);
}
function OnBorderOfLife{
return IsPlayerLastSpellWait;
}
function OnBomb{
return IsPlayerSpellActive;
}
function OnPlayerMissed{
let flag = false;
if(GetPlayerState == STATE_DOWN){
flag = true;
}
return flag;
}
function OnMissed{
return OnPlayerMissed;
}
function OnEvent{
let f = false;
if(IsPermitPlayerShot!=true){
f = true;
}
return f;
}
function GetHitCount{
return ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_SHOT_HIT_COUNT);
}
function GetMissCount{
return ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_PLAYER_SHOOTDOWN_COUNT);
}
function GetBombCount{
return ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_PLAYER_SPELL_COUNT);
}
function SetBossTimer(v){
return SetCommonData("INFO_TIMER",v*60);
}
function GetBossTimer{
return truncate(GetCommonData("INFO_TIMER",1)/60);
}
function GetBossFTimer{
return GetCommonData("INFO_TIMER",1);
}
function AddBossTimer(v){
SetCommonData("INFO_TIMER",max(GetBossFTimer+v,-1));
}
function GetSpellBonus{
return GetCommonData("SPBonus",0);
}
function GetSpellBonusRate{
return GetCommonData("NowBonusRate",0);
}
function AddSpellBonus(f){
SetCommonData("SPBonus",max(GetSpellBonus+f*GetSpellBonusRate,-1));
}

task AddBonus(bonus)
{
	AddScore(bonus);
}
function GetTimeOfPlayerInvincibility{
return GetPlayerInvincibilityFrame;
}

function LoadUserShotData(path){
LoadEnemyShotData(path);
}



function IsTimeOut{
return GetCommonData("IsTimeOutCheck",false);
}

let DebugKeyFlag =false;

//現在コンテニューできる回数を返す
function GetAllowedContinueCount{
return GetCommonData("AllowedCreditCount",1);
}
function SetAllowedContinueCount(cont){
SetCommonData("AllowedCreditCount",cont);//Credit設定
}
function GetMaxContinueCount{
return GetCommonData("MaxCreditCount",0);
}
function SetMaxContinueCount(cont){
SetCommonData("MaxCreditCount",cont);//Credit設定
}
//コンテニュー
function Continued{
	return GetCommonData("CONTINUE_Flag",false);
}

//コンテニュー回数初期値を設定する
function ExpertEx(flag,cont,life){
DebugKeyFlag = flag;
SetAllowedContinueCount(cont);//Credit設定
SetPlayerLife(life);
}

//本当は配列で返ってきますが、配列長を返すことで代用
function GetEnemyNum{
let id = 0;
let LK = length(GetAllEnemyID);
if(LK!=0){
id = GetAllEnemyID[LK-1];
}
return id;
}
//敵がいなくなるまで待機（UFOは除外）
function WaitForZeroEnemy
{
	loop
	{
		let emn = length(GetAllEnemyID);
		if (emn == 0) { break; }
		yield;
	}
}
function WaitForZeroFairy_Timer(Time)
{	let i = 0;
	loop
	{
		let emn = length(GetAllEnemyID);
		if (emn == 0||i>=Time) { break; }
		i++;yield;
	}
}
//最後に作ったボスのIDを取得
function GetBossID{
let id = 0;
let LK = length(GetEnemyBossObjectID);
if(LK!=0){
id = GetEnemyBossObjectID[LK-1];
}
return id;
}
//最初に作ったボスのIDを取得
function GetBossID_f{
let id = 0;
let LK = length(GetEnemyBossObjectID);
if(LK!=0){
id = GetEnemyBossObjectID[0];
}
return id;
}
function IsBossExisting{
if(length(GetEnemyBossObjectID)>0){
return true;
}else{
return false;
}
}
//------------------------------------------------------------------------------
//　　敵関係
//------------------------------------------------------------------------------
let objEnemy = ID_INVALID;
let objEnemy2 = ID_INVALID;

//自機方向角度

function GetAngleToPlayerE
{
	return (atan2(GetPlayerY-ObjRender_GetY(objEnemy), GetPlayerX-ObjRender_GetX(objEnemy)));
}
function GetEnemyX{
return ObjMove_GetX(GetBossID_f);
}
function GetEnemyY{
return ObjMove_GetY(GetBossID_f);
}
function SetDamageRate(a,b){
ObjEnemy_SetDamageRate(objEnemy,a,b);
if(objEnemy2!=ID_INVALID){ObjEnemy_SetDamageRate(objEnemy2,a,b);}
}
function Obj_SetDamageRate(obj,a,b){
ObjEnemy_SetDamageRate(obj,a,b);
}
function GetLife{
return ObjEnemy_GetInfo(objEnemy,INFO_LIFE);
}
function GetDamageRate_Shot{
return ObjEnemy_GetInfo(objEnemy,INFO_DAMAGE_RATE_SHOT);
}
function GetDamageRate_Shot2{
return ObjEnemy_GetInfo(objEnemy2,INFO_DAMAGE_RATE_SHOT);
}
function GetDamageRate_Bomb{
return ObjEnemy_GetInfo(objEnemy,INFO_DAMAGE_RATE_SPELL);
}
function GetDamageRate_Bomb2{
return ObjEnemy_GetInfo(objEnemy2,INFO_DAMAGE_RATE_SPELL);
}
function SetLife(v){ObjEnemy_SetLife(objEnemy,v);}
function AddLife(v){ObjEnemy_AddLife(objEnemy,v);}
function GetEnemyLife{
return ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_ACTIVE_STEP_TOTAL_LIFE);
}
function GetEnemyMaxLife{
return ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID,INFO_ACTIVE_STEP_TOTAL_MAX_LIFE);
}
task Slow(late){
StartSlow(TARGET_ALL,60*late);
SetCommonData("SlowFlag",true);
//loop(60){yield;}
SetCommonData("fpslate",late);
}
task SlowCancel{
StopSlow(TARGET_ALL);
SetCommonData("SlowFlag",false);
loop(60){yield;}
SetCommonData("fpslate",1);
}
function Collision_Obj_To_Obj(obj1,obj2,dis){
	let xA = ObjMove_GetX(obj1);let yA = ObjMove_GetY(obj1);
	let xB = ObjMove_GetX(obj2);let yB = ObjMove_GetY(obj2);
	return (GetLengthToinGeme(xA,yA,xB,yB)<=dis);
}

function GetEnemyShotCount{
return GetShotCount(TARGET_ENEMY);
}
function GetEnemyShotCountEx(x,y,r,Type){
return length(GetShotIdInCircleA2(x,y,r,Type));
}
//------------------------------------------------------------------------------
//　　敵移動係
//------------------------------------------------------------------------------


function SetX(value){
ObjMove_SetX(objEnemy,value);
}
function SetY(value){
ObjMove_SetY(objEnemy,value);
}
//ショット用
function OBJECT_MOVE2(ID,set_x,set_y,speed,angle){
ObjMove_SetPosition(ID,round((set_x+speed*cos(angle))*10)/10,round((set_y+speed*sin(angle))*10)/10);
}
function SetSpeed(value){
ObjMove_SetSpeed(objEnemy,value);
}
function SetAngle(value){
ObjMove_SetAngle(objEnemy,value);
}
function SetMovePosition01(x,y,s)
{
	ObjMove_SetDestAtSpeed(objEnemy,x,y,s);
}
function SetMovePosition02(x,y,f)
{
	ObjMove_SetDestAtFrame(objEnemy,x,y,f);
}
function Obj_SetMovePosition02(obj,x,y,f)
{
	ObjMove_SetDestAtFrame(obj,x,y,f);
}
function SetMovePosition03(x,y,g,ms)
{
	ObjMove_SetDestAtWeight(objEnemy,x,y,g,ms);
}
task SetMovePositionHermite(EndX,EndY,Size1,Angle1,Size2,Angle2,frame)
{
	SetMovePositionHermite2(objEnemy,EndX,EndY,Size1,Angle1,Size2,Angle2,frame)
}
task SetMovePositionHermite2(obj,EndX,EndY,Size1,Angle1,Size2,Angle2,frame)
{
	let StartX=ObjMove_GetX(obj);
	let StartY=ObjMove_GetY(obj);
	let x=[0,0,0,0];
	let y=[0,0,0,0];
	let k = 0;
	let count=0;
	ascent( count in 0..frame)
	{
		k=count/frame;
		x[0]=2*StartX+Size1*cos(Angle1)-2*EndX+Size2*cos(Angle2);
		x[1]=-3*StartX-2*Size1*cos(Angle1)+3*EndX-Size2*cos(Angle2);
		x[2]=Size1*cos(Angle1);
		x[3]=StartX;
		ObjMove_SetX(obj,x[0]*k^3+x[1]*k^2+x[2]*k+x[3]);

		y[0]=2*StartY+Size1*sin(Angle1)-2*EndY+Size2*sin(Angle2);
		y[1]=-3*StartY-2*Size1*sin(Angle1)+3*EndY-Size2*sin(Angle2);
		y[2]=Size1*sin(Angle1);
		y[3]=StartY;
		ObjMove_SetY(obj,y[0]*(k^3)+y[1]*(k^2)+y[2]*k+y[3]);
		ObjMove_SetAngle(obj,Angle1/2+Angle2/2);
		yield;
    	}
}

function ObjShot_GetCollisionR(obj){
	return GetShotDataInfoA1(ObjShot_GetImageID(obj),TARGET_ENEMY,INFO_COLLISION);
}


//ObjShot_SetDelayは同名で存在します。

function Obj_SetAutoDelete(id,flag){
ObjShot_SetAutoDelete(id,flag);
}
function ObjShot_SetBombResist(id,flag){
ObjShot_SetSpellResist(id,flag);
}
function Bomb_R(id){
ObjShot_SetBombResist(id,true);
return id;
}
function Bomb_ER(id,n){
ObjShot_SetBombResist(id,false);
Obj_SetValue(id,"ShotEraseResist",n);
return id;
}

//ObjLaser_SetLengthは同名で存在します。

function ObjLaser_SetWidth(id,width){
ObjLaser_SetRenderWidth(id,width);
}
function ObjLaser_SetSource(id,flag){
ObjStLaser_SetSource(id,flag);
}
function ObjSinuateLaser_SetLength(id,width){
ObjLaser_SetLength(id,width);
}
function ObjSinuateLaser_SetWidth(id,flag){
ObjLaser_SetRenderWidth(id,flag);
}

function ObjLaser_GetEndX(id){
return (ObjMove_GetX(id)+ObjLaser_GetLength(id)* cos (ObjStLaser_GetAngle(id)) );
}
function ObjLaser_GetEndY(id){
return (ObjMove_GetY(id)+ObjLaser_GetLength(id)* sin (ObjStLaser_GetAngle(id)) );
}
function Obj_SetCollisionToPlayer(id,delay){
if(delay==false){ObjShot_SetIntersectionCircleA1(id,0);}
}

function Obj_SetAngle(id,value){
ObjMove_SetAngle(id,value);
}
function Obj_SetSpeed(id,value){
ObjMove_SetSpeed(id,value);
}
function Obj_GetSpeed(id){
return ObjMove_GetSpeed(id);
}
function Obj_GetAngle(id){
return ObjMove_GetAngle(id);
}
//弾のイメージカラーを返す関数
function OBJ_GET_DELAYCOLOR(ID)
{
	return GetShotDataInfoA1(ID,TARGET_ENEMY,INFO_DELAY_COLOR);
}
function SetShotDrawScale(obj){
//let s = GetCommonData("BulletScale",BllHD);
ObjRender_SetScaleXYZ(obj, BllHD, BllHD, 1);
}
//--------------
//SetShotData系
//--------------

//0F目の設定です。ここで作った弾タスクのIDを返します。
function CreateShotA(id,x,y,delay){
let obj = CreateShotA1(x,y,0,0,1,0);
SetShotDrawScale(obj);
return (obj);
}
//SetShotData系関数のidにはCreateShotAの数値を入れてください
task SetShotDataA(id,f,speed,angle,dir,addspeed,maxspeed,type){
ObjMove_AddPatternA3(id,f,speed,angle,addspeed,dir,maxspeed,type);
}
function SetShotDataA_XY(id,f,xs,ys,addxs,addys,maxxs,maxys,type){
//if(type!=ObjShot_GetImageID(id)){ShotDelayEffect(id,20);}
ObjMove_AddPatternB3(id,f,xs,ys,addxs,addys,maxxs,maxys,type);
//loop(f){yield;}
//ObjShot_SetGraphic(id,type);
}
//dirの距離は追加先の大半がレーザーではないんで無視
function AddShot(f,add_id,id,dir){
ObjShot_AddShotA1(id,add_id,f);
}
function CreateLaser01(x,y,speed,angle,l_length,l_width,type,delay){
let obj = CreateLooseLaserA1(x,y,speed,angle,l_length,l_width,type,delay);
ObjLaser_SetGrazeInvalidFrame(obj,15);
ObjCrLaser_SetTipDecrement(obj,0);
CreateLaserSauce(x,y,angle,type,delay);
Bomb_ER(obj,242);
return obj;
}
function th12CurveLaser(x,y,speed,angle,l_length,l_width,type,delay){
let obj = CreateCurveLaserA1(x,y,speed,angle,l_length,l_width,type,delay);
CreateLaserSauce(x,y,angle,type,delay);
ObjLaser_SetGrazeInvalidFrame(obj,15);
ObjCrLaser_SetTipDecrement(obj,0);
Bomb_ER(obj,242);
return obj;
}
function CreateLaser01a(x,y,speed,angle,l_length,l_width,type,delay,Flag){
let obj = CreateLooseLaserA1(x,y,speed,angle,l_length,l_width,type,delay);
ObjShot_SetSpellResist(obj,Flag);
ObjLaser_SetGrazeInvalidFrame(obj,15);
ObjCrLaser_SetTipDecrement(obj,0);
return obj;
}
function FireShot(id){
	ObjShot_Regist(id);
}
//--------------
//弾消し系
//--------------

let ALL = TYPE_ALL;//全敵弾
let SHOT = TYPE_SHOT;//スペル耐性のない弾全て
let CHILD = TYPE_CHILD;//子になる弾全て(未実装)
function DeleteEnemyShot(type){
DeleteShotAll(type,TYPE_IMMEDIATE);
}
function DeleteEnemyShotInCircle(type,x,y,r){
DeleteShotInCircle(type,TYPE_FADE,x,y,r);
}
function DeleteEnemyShotImmediatelyInCircle(type,x,y,r){
DeleteShotInCircle(type,TYPE_IMMEDIATE,x,y,r);
}
function DeleteEnemyShotToItem(type){
DeleteShotAll(type,TYPE_ITEM);
}
function DeleteEnemyShotToItemInCircle(type,x,y,r){
DeleteShotInCircle(type,TYPE_ITEM,x,y,r);
}

	
	//==============================================================================
	//　オブジェクト弾
	//------------------------------------------------------------------------------
	//オブジェクト吹き飛び対策用
	function ObjMove_ShotPosition(obj,x,y,a,s){
		ObjMove_ShotPosition_old(obj,s);
	}
	function ObjPosition(obj,x,y){
		ObjMove_SetPosition(obj,x,y);
		ObjRender_SetPosition(obj,x,y,0);
		
		ObjMove_SetX(obj,x);
		ObjRender_SetX(obj,x);
		ObjMove_SetY(obj,y);
		ObjRender_SetY(obj,y);
		
		ObjMove_SetSpeed(obj,0);
		ObjMove_SetMaxSpeed(obj,0);
		ObjMove_SetAcceleration(obj,0);
	}
	function ObjMove_ShotPosition_old(obj,s){
		if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
		let x = ObjMove_GetX(obj)+cos(ObjMove_GetAngle(obj))*s*GetCommonData("SHOTRate",1);
		let y = ObjMove_GetY(obj)+sin(ObjMove_GetAngle(obj))*s*GetCommonData("SHOTRate",1);
		ObjPosition(obj,x,y);
	}
	function ObjMove_ShotPosition_old2(obj,a,s){
		if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
		let x = ObjMove_GetX(obj)+cos(a)*s*GetCommonData("SHOTRate",1);
		let y = ObjMove_GetY(obj)+sin(a)*s*GetCommonData("SHOTRate",1);
		ObjPosition(obj,round(x),round(y));
	}
	//弾幕制御タスク キャラオーバー時の吹き飛び防止
	task ObjShot_MoveTask0(obj,id,x,y)
	{
		if(id>64){return;}
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let a = ObjMove_GetAngle(obj);
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			ObjPosition(obj,x,y);
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			
		}
	}
	task ObjShot_MoveTask_old(obj,id,x,y)
	{
		if(id>64){return;}
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let a = ObjMove_GetAngle(obj);
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			ObjPosition(obj,x,y);
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			
		}
	}
	
	task ObjShot_MoveTask_old1(obj,id,x,y)
	{
		if(id>64){return;}
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj)*GetCommonData("SHOTRate",1);
			let a = ObjMove_GetAngle(obj);
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{x+=X;y+=Y;}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			
		}
	}
	task ObjShot_MoveTask_old2(obj,id,x,y,a,s)
	{
		if(id>64){return;}
		if(!Obj_IsDeleted(obj))
		{
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s*GetCommonData("SHOTRate",1);
			let Y = sin(a)*s*GetCommonData("SHOTRate",1);
			ObjPosition(obj,x,y);
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{x+=X;y+=Y;}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
		
		}
	}
	task ObjShot_MoveTask_old3s(obj,x,y,ac)
	{
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let a = ObjMove_GetAngle(obj);
		
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
					a+=ac*GetCommonData("SHOTRate",1);
					ObjMove_SetAngle(obj,a);
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
		
		}
	}
	task ObjShot_MoveTask_old3(obj,id,x,y,ac)
	{
		if(id>64){
			ObjMove_SetAngularVelocity(obj,ac*GetCommonData("SHOTRate",1));
			return;
		}
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let a = ObjMove_GetAngle(obj);
		
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
					a+=ac*GetCommonData("SHOTRate",1);
					ObjMove_SetAngle(obj,a);
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
		
		}
	}
	task ObjShot_MoveTask_old32(obj,x,y,ac,at)
	{
		
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let a = ObjMove_GetAngle(obj);
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let X = cos(a)*s;let Y = sin(a)*s;
			loop(at)
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
					a+=ac*GetCommonData("SHOTRate",1);
					ObjMove_SetAngle(obj,a);
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
					a+=ac*GetCommonData("SHOTRate",1)/8;
					ObjMove_SetAngle(obj,a);
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			
		}
	}
	function ObjShot_MoveTask(obj,id,x,y)
	{
		if(!Obj_IsDeleted(obj))
		{
			ObjShot_MoveTask_old(obj,id,x,y);
			
		}
		return obj;
	}
	task ObjShot_MoveTask_2(obj,id,x,y,ac,acmax)
	{
		if(id>64){
			ObjMove_SetMaxSpeed(obj,acmax);
			ObjMove_SetAcceleration(obj,ac);
			return;
		}
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let Ds = s;
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let a = ObjMove_GetAngle(obj);
			
			ObjPosition(obj,round(x),round(y));
			let X = cos(a)*s;let Y = sin(a)*s;
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					if(Ds>=acmax&&ac<0){//初速からの減速パターン
						s = max(s+ac*GetCommonData("SHOTRate",1),acmax)*GetCommonData("SHOTRate",1);
					}else{
						s = min(s+ac*GetCommonData("SHOTRate",1),acmax)*GetCommonData("SHOTRate",1);
					}
					X = cos(a)*s;Y = sin(a)*s;
					x+=X;y+=Y;
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
			
		}
	}
	
	
	task ObjShot_MoveTask_4(obj,x,y,ac,acmax,frame)
	{
		if(!Obj_IsDeleted(obj))
		{
			let s = ObjMove_GetSpeed(obj);
			let Ds = s;
			ObjMove_SetSpeed(obj,0);
			ObjMove_SetMaxSpeed(obj,0);
			ObjMove_SetAcceleration(obj,0);
			let a = ObjMove_GetAngle(obj);
			
			ObjPosition(obj,round(x),round(y));
			let X = cos(a)*s;let Y = sin(a)*s;
			let roll = 360/frame*10;
			descent( i in 0..frame)
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					if(Ds>=acmax&&ac<0){//初速からの減速パターン
						s = max(s+ac,acmax)*i/frame;
					}else{
						s = min(s+ac,acmax)*i/frame;
					}
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
				}
				ObjPosition(obj,round(x),round(y));
				ObjMove_SetAngle(obj,a+roll*i);
				if(Obj_IsDeleted(obj)){break;}
				yield;
			}
			a = atan2(GetPlayerY-y, GetPlayerX-x);
			ObjMove_SetAngle(obj,a);
			while(!Obj_IsDeleted(obj))
			{
				if(Obj_GetValueD(obj,"EraseItemCount",1)==2){s=0;}
				else{
					if(Ds>=acmax&&ac<0){//初速からの減速パターン
						s = max(s+ac,acmax*2);
					}else{
						s = min(s+ac,acmax*2);
					}
					X = cos(a)*s;Y = sin(a)*s;
					x+=X*GetCommonData("SHOTRate",1);y+=Y*GetCommonData("SHOTRate",1);
				}
				ObjPosition(obj,round(x),round(y));
				yield;
			}
		
		}
	}
	//纏め打ち用(ポンデリング用)
	task ObjShot_Move_list(objlist,ang,sp)
	{
		if(length(objlist)>0)//配列長が0じゃなかったら
		{
			ObjShot_Move_list_(objlist,ang,sp);
		}
	}
	
	task ObjShot_Move_list_(objlist,ang,sp)
	{
			let objCount = length(objlist);
			let frame = 0;
			while(objCount>0)
			{
				ascent(i in 0..length(objlist))
				{
					if(Obj_IsDeleted(objlist[i])==false){
						ObjPosition(objlist[i],round(ObjMove_GetX(objlist[i])+cos(ang)*sp),round(ObjMove_GetY(objlist[i])+sin(ang)*sp));
					}else{
						objCount = max(0,objCount-1);
					}
				}
				frame++;
				yield;
			}
	}





//==============================================================================
//　簡易弾
//------------------------------------------------------------------------------
task CreateLaserSauce(x,y,angle,ID,delay)
{
	let ShotDatalist_D = GetShotDataInfoA1(ID,TARGET_ENEMY,INFO_DELAY_COLOR);
	let id = ShotDatalist_D[0]-240;//	色番号(240+ 0〜15)
	let type = SHOT_EFF_COLOR16[id];//弾ID2
	let obj = CreateShotA1(round(x),round(y),0,angle,type,0);
	ObjShot_SetIntersectionEnable(obj, false);
	Obj_SetValue(obj,"DelayGraze",true);//弾源グレイズフラグ
	ObjRender_SetScaleXYZ(obj, 1.5, 1.5, 1);
	Bomb_R(obj);
	Obj_Add(obj);
	ObjPosition(obj,x,y);
	let t = 0;
	let v = sqrt(2);
	loop(15)
	{
		t+=255/15;
		ObjRender_SetColor(obj,t,t,t);
		ObjMove_SetAngle(obj,angle*2);
		ObjRender_SetScaleXYZ(obj, t/215*v, t/215*v, 1);
		angle+=6;
		ObjPosition(obj,x,y);
		if(Obj_IsDeleted(obj)){break;}
		yield;
	}
	loop(delay-30)
	{
		ObjRender_SetColor(obj,t,t,t);
		ObjMove_SetAngle(obj,angle*2);
		ObjRender_SetScaleXYZ(obj, t/215*v, t/215*v, 1);
		angle+=6;
		ObjPosition(obj,x,y);
		if(Obj_IsDeleted(obj)){break;}
		yield;
	}
	loop(15)
	{
		t-=255/15;
		ObjRender_SetColor(obj,t,t,t);
		ObjMove_SetAngle(obj,angle*2);
		ObjRender_SetScaleXYZ(obj, t/215*v, t/215*v, 1);
		angle+=6;
		ObjPosition(obj,x,y);
		if(Obj_IsDeleted(obj)){break;}
		yield;
	}
	Obj_Delete(obj);
}
function CreateShot001(x,y,speed,angle,type,delay){
	delay = max(delay,10);
	let obj = CreateShotA1(round(x),round(y),speed*GetCommonData("SHOTRate",1),angle,type,delay);
	return obj;
}
function CreateShot01(x,y,speed,angle,type,delay){
	delay = max(delay,10);
	let obj = CreateShotA1(round(x),round(y),speed*GetCommonData("SHOTRate",1),angle,type,delay);
	ShotDelayEffect_s(obj,type,delay);
	ObjShot_MoveTask_old(obj,type,round(x),round(y));
	return obj;
}

function CreateShot1(x,y,speed,angle,type,delay){
	delay = max(delay,10);
	let obj = CreateShotA1(round(x),round(y),speed*GetCommonData("SHOTRate",1),angle,type,delay);
	ShotDelayEffect2(obj,type,delay);
	ObjShot_MoveTask_old(obj,type,round(x),round(y));
	return obj;
}

function CreateShot002(x,y,speed,angle,addspeed,maxspeed,type,delay){
delay = max(delay,10);
let obj = CreateShotA2(round(x),round(y),speed*GetCommonData("SHOTRate",1),angle,addspeed,maxspeed,type,delay);
return obj;
}
function CreateShot02(x,y,speed,angle,addspeed,maxspeed,type,delay){
	delay = max(delay,10);
	let obj = CreateShotA1(round(x),round(y),speed*GetCommonData("SHOTRate",1),angle,type,delay);
	ShotDelayEffect_s(obj,type,delay);
	ObjShot_MoveTask_2(obj,type,round(x),round(y),addspeed,maxspeed);
	return obj;
}
function CreateShot011(x,y,xspeed,yspeed,type,delay){
	delay = max(delay,10);
	let obj = CreateShotB1(round(x),round(y),xspeed*GetCommonData("SHOTRate",1),yspeed*GetCommonData("SHOTRate",1),type,delay);
	return obj;
}
function CreateShot11(x,y,xspeed,yspeed,type,delay){
	delay = max(delay,10);
	let obj = CreateShotB1(round(x),round(y),xspeed*GetCommonData("SHOTRate",1),yspeed*GetCommonData("SHOTRate",1),type,delay);
	ShotDelayEffect_s(obj,type,delay);
	return obj;
}
function CreateShot012(x,y,xspeed,yspeed,addx,addy,maxsx,maxsy,type,delay){
	delay = max(delay,10);
	let obj = CreateShotB2(round(x),round(y),xspeed,yspeed,addx,addy,maxsx,maxsy,type,delay);
	ShotDelayEffect_s(obj,type,delay);
	return obj;
}
function CreateShot12(x,y,xspeed,yspeed,addx,addy,maxsx,maxsy,type,delay){
	delay = max(delay,10);
	let obj = CreateShotB2(round(x),round(y),xspeed,yspeed,addx,addy,maxsx,maxsy,type,delay);
	ShotDelayEffect_s(obj,type,delay);
	return obj;
}

function ShotDelayEffect(objShot,delay){
	if(!Obj_IsDeleted(objShot)){
		let Blend = ObjRender_GetBlendType(objShot);
		delay = max(delay,10);
	//	ObjShot_SetDelay(objShot,delay);
		ObjShot_SetSourceBlendType(objShot,Blend);
	}
}
function ShotDelayEffect_s(objShot,id,delay)
{
	if(!Obj_IsDeleted(objShot)){
		let Blend_D = GetShotDataInfoA1(id,TARGET_ENEMY,INFO_BLEND);
		delay = max(delay,10);
	//	ObjShot_SetDelay(objShot,delay);	
		ObjShot_SetSourceBlendType(objShot,Blend_D);
	}
}
function ShotDelayEffect_s2(objShot,id,delay)
{
	if(!Obj_IsDeleted(objShot)){
		let Blend_D = GetShotDataInfoA1(id,TARGET_ENEMY,INFO_BLEND);
		delay = max(delay,10);
	//	ObjShot_SetDelay(objShot,delay);	
		ObjShot_SetSourceBlendType(objShot,Blend_D);
	}
}
function ShotDelayEffect2(objShot,id,delay){
	
	if(!Obj_IsDeleted(objShot)){
		let Blend = GetShotDataInfoA1(id,TARGET_ENEMY,INFO_BLEND);
		delay = max(delay,10);
		ObjShot_SetSourceBlendType(objShot,Blend);
	}
}

task ShotDelayEffect_AFTERIMG(objShot,id,delay){
	
	if(Obj_IsDeleted(objShot)){return;}
	ObjShot_SetDelay(objShot,0);
	let sx = ObjRender_GetScaleX(objShot);
	let SS = 1.5*sx;
	//弾の消滅耐性
	Obj_SetValue(objShot,"ShotEraseResist",trunc(6*SS));
	ObjShot_SetIntersectionEnable(objShot, false);

	ObjRender_SetAlpha(objShot,0);
	let scl = 2.5*sx;
	let scl2 = (scl-SS)/delay;
	
	ascent(i in 0..delay){
		scl -= scl2;
		ObjRender_SetScaleXYZ(objShot, scl, scl,scl);
		ObjRender_SetAlpha(objShot,i*255/delay);
		if(Obj_IsDeleted(objShot)){break;}
		yield;
	}
	if(Obj_IsDeleted(objShot)){return;}
	ObjShot_SetIntersectionEnable(objShot, true);
	ObjRender_SetScaleXYZ(objShot, sx, sx, 1);
	ObjRender_SetAlpha(objShot, 255);
}
//纏め打ち用(同じ弾種別じゃないと使えませんので注意)
function ShotDelayEffect_list(objlist,delay)
{
	if(length(objlist)>0)//配列長が0じゃなかったら
	{
		ShotDelayEffect_list_(objlist,delay);
	}
}


function ShotDelayEffect_list_(objlist,delay){
	delay = max(delay,10);
	let Blend = ObjRender_GetBlendType(objlist[0]);
	ascent(i in 0..length(objlist)) {
		//ObjShot_SetDelay(objlist[i],delay);
		ObjShot_SetSourceBlendType(objlist[i],Blend);
	}
}
function ShotDelayEffect_listd(objlist,type,delay)
{
	if(length(objlist)>0)//配列長が0じゃなかったら
	{
		ShotDelayEffect_listD(objlist,type,delay);
	}
}

function ShotDelayEffect_listD(objlist,type,delay){
	delay = max(delay,10);
	let Blend_D = GetShotDataInfoA1(type,TARGET_ENEMY,INFO_BLEND);
	ascent(i in 0..length(objlist)) {
	//	ObjShot_SetDelay(objlist[i],delay);
		ObjShot_SetSourceBlendType(objlist[i],Blend_D);
	}
}