// #include "./ExtendedDNF.txt"
#include "./TypeFunctions.txt"

let CSD = GetCurrentScriptDirectory;


let MinX=32;
let MaxX=380;
let MinY=0;
let MaxY=464;
let GetCenterX = GetStgFrameWidth/2;
let GetCenterY = GetStgFrameHeight/2;


let boss=NULL; let player = GetPlayerObjectID;
let frame=0;
let objScene = GetEnemyBossSceneObjectID();
let finishing = false; 

SetAutoDeleteObject(true); //default to true instead of false

Set2DCameraFocusX(GetStgFrameWidth/2); //Patch job for a weird issue
Set2DCameraFocusY(GetStgFrameHeight/2); //This was also slightly off


//Position variables - updated each frame
//sx,sy = stage width, stage height
//cx,cy = center x,y
//enemy x,y; player x,y
let sx = GetStgFrameWidth(); let sy = GetStgFrameHeight(); //(384, 448)
let cx = sx/2; let cy = sy/2;
let ex=0; let ey=0; let px=0; let py=0;

let ps=1.00; //Pattern speed



// function wait(w) { loop(w){ yield; } } 

//Andi - Interpolates extra frames with fractional part,
//allowing wait times to be easily/accurately adjusted to, e.g.,
//shoot a certain number of times in the same number of frames.
function waitr(w,counter){
	let q = trunc(w);
	let r = w-q;
	loop(q){yield;}
	if((r*counter)%1 < r){
		yield;
	}
}


let waitcounter = 0;
function wait(w){
	let cnt = waitcounter; waitcounter++;
	let q = trunc(w);
	let r = w-q;
	loop(q){yield;}
	if((r*cnt)%1 < r){ yield; }
}



// function Distance(x1, y1, x2, y2){return ((x1-x2)^2 + (y1-y2)^2)^0.5;}

function getangle(x0,y0,x1,y1){return atan2(y1-y0,x1-x0);}
function getdistance(x0,y0,x1,y1){return ((x0-x1)^2 + (y0-y1)^2)^0.5;}

function GetAngleTo(let object1, let object2) { return atan2(ObjMove_GetY(object2)-ObjMove_GetY(object1), ObjMove_GetX(object2)-ObjMove_GetX(object1));}



//check whether an object is safe to dereference
function isnull(obj){
	//do something		//if it hasn't been set
	if(!obj){return true;} //if it equals null
	if(Obj_IsDeleted(obj)){return true;} //if it's been deleted
	return false;
}


//Rand, alt, and sign functions
//Overkill
// function sign(n){ return floor(n/((|n|)+1)) - floor(-n/((|-n|)+1)); }
//Elegant, but undefined at 0
// function sign(n){ return n/(|n|); }
//Best of both worlds
function sgn(n){  let s = n/((|n|)+1); return floor(s)-floor(-s); }
function sign(n){ let s = n/((|n|)+1); return floor(s)-floor(-s); }

// function altSign(i) { return 2*(i%2-0.5); }  //Alternates between 1 and -1
function altSign(i) { return (-1)^i; }  //Alternates between 1 and -1
function randSign() { return (round(rand(0,1)))*2-1; }  //Returns 1 or -1

// function altRange(i,a,b){let r=b-a; i%=r; i+=a; return i;}
function altRange(i,a,b){ return i%(round(b-a)+1)+a; }

function randint(a,b){ return min(trunc(rand(a,b)),b-1); }  //Random integer from [a..b)
function randarr(arr){ return arr[randint(0,length(arr)-1)]; }  //random value from an array

function porm(n){ return n*randSign; } //"Plus OR Minus"
function rporm(n){ return rand(-n,n); }

//For when zero messes things up
function toNZ(num){if(num==0){return 1;}else{return num;}}
function tononzero(num){if(num==0){return 1;}else{return num;}}
function tononzeroD(num,def){if(num==0){return def;}else{return num;}}
function signNZ(n){ alternative(n)   //guaranteed nonzero
	case(0){ return (round(rand(0,1)))*2-1; }
	others { return n/(|n|); }
}



function inrange(num, bound0,bound1){
	if(bound1<bound0){let tmp=bound0; bound0=bound1; bound1=tmp;}
	return ( bound0 <= num&&num <= bound1 );
}

function isapproaching(s,a,ms){
	return ( s*a < ms*a );
}


//Working with angles
function norma(a){ return ((a%360)+360)%360; } //make angle 0-360 - Andi
function NormalizeAngle(angle){ angle %= 360; if(angle<0){angle += 360;} return angle; } //Ultima

//TODO: test this
function getadist(a0,a1){
	return (((a1-a0-180)%360)+360)%360+180;
}
//Blargel - positive=clockwise, negative=counterclockwise
function GetAngularDistance(angle1, angle2){
	let distance = NormalizeAngle(angle2 - angle1);
	if(distance>180){ distance-=360; }
	return distance;
}

//Andi - Uses a rotation matrix to rotate around the specified point
//Returns an array [x,y]
function rotate(x,y,a) { return [x*cos(a)-y*sin(a), x*sin(a)+y*cos(a)]; }
function rotateC(x,y,cx,cy,a) { return [cx+(x-cx)*cos(a)-(y-cy)*sin(a), cy+(x-cx)*sin(a)+(y-cy)*cos(a)]; }

function rotateX(x,y,a) { return x*cos(a)-y*sin(a); }
function rotateY(x,y,a) { return x*sin(a)+y*cos(a); }

//Interpolation
//Lerp blerp derp - (bi)linear interpolation by Andi
function lerp(start,end,t){return (1-t)*start+t*end;}
function blerp(x0,y0,x1,y1,t){return [lerp(x0,x1,t),lerp(y0,y1,t)];}
//Quadratic intERPolation (bezier)
function qerp(start,control,end,t){return (1 - t)^2 * start + 2*(1-t)*t * control + t^2 * end;}
function bqerp(x0,y0,x1,y1,x2,y2,t){return [qerp(x0,x1,x2,t),qerp(y0,y1,y2,t)];}
//Lerp between two angles, taking the shortest path
function lerpa(starta,enda,t){return starta+t*getadist(starta,enda);}
//Erotic Role-Playing... uh, general intERPolation
function erp(points,t){
	if(length(points)==3){return qerp(points[0],points[1],points[2],t);}
	return (1-t) *erp(slice(points,0,length(points)-1),t)
	         +t  *erp(slice(points,1,length(points)  ),t);	
}

//Cubic Hermite spline
function hermite(start,end, tangent0,tangent1, t){
	real h0 =  2*t^3 - 3*t^2 + 1;     // 1 ..  0.75 .. 0.25 .. 0
	real h1 = -2*t^3 + 3*t^2;         // 0 ..  0.25 .. 0.75 .. 1
	real h2 =    t^3 - 2*t^2 + t;     // 0 ..  0.2 ..  0.1  .. 0
	real h3 =    t^3 -   t^2;         // 0 .. -0.1 .. -0.2  .. 0
	return h0*start + h1*end + h2*tangent0 + h3*tangent1;
}

function hermite2(start,end, tangent0,tangent1, dist0,dist1, t){
	real h0 =  2*t^3 - 3*t^2 + 1;     // 1 ..  0.75 .. 0.25 .. 0
	real h1 = -2*t^3 + 3*t^2;         // 0 ..  0.25 .. 0.75 .. 1
	real h2 =    t^3 - 2*t^2 + t;     // 0 ..  0.2 ..  0.1  .. 0
	real h3 =    t^3 -   t^2;         // 0 .. -0.1 .. -0.2  .. 0
	return h0*start + h1*end + h2*tangent0*dist0 + h3*tangent1*dist1;
}


//ShedPH93 - returns the angle of reflection, 
//given the angle of incidence and the angle of the "mirror"
function reflect(angle, mirror){ return 2*mirror-angle; }



//Working with strings

//array to string
function atost(n){
	if(Obj_GetType(n) == Obj_GetType([0,0,0]) && length(n)!=0 ){
		//recursively build string from array
		let str = "[ ";
		ascent(i in 0..length(n)){
			str=str ~ tost(n[i]);
			if(i+1<length(n)){ str=str ~ ","; }
			str=str ~ " ";
		}
		str = str ~ "]";
		return str;
	}else{
		return tost(n);
	}
} 




//String to hash
function stoh(s){
	let t = 0;
	ascent(i in 0..length(s)){
		t += s[i]+0; //cast each char to an int by adding 0
	}
	return t;
}





//null value for unknown types - use gettype or provide type directly
//I'm not sure if this actually matters, though, NULL might work for everything
function GetNullValue(type){
	alternative(type)
	case(TYPE_NUMBER){return NULL;}
	case(TYPE_ARRAY){return [];}
	case(TYPE_STRING){return "";}
	others{return NULL;}
}



//Aliases emulating other conventions
function sqrt(n){return (|n|)^0.5;}
function abs(n){return (|n|);}

//Ternary operator - does not short-circuit! for convenience only
function tern(cond, iftrue, iffalse){ if(cond){return iftrue;}else{return iffalse;} }
// From Japanese documentation at http://www.geocities.co.jp/SiliconValley-Oakland/9951/pre/th_dnh_help_v3.html
// // use array instead of ternary operator 
// let g = [ 7 , - 5 ] [b == 10 ]; / / g is -5 if b is 10
//Better way that short-circuits:
// cond && iftrue || iffalse


function xor(a,b){ return (a&&!b)||(b&&!a); }

function sec(n) { return 1/cos(n); }
function csc(n) { return 1/sin(n); }
function cot(n) { return 1/tan(n); }

function mean(arr){
	let n=length(arr); let total=0; ascent(i in 0..n){total+=arr[i];} return total/n;
}

//Linear search function
//Check if an array contains the value, and if so, return its index - linear search
function checkarr(arr,targ) {
	if(length(arr)<1){return -1;}
	let type = Obj_GetType(targ); if(Obj_GetType(arr[0])!=type){return -1;}
	ascent(i in 0..length(arr)){ if(arr[i]==targ){return i;} }
	return -1;
}

//check if an object is offscreen
function isOffScreen(obj) {
	let x = ObjMove_GetX(obj); let y = ObjMove_GetY(obj);
	return (x<0 || y<0 || x>sx || y > sy);
}
//is off screen
function isoff(obj){
	let x = ObjMove_GetX(obj); let y = ObjMove_GetY(obj);
	return (x<0 || y<0 || x>sx || y > sy);
}
//is off screen at walls
function isoffW(obj,lft,top,rgt,btm){
	let x = ObjMove_GetX(obj); let y = ObjMove_GetY(obj);
	return (lft&&x<0 || top&&y<0 || rgt&&x>sx || btm&&y>sy);
}
//is off clip
function isoffC(obj,L,T,R,B){
	let x = ObjMove_GetX(obj); let y = ObjMove_GetY(obj);
	return (x<L || y<T || x>R || y > B);
}
//is position off clip
function isPoffC(x,y,L,T,R,B){
	return (x<L || y<T || x>R || y > B);
}



//for doing lazy shit like {FOO,BAR,BAZ}[i]
function anon(args){return args;}

function IsInRange(num, bound0,bound1){
	if(bound1<bound0){let tmp=bound0; bound0=bound1; bound1=tmp;}
	return ( bound0 <= num&&num <= bound1 );
}
function IsAngleInRange(ang, bound0,bound1){
	if(NormalizeAngle(bound1-bound0) > 180){let tmp=bound0; bound0=bound1; bound1=tmp;}
	return ( NormalizeAngle(bound0 - ang) <= 0  && NormalizeAngle(ang - bound1) >= 0 );
}


/////////////////////////////////////////////////////////////////////
//Less-frequently used resources
/////////////////////////////////////////////////////////////////////



//Andi
//Find the distance a shot will travel in a given number of frames
function ProjectDist(s,acc,mspd,frames){
	let t1=frames; let t2=0;
	if(s+acc*frames > mspd){
		let t1 = (mspd-s)/acc;  //time in which acceleration applies
		let t2 = frames-t1;	    //time in which mspd has been reached
	}
	return s*t1+0.5*acc*(t1^2) + mspd*t2;
}
//Find the time it will take for a shot to travel a given distance
function ProjectFrame(s,acc,mspd,dist){
	// if(acc<0){acc*=-1; let tmp=mspd; mspd=s; s=tmp;} //INACCURATE if dist1>dist
	let t1 = (|2*(mspd-s)/acc|)^0.5;  //time to accelerate to mspd
	let dist1 = (| s*t1 + 0.5*acc*t1^2 |);  //total distance after accelerating to mspd
	let dist2 = dist-dist1; //how far we over/undershot
	if(dist1 < dist){   //undershot
		let t2 = ( -s + (|s^2 - 4*(|acc|)*(-dist2)|)^0.5 )/(|2*acc|);
		return t1+t2;
	}
	else{                   //overshot
		let t2 = (|dist2/mspd|);
		return t1-t2;
	}
}







function isCoordOffScreen(x,y) {
	return (x<0 || y<0 || x>sx || y > sy);
}
function isCoordInRect(x,y,  x0,y0,x1,y1) {
	return (x>x0 && x<x1 && y>y0 && y<y1);
}




//randomly returns one of the arguments
function randexpr(expr1,expr2){ return tern(randbool,expr1,expr2); }


function randbool(){return rand(0,1)<0.5;}
function altBin(i){ return i%2; }
function randBin{return randint(0,1);}

function boolSign(b){ if(b){return 1;}else{return -1;} }

function tobool(val){
	alternative(typeof(val))
	case(TYPE_NUMBER){ return !(val==0); }
	case(TYPE_STRING){ return !(val==""||val=="false"||val=="0"||val=="f");}
	case(TYPE_ARRAY) { return !(length(val)==0); }
	case(TYPE_BOOL){   return val; }
}
function tobin(num){
	alternative(typeof(num))
	case(TYPE_NUMBER){ return max(0,ceil((|num|))); }
	case(TYPE_BOOL){   if(num){return 1;}else{return 0;} }
	case(TYPE_STRING,TYPE_ARRAY){ return tobin(length(num)); }
}

function frombool(bl){if(bl){return 1;}else{return 0;}}






//When repeatedly attempting to do something, e.g. place a shot some distance away from the player,
//and it might have no chance of success, e.g. everywhere in the radius is too close to the player,
//call this in the loop to break out after a hundred tries
//without needing to bother keeping track yourself.
function CatchInfiniteLoop(maxtries){
	let tries = GetCommonData("Tries",0);
	if(tries==0){ TReset; }
	tries++;
	SetCommonData("Tries",tries);
	if(tries>maxtries){SetCommonData("Tries",0);break;}
	task TReset{ yield; SetCommonData("Tries",0); }
}



//Create and instantiate an array in O(logn) time - Drake
function MakeArray(size, value){
	let a = [value];
	while(length(a) < size * 2){
		a = a ~ a;
	}
	return a[0..size];
}






function isint(n){return trunc(n)==n;}


/////////////////////////////////////////////////////////////////////
//Infrequently/never used resources
/////////////////////////////////////////////////////////////////////


//convert between xspeed,yspeed and speed,angle
function toxy(s,a){return [s*cos(a),s*sin(a)];}
function tosa(x,y){let a=atan2(y,x); return [x/cos(a)+y/sin(a),a];}

function torad(a){return a*2*pi/360;}
function todeg(a){return a*360/(2*pi);}

function topolar(x,y){ return [ sqrt(x^2+y^2), atan2(y,x) ]; }
function tocart(r,a) { return [ r*cos(a), r*sin(a) ]; }

//wait hold on what base is that
function ln(n){return log(n);} //log10, log2 are things so probably e
/////////////////////////////////////////////////////////////////////
//Other resources
/////////////////////////////////////////////////////////////////////



function GetHighestScriptType{
	if     (GetCommonData("IsPackage",false)){return "Package";}
	else if(GetCommonData("IsStage"  ,false)){return "Stage"  ;}
	else if(GetCommonData("IsPlural" ,false)){return "Plural" ;}
	else{ return "Single"; }
}
function noPlural {return GetHighestScriptType=="Single";  }
function noStage  {return (GetHighestScriptType=="Plural" || GetHighestScriptType=="Single");   }
function noPackage{return GetHighestScriptType!="Package"; }






function wrappos(x,y){
	while(x>sx){x-=sx;} while(x<0){x+=sx;}
	while(y>sy){y-=sy;} while(y<0){y+=sy;}
	return [x,y];
}
function wraprange(val,lower,upper){
	if(upper<lower){let tmp=lower; lower=upper; upper=tmp;}
	let dv = upper-lower;
	while(val<lower){val+=dv;}
	while(val>upper){val-=dv;}
}







function GetTimer{return ObjEnemyBossScene_GetInfo(objScene,INFO_TIMER);}
function GetLifePercent{return ObjEnemyBossScene_GetInfo(objScene,INFO_CURRENT_LIFE) / ObjEnemyBossScene_GetInfo(objScene,INFO_CURRENT_LIFE_MAX);}

function GetDistanceToLine(x,y, x0,y0,x1,y1) { //x,y used to be last two params
	return (absolute( (x1-x0)*(y0-y)-(x0-x)*(y1-y0) ) ) / ( ( (x1-x0)^2 + (y1-y0)^2 )^0.5 );
}








//Darkness1/Blargel - Makes an object/shot/laser turn until it points at a given point
//Doesn't loop by itself, keep calling it
function TurnToPoint(shot, speed, PointX, PointY){
	let a0 = ObjMove_GetAngle(shot);
	let a1 = atan2(PointY-ObjMove_GetY(shot), PointX-ObjMove_GetX(shot));
    let dA = GetAngularDistance(a0,a1);
	if((|dA|)<speed){ObjMove_SetAngle(shot,a1);}
	else{ObjMove_SetAngle(shot,a0+speed*sign(dA));}
}







function CreateSprite(x, y, img, source, priority){
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img);
	Obj_SetRenderPriorityI(obj, priority);
	ObjSprite2D_SetSourceRect(obj, source[0], source[1], source[2], source[3]);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj, x, y, 0);
	return obj;
}






//
function DigitToArray(let digit,let count){
	let res = [];
	digit = truncate(digit);
	loop{
		let tnum = truncate(digit % 10);
		digit /= 10;
		res = [tnum] ~ res;
		if(truncate(digit) == 0){break;}
	}
	loop(max(0, count - length(res))){
		res = [0] ~ res;
	}
	return res;
}









//Fujiwara no Mokou - rotate around an arbitrary axis
//convert x,y,z vector to usable yaw/pitch/roll
function toEuler(x, y, z, let angle){
	let s=sin(angle);
	let c=cos(angle);
	let t=1-c;
	let yaw; let pitch; let roll;
	//  normalize the axis
	let magnitude = (x^2 + y^2 + z^2)^0.5;
	if (magnitude==0){ return 0; } // error
	x /= magnitude; y /= magnitude; z /= magnitude;

	if ((x*y*t + z*s) > 0.998) {
		// north pole singularity detected
		yaw = 2*atan2(x*sin(angle/2), cos(angle/2));
		roll = 90;
		pitch = 0;
	}else if ((x*y*t + z*s) < -0.998) {
		// south pole singularity detected
		yaw = -2*atan2(x*sin(angle/2), cos(angle/2));
		roll = -90;
		pitch = 0;
	}else{
		yaw = atan2(y * s- x * z * t , 1 - (y*y+ z*z ) * t);
		roll = asin(x * y * t + z * s) ;
		pitch = atan2(x * s - y * z * t , 1 - (x*x + z*z) * t);
	}
	return [ yaw, pitch, roll ];
}














function SetDebugText(line, s){
	SetAreaCommonData("DEBUG_TEXT", rtos("00", line), ToString(s));
	SetAreaCommonData("DEBUG", "DEBUG_TEXT_CHANGED", true);
}
function Debug(line, s){
	SetAreaCommonData("DEBUG_TEXT", rtos("00", line), tost(s));
	SetAreaCommonData("DEBUG", "DEBUG_TEXT_CHANGED", true);
}

function DebugTrace(line,labels,vals){
	ascent(i in 0..max(length(labels),length(vals))){
		let lbl = ""; if(length(labels)>i){ lbl=labels[i]; }
		let val = ""; if(length(vals)>i){ val=tost(vals[i]); }
		let spc = vtos( itoa(10-length(lbl))~"s" , "" )~"	";
		Debug(line+i,lbl~spc~val);
	}
}




//Write values to log in a fairly nice format
//Can be used as a rudimentary stack trace
function Trace(labels,vals){
	let call = GetCommonData("TraceCalls",0); SetCommonData("TraceCalls",call+1);
	WriteLog(">>>>>>>>" ~ " #"~itoa(call));
	ascent(i in 0..length(vals)){
		let lbl = ""; if(length(labels)>i){ lbl=labels[i]; }
		WriteLog(lbl~"		"~vals[i]);
	}
	WriteLog("^>>>>>>^");
	task TReset{yield;DeleteCommonData("TraceCalls");}TReset;
}


//Stack Trace
//Call TraceHead before recursing and TraceTail after recursing
function TraceHead(labels,vals){
	let call = GetCommonData("TraceCalls",0); SetCommonData("TraceCalls",call+1);
	let cspace = vtos( itoa(8*call)~"s" , "" );
	WriteLog(">>>>>>>>>>>>>>>>" ~ " # "~itoa(call)~cspace~" PUSH");
	ascent(i in 0..length(vals)){
		let lbl = ""; if(length(labels)>i){ lbl=labels[i]; }
		let spc = vtos( itoa(10-length(lbl))~"s" , "" )~"	";
		WriteLog(lbl~spc~vals[i]);
	}
	return call;
}
function TraceTail(retval,call){
	let spc = vtos( itoa(10-length("return"))~"s" , "" )~"	";
	let cspace = vtos( itoa(8*call)~"s" , "" );
	WriteLog("return"~spc~tost(retval));
	WriteLog("<<<<<<<<<<<<<<<<" ~ " # "~itoa(call)~cspace~" POP");
	SetCommonData("TraceCalls",GetCommonData("TraceCalls",1)-1);
	return retval;
}



