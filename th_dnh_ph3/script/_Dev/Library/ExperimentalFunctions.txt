
function TestTypes{
	WriteLog("String");
	WriteLog(Obj_GetType("String")); //10
	WriteLog("Int");
	WriteLog(Obj_GetType(12)); //9
	WriteLog("Real");
	WriteLog(Obj_GetType(1.2)); //2
	WriteLog("Real (1.0)");
	WriteLog(Obj_GetType(1.0)); //2
	WriteLog("Empty Array");
	WriteLog(Obj_GetType([])); //10
	WriteLog("Array of Numbers");
	WriteLog(Obj_GetType([0,1,2])); //10
	WriteLog("Array of Strings");
	WriteLog(Obj_GetType(["","butts","hueheu"])); //10
	WriteLog("Char 'a'");
	WriteLog(Obj_GetType('a')); //-1
	// WriteLog("Char? 'aZ'");
	// WriteLog(Obj_GetType('aZ'));
	WriteLog("ObjSound"); //10 *!*!*!*
	WriteLog(Obj_GetType(ObjSound_Create));
	WriteLog("ObjShot");
	WriteLog(Obj_GetType(CreateDummyShot(0,0))); //106
	WriteLog("ObjSprite2D");
	WriteLog(Obj_GetType(ObjPrim_Create(OBJ_SPRITE_2D))); //2
	WriteLog("ObjSpriteList2D");
	WriteLog(Obj_GetType(ObjPrim_Create(OBJ_SPRITE_LIST_2D))); //3
	WriteLog("Boolean"); //2
	WriteLog(Obj_GetType(true));
	WriteLog("True");
	WriteLog(true);
	WriteLog("False");
	WriteLog(false);
	WriteLog("ToString(true)");
	WriteLog(ToString(true));
	WriteLog("ToString(false)");
	WriteLog(ToString(false));
	
	WriteLog("NO_CHANGE");
	WriteLog(NO_CHANGE); //-16777216
	WriteLog("NULL");
	WriteLog(NULL); //0
	WriteLog("ID_INVALID");
	WriteLog(ID_INVALID); //-1
	
}



function ParseExpression(expr){
	let coeffs = [];
	let expons = [];
	
	let tokens = [];
	let operands = [];
	let operators = [];
	operands = SplitString(expr,"+-*/%^()<>[]$");
	operators = SplitString(expr,"1234567890.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\\\"'");
	//use $foo$ for GetCommonData("foo",NULL)
	
	ascent(i in 0..length(operands)){
		
	}
	
}

//Set an object's speed, acceleration, and jerk from an equation
function ObjMove_SetSpeedAtExpression(obj,expr){
	expr = TrimString(expr);
	let terms = SplitString(expr,"+"); //todo: "-"?
	
	ascent(i in 0..length(terms)){
		let term = terms[i];
		term = SplitString(term,"*t");

		//Find coefficient
		let coeff = ator(term[0]);
		
		//Find exponent
		let expon;
		if(length(term)==1){ expon=0; }
		else{ 
			let tmp = SplitString(term[1],"^");
			if(length(tmp)==1){ expon = "1"; }
			else{ expon = tmp[length(tmp)-1]; }
		}
		
		alternative(ator(expon))
		case(0){ ObjMove_SetSpeed(obj,coeff); }
	
	}
	
}





function ascii(d){
	//Stuff that's hard to put in the array normally
	let tmp = "\\_"; 
	let bsl=tmp[0];
	let fsl = bsl; // '/';
	let rsb = ''; //tmp = "\]_"; let rsb = tmp[0];
	let lsb = '['; // '[';
	let dqt = '\''; // '"';
	let sqt = '\''; // '\'';
	
	let chmin = 32; //control characters aren't in array
	let chs=[ ' ', '!', dqt, '#', '$', '%', '&', sqt, '(', ')', '*', '+', ',', '-', '.', fsl,
	      '0','1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@',
		  'A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',
		  'R','S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', lsb, bsl, rsb, '^', '_', '`', 'a', 'b',
		  'c','d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
		  't','u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '' ];
	let c;
	if(0<d-32&&d-32<length(chs)){
		c=chs[d-32];
	}else{
		c='';
	}
	return c;
}

function RandomString(size){
	let s = "";
	loop(size){
		s = s ~ [ ascii(randint(32,127)) ];
	}
	return s;
}



/////////////////////////////////////////////////////////////
//Andi - functions to predict the path of a shot
/////////////////////////////////////////////////////////////


//Find the distance a shot will travel in a given number of frames
function projectdist(s,acc,mspd,t){
	let t1=t; let t2=0;
	if(s+acc*t > mspd){
		let t1 = (mspd-s)/acc;	//time in which acceleration applies
		let t2 = t-t1;			//time in which mspd has been reached
	}
	return s*t1+0.5*acc*(t1^2) + mspd*t2;
}


//Find the time it will take for a shot to travel a given distance
function projecttime(s,acc,mspd,dist){
	let t1 = sqrt(2*(mspd-s)/acc);	//time to accelerate to mspd
	let dist1 = s*t1 + 0.5*acc*(t1^2); //total distance after accelerating to mspd
	let dist2 = dist-dist1;	//how far we over/undershot
	if(dist1<=dist){	//undershot
		let t2 = dist2/mspd;
		return t1+t2;
	}
	else{				//overshot
		let t2 = ( -s + sqrt(s^2 - 4*acc*(-dist2)) )/(2*acc);
		return t1-t2;
	}
}
	//	?at2 + ut - s = 0
	//Using quadratic formula
	//	t = ( -s + sqrt(s^2 - 4*acc*(-dist)) )/(2*acc)

//WIP - find position of shot after given number of frames, assuming no angv
function projectpos(x0,y0,s,ang,acc,mspd,t){
	let dist = projectdist(s,acc,mspd,t);	
	let dx = dist*cos(ang); let dy = dist*sin(ang);
	return [x0+dx,y0+dy];
}

//WIP - find position of shot after given number of frames
// function projectposangv(x,y,s,a,acc,angv,mspd,t){
	// let dx = s*cos(a); let dy = s*sin(a);
	// let ddx = acc*cos(a); let ddy = acc*sin(a);
	// let x1 = dx*t+0.5*ddx*(t^2);
	// let y1 = dy*t+0.5*ddy*(t^2);
// }

function projectposangv(x0,y0,s,ang,acc,angv,mspd,t){
	
	let r = (min(s+acc*t,mspd))/torad(angv); //radius of circular path - convert angv to radians
	let cx = x0+r*cos(ang+90*sign(r));
	let cy = y0+r*sin(ang+90*sign(r));
	
	DebugWarnShot(cx,cy);

	let circ = 2*pi*r;
	let dist = projectdist(s,acc,mspd,t); //linear distance - use as ratio with circumference
	let arc = 360*dist/circ + ang;//-270*sin(r); //-90*sign(r);
	let dx = r*cos(arc); let dy = r*sin(arc);
	
	return [cx+dx,cy+dy];
}


/////////////////////////////////////////////////////////////
//End of shot prediction functions
/////////////////////////////////////////////////////////////


//mixed array - experimental
function marr(arr,i){return getvald(arr,itoa(i),NULL);}
function smarr(arr,i,v){
	if(!isval(arr,itoa(i))){setval(arr,"MArrSize",lengthmarr(arr)+1);}
	setval(arr,itoa(i),v);
}
function lengthmarr(arr){return getvald(arr,"MArrSize",0);}
//End of mixed array functions


















//why do I even have this
function GetFigureEightPoint(x0,y0, x1,y1, t){
	let rad = getdist(x0,y0,x1,y1)/2;
	let ang = getangle(x0,y0,x1,y1); let dir;
	let cx; let cy; let x; let y;
	t%=2;
	if(t<1){
		cx=x0; cy=y0; dir=1;
		t--;
	}else{
		cx=x1; cy=y1;
		ang+=180; dir=-1;
	}
	
	x = cx+rad*cos(ang+360*t*dir); 
	y = cy+rad*sin(ang+360*t*dir);
	return [x,y];
}



//eh
function Exarg(k,v){
	let obj = ObjShot_Create(OBJ_SHOT);
	ObjShot_SetDeleteFrame(obj,1);
	Obj_SetValue(obj,"Argument",k);
	Obj_SetValue(obj,"Value",v);
	Obj_SetValue(obj,k,v);
	return obj;
}





/*
//Python options select
task Settings{
	let endSettings = false;
	let globalSettingID = 0;
	let frameKeyHold = 0;
	let frameKeyHold2 = 0;
	let countMenu = 2;
	SetCommonData("Hold",true);

	let difficultyID = 0;
	let selectedLifeAmount = 2;

	let cursor = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(cursor, GetCurrentScriptDirectory ~ "System/img/setting.png");
	ObjSprite2D_SetSourceRect(cursor, 224, 224, 256, 256);
	ObjSprite2D_SetDestCenter(cursor);
	ObjRender_SetScaleXYZ(cursor, 0.65, 0.65, 0);
	ObjRender_SetPosition(cursor, 28, GetCenterY - 24, 0);
	Obj_SetRenderPriorityI(cursor, 60);
	Obj_SetVisible(cursor, false);
	// Obj_SpinXYZ(cursor, 0, 0, 7, 0);

	let difficulty = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(difficulty, GetCurrentScriptDirectory ~ "System/img/difficulty.png");
	ObjSprite2D_SetSourceRect(difficulty, 0, 64, 1024, 128);
	ObjSprite2D_SetDestCenter(difficulty);
	ObjRender_SetPosition(difficulty, 256, GetCenterY - 24, 0);
	Obj_SetRenderPriorityI(difficulty, 60);
	ObjRender_SetScaleXYZ(difficulty, 0.8, 0.8, 0);
	Obj_SetVisible(difficulty, false);


	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);

	Background;
	wait(60);

	while(!endSettings){
		ObjRender_SetPosition(cursor, 28, GetCenterY - 24 + 48*globalSettingID, 0);
		ObjSprite2D_SetSourceRect(difficulty, 0, 32 * difficultyID, 256, 32 * (difficultyID + 1));
		ObjSprite2D_SetDestCenter(difficulty);


		if(GetVirtualKeyState(VK_OK) == KEY_PUSH)
		{	
			PlaySoundA1(74, 80, 0);
			endSettings = true;
			break;
		}

		//カーソル移動
		if(GetVirtualKeyState(VK_UP) == KEY_PUSH)
		{
			PlaySoundA1(91, 80, 0);
			globalSettingID--;
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH)
		{
			PlaySoundA1(91, 80, 0);
			globalSettingID++;
		}
		else if(GetVirtualKeyState(VK_UP) == KEY_HOLD)
		{
			frameKeyHold++;
			if(frameKeyHold == 30 || (frameKeyHold > 30 && (frameKeyHold % 10 == 0)))
			{
				PlaySoundA1(91, 80, 0);
				globalSettingID--;
			}
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_HOLD)
		{
			frameKeyHold++;
			if(frameKeyHold == 30 || (frameKeyHold > 30 && (frameKeyHold % 10 == 0)))
			{
				PlaySoundA1(91, 80, 0);
				globalSettingID++;
			}
		}
		else
		{
			frameKeyHold = 0;
		}

		if(globalSettingID < 0) 
		{
			globalSettingID = countMenu - 1;
		}
		else
		{
			globalSettingID %= countMenu;
		}



		if(globalSettingID == 0){
			if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH)
			{
				PlaySoundA1(91, 80, 0);
				difficultyID--;
			}
			else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH)
			{
				PlaySoundA1(91, 80, 0);
				difficultyID++;
			}
			else if(GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
			{
				frameKeyHold2++;
				if(frameKeyHold2 == 30 || (frameKeyHold2 > 30 && (frameKeyHold2 % 10 == 0)))
				{
					PlaySoundA1(91, 80, 0);
					difficultyID--;
				}
			}
			else if(GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
			{
				frameKeyHold2++;
				if(frameKeyHold2 == 30 || (frameKeyHold2 > 30 && (frameKeyHold2 % 10 == 0)))
				{
					PlaySoundA1(91, 80, 0);
					difficultyID++;
				}
			}
			else
			{
				frameKeyHold2 = 0;
			}

			if(difficultyID < 0) 
			{
				difficultyID = 3;
			}
			else
			{
				difficultyID %= 4;
			}
		}

		yield;
	}

	Obj_Delete(cursor);
	Obj_Delete(difficulty);

	if(selectedLifeAmount == 9){enableInfiniteLives = true; Disable;}
	SetPlayerLife(selectedLifeAmount);
	SetCommonData("Difficulty", difficultyID);

	Plural;

	wait(60);

	Difficulty(GetCurrentScriptDirectory ~ "System/img/Difficulty.png", 0, 32 * difficultyID, 256, 32 * (difficultyID + 1));

	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);

	wait(120);

	SetCommonData("Hold",false);
	// Muzak;
	// Stage;

	task Background{
		let bg = ObjPrim_CreateRegularPolygon(GetCenterX+1, GetCenterY, 0, 4, 4608^0.5);
		let lineArray = [[GetCenterX, GetCenterY, 0], [GetCenterX, GetCenterY, 0], [GetCenterX, GetCenterY, 0], [GetCenterX, GetCenterY, 0], [GetCenterX, GetCenterY, 0]];
		let lineArrayDest = [[16, 176, 0], [368, 176, 0], [368, 272, 0], [16, 272, 0], [16, 176, 0]];

		let dir = 45;
		ascent(i in 1 .. ObjPrim_GetVertexCount(bg)){
		    ObjPrim_SetVertexPosition(bg, i, 4608^0.5*cos(dir), 4608^0.5*sin(dir), 0);

		    ObjPrim_SetVertexUVT(bg, i, 0, 0);

	        dir += 360/4;
		}

		ObjRender_SetColor(bg, 0, 0, 0);
		ObjRender_SetAngleZ(bg, 0);
		ObjRender_SetAlpha(bg, 192);
		ObjRender_SetScaleXYZ(bg, 0, 0, 0);
		Obj_SetRenderPriorityI(bg, 50);

		let line = ObjPrim_CreateLine(lineArray);
		Obj_SetRenderPriorityI(line, 51);
		//ObjRender_SetScaleXYZ(line, 0, 0, 0);

		ascent(i in 0 .. 61){
			ObjRender_SetScaleXYZ(bg, (352/96)/60 * i, 1/60 * i, 0);

			ascent(j in 0 .. 5){
				ObjPrim_SetVertexPosition(line, j, linear(lineArray[j][0], lineArrayDest[j][0], i/60), linear(lineArray[j][1], lineArrayDest[j][1], i/60), linear(lineArray[j][2], lineArrayDest[j][2], i/60));
			}
			yield;
		}

		Texts;
		Lives;
		Obj_SetVisible(cursor, true);
		Obj_SetVisible(difficulty, true);
		while(!endSettings){
			yield;
		}

		descent(i in 0 .. 61){
			ObjRender_SetScaleXYZ(bg, (352/96)/60 * i, 1/60 * i, 0);
			
			ascent(j in 0 .. 5){
				ObjPrim_SetVertexPosition(line, j, linear(lineArray[j][0], lineArrayDest[j][0], i/60), linear(lineArray[j][1], lineArrayDest[j][1], i/60), linear(lineArray[j][2], lineArrayDest[j][2], i/60));
			}
			yield;
		}

		Obj_Delete(bg);
		Obj_Delete(line);
	}

	task Texts{
		let objDiff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objDiff, GetCurrentScriptDirectory ~ "System/img/setting.png");
		ObjSprite2D_SetSourceRect(objDiff, 0, 0, 256, 64);
		ObjSprite2D_SetDestCenter(objDiff);
		ObjRender_SetScaleXYZ(objDiff, 0.5, 0.5, 0);
		ObjRender_SetPosition(objDiff, 96, GetCenterY - 24, 0);

		let objLives = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objLives, GetCurrentScriptDirectory ~ "System/img/setting.png");
		ObjSprite2D_SetSourceRect(objLives, 0, 64, 256, 128);
		ObjSprite2D_SetDestCenter(objLives);
		ObjRender_SetScaleXYZ(objLives, 0.5, 0.5, 0);
		ObjRender_SetPosition(objLives, 96, GetCenterY + 24, 0);

		while(!endSettings){
			yield;
		}
		Obj_Delete(objDiff);
		Obj_Delete(objLives);
	}

	task Lives{
		selectedLifeAmount = 2;
		let frameKeyHold = 0;

		let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj2, GetCurrentScriptDirectory ~ "System/img/disable.png");
		ObjSprite2D_SetSourceRect(obj2, 0, 0, 256, 64);
		ObjSprite2D_SetDestCenter(obj2);
		Obj_SetRenderPriorityI(obj2, 61);
		ObjRender_SetPosition(obj2, 256, GetCenterY + 24, 0);
		Obj_SetVisible(obj2, false);

		ascent(i in 0 .. 8){
			SingleLife(176 + i*24, i);
		}

		while(!endSettings){
			if(selectedLifeAmount > 8){
				Obj_SetVisible(obj2, true);
			}else{
				Obj_SetVisible(obj2, false);
			}


			if(globalSettingID == 1){
				if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH)
				{
					PlaySoundA1(91, 80, 0);
					selectedLifeAmount--;
				}
				else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH)
				{
					PlaySoundA1(91, 80, 0);
					selectedLifeAmount++;
				}
				else if(GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
				{
					frameKeyHold++;
					if(frameKeyHold == 30 || (frameKeyHold > 30 && (frameKeyHold % 10 == 0)))
					{
						PlaySoundA1(91, 80, 0);
						selectedLifeAmount--;
					}
				}
				else if(GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
				{
					frameKeyHold++;
					if(frameKeyHold == 30 || (frameKeyHold > 30 && (frameKeyHold % 10 == 0)))
					{
						PlaySoundA1(91, 80, 0);
						selectedLifeAmount++;
					}
				}
				else
				{
					frameKeyHold = 0;
				}

				if(difficultyID < 0) 
				{
					selectedLifeAmount = 9;
				}
				else
				{
					selectedLifeAmount %= 10;
				}
			}
			yield;
		}

		Obj_Delete(obj2);

		task SingleLife(x, num){
			let obj = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(obj, GetCurrentScriptDirectory ~ "System/img/setting.png");
			ObjSprite2D_SetSourceRect(obj, 32, 224, 64, 256);
			ObjSprite2D_SetDestCenter(obj);
			ObjRender_SetScaleXYZ(obj, 0.75, 0.75, 0);
			Obj_SetRenderPriorityI(obj, 60);
			ObjRender_SetPosition(obj, x, GetCenterY + 24, 0);

			while(!endSettings){
				if(selectedLifeAmount > num){
					ObjSprite2D_SetSourceRect(obj, 0, 224, 32, 256);
					ObjSprite2D_SetDestCenter(obj);
				}else{
					ObjSprite2D_SetSourceRect(obj, 32, 224, 64, 256);
					ObjSprite2D_SetDestCenter(obj);
				}
				yield;
			}
			Obj_Delete(obj);
		}
	}
}
*/