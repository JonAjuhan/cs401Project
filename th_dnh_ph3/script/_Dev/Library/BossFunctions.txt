
///////////////////////////////////////////////////////////////
//Boss functions
///////////////////////////////////////////////////////////////
function CreateBoss(name){
	let color = GetCommonData("BossNameColor",[255,180,255]);
	return CreateBossA0(name,color,GetCommonData("AutoAnimateBoss",true));
}
function CreateBossA1(name,color){
	return CreateBossA0(name,color,GetCommonData("AutoAnimateBoss",true));
}


//"Real" function used by the others, 
//to allow for more easily adding features without breaking existing calls
function CreateBossA0(name,c,startrender){
	let boss;
	let num = length(GetAllBossID);
	if(num==0){
		boss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
		SetCommonData("BossCount",1);
		UpdatePositions;
	}else{
		boss = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_SetLife(boss,9999);
		SetCommonData("BossCount",GetCommonData("BossCount",0)+1);
		if(GetCommonData("Boss"~itoa(num)~"_X", NULL) != NULL){
			ObjMove_SetX(boss,GetCommonData("Boss"~itoa(num)~"_X", NULL));
			ObjMove_SetY(boss,GetCommonData("Boss"~itoa(num)~"_Y", NULL));
			DeleteCommonData("Boss"~itoa(num)~"_X");
			DeleteCommonData("Boss"~itoa(num)~"_Y");
		}
	}
	Obj_SetValue(boss,FLAG_BOSS,true);
	Obj_SetValue(boss,BOSS_INDEX,num);
	Obj_SetValue(boss,META_SUBTYPE,OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(boss);
	Obj_SetValue(boss,"IsUseCustAnimLib",false);
	
	if(length(c)==0){
		c=Obj_GetValueD(boss,CHARACTER_COLOR,c);
		if(length(c)==0){c=GetCommonData("SpellcardDeclareColor",[]);}
		if(length(c)==0){c=GetCharacterInfoA1(name,INFO_COLOR);}
		if(length(c)==0){c=[255,128,128];}
	}
	EnemyName(boss, name, c[0], c[1], c[2]);
	Obj_SetValue(boss,CHARACTER_NAME,name);
	Obj_SetValue(boss,CHARACTER_COLOR,c);
	
	if(startrender){ RenderBoss(boss); }
	
	//Rectangular hitbox to player, which can also be grazed
	let hb = ObjShot_Create(OBJ_STRAIGHT_LASER); ObjShot_Regist(hb); 
	ObjShot_SetAutoDelete(hb,false); ObjShot_SetSpellResist(hb,true); 
	Obj_SetVisible(hb,false); ObjShot_SetItemChange(hb,false);
	OR_SetColor(hb,c[0],c[1],c[2]); //graze particles in boss' theme color
	ObjLaser_SetGrazeInvalidFrame(hb,20); //default 20
	Obj_SetValue(boss,"HitboxObject",hb);
	
	return boss;
}




function spawnBossBlank(name){return CreateBoss(name);}



let POSE_SET = -1; let POSE_END = 0;
function SetPose(enem,dur){
	if(Obj_GetValueD(enem,"IsUseCustAnimLib",false)){
		if(dur>0){ObjAnim_SetAttackA2(enem, dur);}
		else {ObjAnim_SetAttackA1(enem, dur==POSE_SET);}
	}else{
		if(dur==POSE_SET){Obj_SetValue(enem,"cast",2);}
		else if(dur==POSE_END){Obj_SetValue(enem,"cast",0);}
		else{
			Obj_SetValue(enem,"cast",2);
			Manage;
			task Manage{
				loop(dur){yield;}
				Obj_SetValue(enem,"cast",0);
			}
		}
	}
}

function SetAttackPose(dur){SetPose(boss,dur);} //compatibility


function SetBossHitbox(enem,ex,ey){
	if(length(GetEnemyBossObjectID)==0){return;}
	let boss = GetEnemyBossObjectID[0];
	if(Obj_GetValueD(enem,FLAG_INTERSECTION,true)){
		let s = OR_GetScale(enem);
		let r = Obj_GetValueD(enem,COL_RADIUS,16*s);
		// ObjEnemy_SetIntersectionCircleToShot(  boss, ex, ey, r*1.5); //24*s  //32
		// ObjEnemy_SetIntersectionCircleToPlayer(boss, ex, ey, r    ); //16*s  //24
		
		ObjEnemy_SetIntersectionCircleToShot(  boss, ex, ey,     r*1.5  );
		// ObjEnemy_SetIntersectionCircleToPlayer(boss, ex, ey+r/3, r/2    );
		// ObjEnemy_SetIntersectionCircleToPlayer(boss, ex, ey,     r/2    );
		// ObjEnemy_SetIntersectionCircleToPlayer(boss, ex, ey-r/3, r/2    );
		
		let shot = Obj_GetValueD(boss,"HitboxObject",CreateStraightLaserA1(0,0,0,0,0, 1,NULL,0));
		ObjShot_SetIntersectionLine(shot, ex,ey-r/2, ex,ey+r/2, r/2);
		
		
		// SetShotIntersectionLine( ex, ey-r/2, ex, ey+r/2, r/2 );
		// let las = CreateStraightLaserA1(ex,ey-r/2, 90, r, r*2/3, 1, NULL, 0);
		// let las = CreateStraightLaserA1(px,py-r/2, 90, r, r*2/3, 10, NULL, 0);
		
		// Obj_SetValue(enem,COL_RADIUS,20*s); //average it out
	}
}

task TSpellImmune{
	let boss = GetEnemyBossObjectID[0];
	let wasIntersection;
	while(!Obj_IsDeleted(boss)){
		while(!IsPlayerSpellActive){yield;}
		wasIntersection = Obj_GetValueD(boss,FLAG_INTERSECTION,true);
		SetBossBlur(true);
		while(IsPlayerSpellActive && !GetCommonData("PlayerSpellAttackEnd",false)){yield;}
		SetBossBlur(!wasIntersection);
		while(IsPlayerSpellActive){yield;}
	}
}



//Makes sure px,py,ex,ey,etc are always up-to-date
task UpdatePositions {
	yield;
	while(length(GetEnemyBossObjectID)==0){yield;}
	let boss = GetEnemyBossObjectID[0];
	while(!Obj_IsDeleted(boss)) {
		px = GetPlayerX;
		py = GetPlayerY;
		ex = ObjMove_GetX(boss);
		ey = ObjMove_GetY(boss);
		yield;
	}
}


//Store coordinates of boss objects
//so additional bosses can retain their position between singles
sub SaveBossPositions{
	let bosses = GetAllBossID();
	ascent(i in 0..length(bosses)){
		if(!Obj_IsDeleted(bosses[i])){
			let ind = Obj_GetValueD(bosses[i],BOSS_INDEX,i+1);
			SetCommonData("Boss"~itoa(ind)~"_X", ObjMove_GetX(bosses[i]));
			SetCommonData("Boss"~itoa(ind)~"_Y", ObjMove_GetY(bosses[i]));
		}
	}
}




//Sparen, originally
task EnemyName(obj, name, r, g, b){ //Blurred originally	
	let text = ObjText_Create;
	ObjText_SetText(text,name);
	ObjText_SetFontType(text,"Russell Square Regular"); //Helvetica: Use 14 pt font, All caps.
	// ObjText_SetFontType(text,"Cirno");
	ObjText_SetFontSize(text,12); //11, 12

	ObjText_SetFontBold(text, true);
	ObjText_SetFontColorTop(text,255,255,255);
	ObjText_SetFontColorBottom(text, r, g, b);
	ObjText_SetFontBorderType(text,BORDER_FULL);
	ObjText_SetFontBorderColor(text,32,32,32);
	ObjText_SetFontBorderWidth(text,1);
	ObjText_SetHorizontalAlignment(text, ALIGNMENT_LEFT);
	ObjText_SetMaxWidth(text, GetStgFrameWidth-24);
	Obj_SetRenderPriority(text, 0.79+0.01);
	ObjRender_SetPosition(text,5,12,0); //Orig 5,15, but some spell names were too long... (edited in conjunction with cutin.h)
	ObjRender_SetAlpha(text, 150);

	Obj_SetValue(obj,"DisplayName",name);
	
	let boss = GetEnemyBossObjectID[0];
	let num = Obj_GetValueD(boss,"DisplayNameCount",0)+1;
	Obj_SetValue(boss,"DisplayNameCount",num);
	if(num>1){
		ObjRender_SetY(text,12+10*(num-1)); //12*num
	}
	
	yield;
	while(ObjEnemy_GetInfo(boss,INFO_LIFE)>0){yield;}
	wait(12);//"It can only handle 12 yields, currently, before the script is closed."
	Obj_Delete(text);
}







//Set boss to use "blurred" version of sprite, like Suwako or Murasa
//Also disables her hitbox while blurred
function SetBossBlur(blur){
	let boss = GetEnemyBossObjectID();
	Obj_SetValue(boss,FLAG_INTERSECTION,!blur);	
	if(Obj_GetValueD(boss,"DisplayName","")=="Andi"){
		let yoff; let frames; let frame; if(blur){yoff=255;}else{yoff=0;}
		let types = [ANIM_IDLE,ANIM_MOVE,ANIM_MOVEEND,ANIM_ATTACK,ANIM_ATTACKEND]; let type;
		let rows  = [0,1,1,2,2]; let row;
		ascent(t in 0..length(types)){
			type = types[t]; row = rows[t]; frames = GetAnimationFrames(boss, type);
			ascent(i in 0..length(frames)){ frame = frames[i]; frame[1] = 1+80*row+yoff; frame[3] = 80*(row+1)+yoff; frames[i] = frame; }
			Obj_SetValue(boss,"anim_"~type,frames);
		}
	}
	else{
		if(blur){
			ObjRender_SetAlpha(boss,64);
			// let obj = CreateSprite2(dirimg~"mist.png", 24, [0, 0, 128, 128], [64, 64]);
			let obj = CreateSprite2(dirimg~"shield1.png", 24, [0, 0, 128, 128], [64, 64]);
			Obj_SetValue(boss,"BlurObject",obj);
			// ObjRender_SetColor(obj, 255, 0, 64); ObjRender_SetAlpha(obj, 255 );
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			task TFollow{     
				let i=0;
				while(!Obj_GetValueD(boss,FLAG_INTERSECTION,true)&&!Obj_IsDeleted(obj)) {
					ObjRender_SetPosition(obj, ex, ey, 0);
					ObjRender_SetAngleZ(obj, i);
					i++; yield;
				} Obj_Delete(obj);
			}
			TFollow; return obj;
		}else{
			ObjRender_SetAlpha(boss,255);
			if(Obj_IsValueExists(boss,"BlurObject")){Obj_Delete(Obj_GetValue(boss,"BlurObject"));}
		}
	}
}








//Alternative lifebar style, circular around boss
task LifeCircle(renderObj, enemyObj){
	let path = root~"/system/img/Default_System.png";
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D); //lifebar base
	let objb = ObjPrim_Create(OBJ_PRIMITIVE_2D); //actual life bar
	let obj2 = ObjPrim_Create(OBJ_SPRITE_LIST_2D); //boss stars
	let obj3 = ObjPrim_Create(OBJ_SPRITE_LIST_2D); //life bar knobs
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetPrimitiveType(objb, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetTexture(obj, root~"/system/img/lifebar.png");
	ObjPrim_SetTexture(objb, root~"/system/img/lifebar.png");
	ObjPrim_SetTexture(obj2, path);
	ObjPrim_SetTexture(obj3, root~"/system/img/lifebar.png");
	Obj_SetRenderPriority(obj, 0.31);
	Obj_SetRenderPriority(objb, 0.32);
	Obj_SetRenderPriority(obj2, 0.7);
	Obj_SetRenderPriority(obj3, 0.33);

	let lastRemStep = -1;
	let lifeRateRender = 0;

	let vertexcount = 64;
	let innerrad = 60; //inner radius of the circle
	let outerrad = 68; //outer radius of the circle

	let objScene = ID_INVALID;
	let bossEnemy = [];

	ObjPrim_SetVertexCount(obj, vertexcount);
	ObjPrim_SetVertexCount(objb, vertexcount);

	let lifeM = ObjEnemy_GetInfo(enemyObj, INFO_LIFE); //starting life
	loop{
		ObjSpriteList2D_ClearVertexCount(obj2);
		ObjSpriteList2D_ClearVertexCount(obj3);
		if(!Obj_IsDeleted(enemyObj)){
			if(length(GetEnemyBossObjectID) > 0){
				ObjRender_SetAlpha(obj, 256);
				ObjRender_SetAlpha(objb, 256);
				ObjRender_SetAlpha(obj2, 256);
				ObjRender_SetAlpha(obj3, 256);
			}else{
				ObjRender_SetAlpha(obj, 0);
				ObjRender_SetAlpha(objb, 0);
				ObjRender_SetAlpha(obj2, 0);
				ObjRender_SetAlpha(obj3, 0);
			}

			let life = ObjEnemy_GetInfo(enemyObj, INFO_LIFE); //life remaining
			ascent(i in 0..vertexcount/2){
		        let indexvert = i*2;
		        let angle = i*360/(vertexcount*0.5-1) - 90;
		        let angle2 = -90-(life/lifeM)*i*360/(vertexcount*0.5-1);
		        ObjPrim_SetVertexPosition(obj, indexvert+0, ObjRender_GetX(renderObj)+innerrad*cos(angle), ObjRender_GetY(renderObj)+innerrad*sin(angle), 0);
		        ObjPrim_SetVertexPosition(obj, indexvert+1, ObjRender_GetX(renderObj)+outerrad*cos(angle), ObjRender_GetY(renderObj)+outerrad*sin(angle), 0);

		        ObjPrim_SetVertexUVT(obj, indexvert+0, 10, 0);
		        ObjPrim_SetVertexUVT(obj, indexvert+1, 20, 32);


		        ObjPrim_SetVertexPosition(objb, indexvert+0, ObjRender_GetX(renderObj)+innerrad*cos(angle2), ObjRender_GetY(renderObj)+innerrad*sin(angle2), 0);
		        ObjPrim_SetVertexPosition(objb, indexvert+1, ObjRender_GetX(renderObj)+outerrad*cos(angle2), ObjRender_GetY(renderObj)+outerrad*sin(angle2), 0);

		        ObjPrim_SetVertexUVT(objb, indexvert+0, 0, 0);
		        ObjPrim_SetVertexUVT(objb, indexvert+1, 10, 32);
		    }
		}else{
			Obj_Delete(obj);
			Obj_Delete(objb);
			Obj_Delete(obj2);
			Obj_Delete(obj3);
			return;
		}
		yield;
	}
}













//////////////////////////////////////////////////////////////////////////
//Task to handle boss movement with a large amount of flexibility - Andi//
//////////////////////////////////////////////////////////////////////////
	//Extra arguments (mutually exclusive):
	//	[MOVE_BIAS,xBiasPos,yBiasPos,xbias,ybias]
	//	[MOVE_PLAYERBIAS,xbias,ybias]
								//Extra arguments (compatible):
let MOVE_NEAR		= 999910;	//  [MOVE_NEAR,maxrad]
let MOVE_FAR		= 999911;	//	[MOVE_FAR, minrad]
//let MOVE_WHEREEVERYOUARE = 999911.5;
let MOVE_PNLSPACE	= 999912;	//	[MOVE_PNLSPACE, personalspace]
let MOVE_ATSPEED	= 999913;	//	[MOVE_SPEED,   spd] 			(*incompatible with MOVE_MAXSPEED)
let MOVE_LIMITSPEED	= 999914;	//	[MOVE_MAXSPEED,spd] 			(*incompatible with MOVE_SPEED)
let MOVE_SMOOTH		= 999915;	//	[MOVE_SMOOTH,smoothness]
let MOVE_WEIGHT		= 999916;	//TODO

//Dictionary controls - use Obj_SetValue(boss,"key",value)
//	"MoveDelay",N
		//Set number of frames to wait before moving again - resets to del0 after moving
		//After setting it once, it will be checked each frame; otherwise it will be checked after moving
		//Set to -1 to wait indefinitely, 0 to move immediately

task Tmovement(obj, x1,x2, y1,y2, time,del, exargs) {
	let movetype = "default"; 
	let isBias=false; let xBiasPos=(x1+x2)/2; let yBiasPos=(y1+y2)/2; let xbias=0; let ybias=0; 
	let isPlayer=false; let isPnlSpace=false; let personalspace=0; 
	let isNear=false; let maxrad=999; let isFar=false; let minrad=0; 
	let isSpd=false; let spd=0; let isMaxSpd=false; let mspd=0;
	let isWeight=false; let weight=0;
	let biasobj;
	
	if(del<1){ RaiseError("Delay needs to be positive or the program will freeze, baka"); }
	
	if(length(exargs)>0){
		ascent(i in 0..length(exargs)){
			let arg = SplitString(exargs[i],":");
			let k = arg[0]; let v; if(length(arg)>1){ v = arg[1]; }
			alternative(k)
			case("playerbias"){
				movetype="playerbias"; isPlayer=true; 
				if(length(arg)>1){ xbias=ator(v); }
				if(length(arg)>2){ ybias=ator(arg[2]); }
			}
			case("bias"){
				movetype="bias"; 
				if(length(arg)>1){ xBiasPos=ator(v); }
				if(length(arg)>2){ yBiasPos=ator(arg[2]);}
			}
			case("selfbias"){
				movetype="selfbias"; isPlayer=true; 
				if(length(arg)>1){ xbias=ator(v); }
				if(length(arg)>2){ ybias=ator(arg[2]); }
			}
			case("objbias"){
				movetype="objbias";
				if(length(arg)>1){ biasobj=atoi(v); } //object id
			}
			case("xbias"){         xbias=ator(v); isBias=true; }
			case("ybias"){         ybias=ator(v); isBias=true; }
			case("xbiaspos"){      xBiasPos=ator(v); isBias=true; }
			case("ybiaspos"){      yBiasPos=ator(v); isBias=true; }
			case("mindist"){       minrad=ator(v); isFar=true; }
			case("maxdist"){       maxrad=ator(v); isNear=true; }
			case("speed"){         spd=ator(v);  isSpd=true; }
			case("maxspeed"){      mspd=ator(v); isMaxSpd=true; }
			case("personalspace"){ personalspace=ator(v); isPnlSpace=true; }
			case("weight"){        weight=ator(v); isWeight=true; }
		}
	}
	
	let isoverriding = Obj_IsValueExists(obj,"MovementManager");
	let hash = GetNextHash();
	Obj_SetValue(obj,"MovementManager",hash);
	if(!isoverriding){wait(del);}

	while(!Obj_IsDeleted(obj)) {
		while(Obj_GetValueD(obj,"move",1)==0 || Obj_GetValueD(obj,"cast",0)!=0){yield;}
		if(Obj_GetValueD(obj,"MovementManager",hash)!=hash){return;}
		
		let d=0;
		let x0 = ObjMove_GetX(obj); let y0 = ObjMove_GetY(obj);
		let x; let y;

		let ok=false; let tries=0;
		while(!ok && tries<100){
			
			alternative(movetype)
			case("playerbias"){ xBiasPos=px; yBiasPos=py; }
			case("selfbias"){   xBiasPos=x0; yBiasPos=y0; }
			case("objbias"){ xBiasPos=ObjRender_GetX(biasobj); yBiasPos=ObjRender_GetY(biasobj); }
			
			x=(xBiasPos*xbias+rand(x1,x2))/(xbias+1);
			y=(yBiasPos*ybias+rand(y1,y2))/(ybias+1);
			
			d = ((x-x0)^2+(y-y0)^2)^0.5;
			ok=true;
			if(isNear && d > maxrad){ ok=false; }
			if(isFar  && d < minrad){ ok=false; }
			//Don't move too close to the player
			if(isPnlSpace && ((px-x)^2+(py-y)^2)^0.5 < personalspace){ ok=false; }
			tries++;
		}
		
		let t = time;
		let s = d/t;
		
		if(isSpd || (isMaxSpd && s > mspd) ){
			s = max(spd,mspd);
			t = d/s;
		}
		
		if(!isWeight){ ObjMove_SetDestAtFrame(obj, x, y, t); }
		else{          ObjMove_SetDestAtWeight(obj, x, y, t, weight); }
		
		wait(del);
		
	}		
}













let INFO_COLOR = 0;
let INFO_THEME = 1;
let INFO_STAGE = 2;
let INFO_GAME  = 3;

function GetCharacterInfoA1(character,info){
	let C=[];
	let T=[]; // [primary theme, stage theme, other themes]
	let S=0;  //highest stage fought as the main boss of, or midboss if has never been main boss
	let G=""; //game most associated with
	
	let namearr = SplitString(character," ");
	let ok;
	ascent(i in 0..length(namearr)){
		let name = namearr[i];
		ok=true;
		
		alternative(name)
		case("Mystia")  	{ C=[196,128,255]; S=2; G="IN";   T=["Deaf to All but the Song", "Song of the Night Sparrow ~ Night Bird"]; }
		case("Reimu")   	{ C=[255,128,128]; S=4; G="IN";   T=["Maiden's Capriccio ~ Dream Battle"]; }
		case("Marisa")  	{ C=[128,128,255]; S=4; G="IN";   T=["Love-Colored Master Spark"]; }
		
		case("Minoriko")  	{ C=[196,255,128]; S=1; G="MoF";  T=["Because Princess Inada is Scolding Me","A God that Loves People ~ Romantic Fall"]; }
		case("Shizuha")  	{ C=[196,255,128]; S=1; G="MoF";  T=["Because Princess Inada is Scolding Me","A God that Loves People ~ Romantic Fall"]; }
		
		case("Satori")  	{ C=[255,128,196]; S=4; G="SA";   T=["Satori Maiden ~ Third Eye"]; }
		case("Koishi")  	{ C=[128,255,128]; S=7; G="SA";   T=["Hartmann's Youkai Girl", "Last Remote"]; }
		
		others{ok=false;}
		if(ok){break;}
	}
	
	alternative(info)
	case(INFO_COLOR){return C;}
	case(INFO_THEME){return T;}
	case(INFO_STAGE){return S;}
	case(INFO_GAME ){return G;}
	
}






