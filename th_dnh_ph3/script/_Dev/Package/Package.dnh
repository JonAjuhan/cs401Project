#TouhouDanmakufu[Package]
#Title["MAIN MENU"]
#Text["test"]
// #Player["./../player/Mokou/Mokou.dnh","./../player/Rumia/Rumia.dnh","./../player/Reimu/Reimu.txt","./../player/Reimu/Backup.txt","./../player/Mystia/Mystia.dnh"]
#Player["./../../player/Mokou/Mokou.dnh","./../../player/Rumia/Rumia.dnh","./../../player/Reimu/Reimu.txt","./../../player/Reimu/Backup.txt","./../../player/Mystia/Mystia.dnh"]

let version = "ver 0.38.15";

#include "./PackageFunctions.txt"
#include "./StageServiceFunctions.txt"
#include "./SatoriEye.dnh"
#include "./../Library/DirPaths.txt"
#include "./../Library/EventList.txt"
#include "./../Library/Difficulty.txt"
#include "./../Library/TypeFunctions.txt"


let PLAYER_REIMU  = dirfreeplayer~"Reimu/Reimu.txt";
// let PLAYER_MARISA = dirfreeplayer~"Reimu/Backup.txt";
let PLAYER_MARISA = dirfreeplayer~"Reimu/Reimu.txt";
let PLAYER_MOKOU  = dirfreeplayer~"Mokou/Mokou.dnh";
let PLAYER_RUMIA  = dirfreeplayer~"Rumia/Rumia.dnh";
let PLAYER_MYSTIA  = dirfreeplayer~"Mystia/Mystia.dnh";

// let player_names = ["Reimu","Marisa","Mokou","Rumia","Mystia"];
// let player_paths = [PLAYER_REIMU,PLAYER_MARISA,PLAYER_MOKOU,PLAYER_RUMIA,PLAYER_MYSTIA];
let player_names = ["Reimu","Mokou","Rumia"];
let player_paths = [PLAYER_REIMU,PLAYER_MOKOU,PLAYER_RUMIA];
SetCommonData("AllPlayerPaths",player_paths);

// let PLAYER_MARISA = dirplayer~"dcs_player/player_magic.txt";


//TODO!!!! "Shatter" screen effect using render targets for spellbreak
//See: Conarnar RaNGE 18 Koishi



let player = PLAYER_MOKOU;
let difficulty = 2;

let practicepath = "";

let ShowBackground = true;

//TODO: Press D key on main menu with debug enabled to select any script to run
//Maybe any file in dir even if the header is removed? 
//I'd like to be able to clean up some of the clutter-y scripts without impeding my ability to test them

//TODO: Swap positions of Option and Manual


let INDEX_START          = 0;
let INDEX_EXTRA          = 1;
let INDEX_PRACTICE       = 2;
let INDEX_SPELLPRACTICE  = 3;
let INDEX_REPLAY         = 4;
let INDEX_RESULT         = 5;
let INDEX_MUSICROOM      = 6;
let INDEX_OPTION         = 7;
let INDEX_HELP           = 8;
let INDEX_QUIT           = 9;
let INDEX_DEBUG          = 99; //By pressing D key with debug enabled


@Loading{
}


@Initialize{
	SetCommonData("IsPackage",true);
	// pausescript = LoadScript(dirsys~"Pause.txt");
	
	StartScript(LoadScriptInThread(dirlib~"Music.txt"));

	let isconfig = LoadCommonDataAreaA2("CONFIG",dirdat~"config.dat");
	if(!isconfig){ CreateCommonDataArea("CONFIG"); }
	
	let isscore  = LoadCommonDataAreaA2("SCORE", dirdat~"score.dat");
	if(!isscore){  CreateCommonDataArea("SCORE"); }

	SetAutoDeleteObject(true);
	SetCommonData("AllPlayerPaths",player_paths);
	
	TTitleImage();
	TMenu();
}

@Event{
	alternative(GetEventType)
	case(EV_FREEZE_STAGE){
		let args = GetEventArgument(0);
		let t; if(typeof(args[0])==TYPE_NUMBER){t=args[0];}
		else{ t=args[0][0]; }
		TFreezeStage(t);
		if(length(args)>0){
			TMoveObjects(args[1..length(args)-1]);
		}
		
	}
}


@MainLoop{
	yield;
}

@Finalize{}



let initialized = false;
let choicemain=0; let choicecfg=0; let choicediff=1; let choiceplayer=0;
let bx = 40; let by = 200; let priority = 10;
let dx = 32;

task TMenu{
	
	// if(!initialized){
		// StartScript(LoadScriptInThread(dirlib~"Music.txt"));
		// yield;
	// }else{
		// NotifyEventAll(EV_FADE_SONG,[]);
		// loop(60){yield;}
	// }
	NotifyEventAll(EV_SET_SONG,["Flawless Clothing of the Celestials"]);
	if(!initialized){
		loop(180){yield;} //wait for opening animation   //270
	}
	initialized=true;
	
	// let bx = 32; let by = 300; let priority = 10;
	
	
	
	loop{
		choicemain = MakeChoiceMainMenu(choicemain);
		  
		alternative(choicemain)
		//Start Game
		case(INDEX_START){
			SE_Play(se_confirm,100);
			if(SelectDifficulty()){
				SE_Play(se_confirm,100);
				if(SelectPlayer()){
					StartGame(MODE_MAIN_GAME);
				}
			}
		}
		//Extra
		case(INDEX_EXTRA){
			SE_Play(se_invalid,100);
		}
		//Practice
		case(INDEX_PRACTICE){
			// SE_Play(se_invalid,100);
			SE_Play(se_confirm,100);
			SelectSpellPractice(TYPE_SCRIPT_STAGE);
		}
		//Spell Practice
		case(INDEX_SPELLPRACTICE){
			// SE_Play(se_invalid,100);
			SE_Play(se_confirm,100);
			SelectSpellPractice(TYPE_SCRIPT_SINGLE);
		}
		//Replays
		case(INDEX_REPLAY){
			SE_Play(se_invalid,100);
		}
		//High scores
		case(INDEX_RESULT){
			SE_Play(se_confirm,100);
			ShowHighScoresSelect();
		}
		//Replays
		case(INDEX_MUSICROOM){
			SE_Play(se_confirm,100);
			SelectMusicRoom();
		}
		//Option
		case(INDEX_OPTION){
			SE_Play(se_confirm,100);
			
			SelectConfig();
			
		}
		//Manual
		case(INDEX_HELP){
			SE_Play(se_confirm,100);
			MakeManual(1);
		}
		//Quit
		case(INDEX_QUIT){
			ClosePackage;
		}
		
		case(INDEX_DEBUG){
			DebugMenu();
		}
		
	}
	
}




function SelectDifficulty(){
	choicediff = GetAreaCommonData("SCORE","PrevDifficultySelection",choicediff);
	let choice = MakeChoiceWindow(bx+1*dx,by, ["Easy","Normal","Hard","Lunatic"],choicediff,CANCEL_CLOSE, priority);
	if(choice!=-1){
		choicediff = choice;
		difficulty = choice+1;
		SetAreaCommonData("SCORE","PrevDifficultySelection",choicediff);
		SaveCommonDataAreaA2("SCORE",dirdat~"score.dat");
		return true;
	}else{
		return false;
	}
}

function SelectPlayer(){
	choiceplayer = GetAreaCommonData("SCORE","PrevPlayerSelection",choiceplayer);
	let choice = MakeChoicePlayer();
	if(choice!=-1){
		choiceplayer = choice;
		player = player_paths[choice];
		SetAreaCommonData("SCORE","PrevPlayerSelection",choiceplayer);
		SaveCommonDataAreaA2("SCORE",dirdat~"score.dat");
		return true;
	}
	else{
		SE_Play(se_cancel,100);
		return false;
	}
}

function SelectConfig(){
	let isconfig = LoadCommonDataAreaA2("CONFIG",dirdat~"config.dat");
	if(!isconfig){ CreateCommonDataArea("CONFIG"); }
	
	let SEVol = trunc(GetAreaCommonData("CONFIG","SE Volume",0.80)*100);
	let BGMVol = trunc(GetAreaCommonData("CONFIG","BGM Volume",0.80)*100);
	let FXQual = GetAreaCommonData("CONFIG","Effect Quality",2);
	
	let DebugMode = GetAreaCommonData("CONFIG","CheatEnable",false);
	
	let by1 = by+24*(choicemain-2);
	
	loop{
		MakeTextWindow(bx+1*dx+96,by1, [itoa(BGMVol),itoa(SEVol),itoa(FXQual), ["Off","On"][DebugMode],""]
		               ,choicecfg,CANCEL_CLOSE, priority);
		choicecfg = MakeChoiceWindow(bx+1*dx,by1, ["BGM","SE","Effect","Cheats","Back"]
		                             ,choicecfg,CANCEL_CLOSE, priority);
		alternative(choicecfg)
		//BGM
		case(0){
			SE_Play(se_confirm,100);
			let tmp=MakeMenuText(bx+1*dx,by1,choicecfg, "BGM", priority);
			BGMVol = MakeNumSelectWindow(bx+1*dx+96,by1,0, 0,100,1,BGMVol, priority);
			Obj_Delete(tmp);
		}
		//SE
		case(1){
			SE_Play(se_confirm,100);
			let tmp=MakeMenuText(bx+1*dx,by1,choicecfg, "SE", priority);
			SEVol = MakeNumSelectWindow(bx+1*dx+96,by1,1, 0,100,1,SEVol, priority);
			Obj_Delete(tmp);
		}
		//Effect
		case(2){
			SE_Play(se_confirm,100);
			let tmp=MakeMenuText(bx+1*dx,by1,choicecfg, "Effect", priority);
			FXQual = MakeNumSelectWindow(bx+1*dx+96,by1,2, 0,10,1,FXQual, priority);
			Obj_Delete(tmp);
		}
		//Debug Mode
		case(3){
			SE_Play(se_confirm,100);
			DebugMode = !DebugMode;
		}
		//Back
		case(4){
			SE_Play(se_confirm,100);
			choicecfg=0;
			break;
		}
		case(-1){
			choicecfg=GetCommonData("CancelIndex",0);
			break;
		}
		
	}
	
	SetAreaCommonData("CONFIG","SE Volume",SEVol*0.01);
	SetAreaCommonData("CONFIG","BGM Volume",BGMVol*0.01);
	SetAreaCommonData("CONFIG","Effect Quality",FXQual);
	SetAreaCommonData("CONFIG","CheatEnable",DebugMode);
	SaveCommonDataAreaA2("CONFIG",dirdat~"config.dat");
}






// let RESULT_CANCEL = 23;
// let RESULT_END = 24;
// let RESULT_RETRY = 25;

let MODE_MAIN_GAME      = "MainGame";
let MODE_EXTRA          = "Extra";
let MODE_PRACTICE_STAGE = "StagePractice";
let MODE_PRACTICE_SPELL = "SpellPractice";



function StartGame(mode){

	eyex0 = 458 + 60;
	eyey0 = 258 + 60;
	// eyey0 = 258 + 90;

	SetCommonData("PlayerScriptPath",player);
	SetDifficulty(difficulty);
	// ShowBackground=false;
	
	SetCommonData("GameMode",mode);
	

	alternative(mode)
	case(MODE_MAIN_GAME){
		let stages = [
		  dirstage~"Stage-7-Mystia-01.dnh",
		  dirstage~"Stage-7-SatoriKoishi-01.dnh"
		];
		RunStages(player,difficulty,stages);
	}
	case(MODE_PRACTICE_SPELL){
		SetCommonData("PracticeScriptPath",practicepath);
		RunStages(player, difficulty, [dirpack~"StagePracticeLauncher.dnh"]);
	}
	case(MODE_PRACTICE_STAGE){
		RunStages(player, difficulty, [practicepath]);
	}
	
	NotifyEventAll(EV_FADE_SONG,[]);
	loop(60){yield;}
	NotifyEventAll(EV_SET_SONG,["Flawless Clothing of the Celestials"]);	
	
}






//Handle actually running an array of stage scripts
function RunStages(player,difficulty,stages){
	MoveEyeToSidebar;
	let pauseresult=RESULT_CANCEL;

	InitializeStageScene;
	
	ascent(i in 0..length(stages)){
		
		CloseEye(15);
		
		SetCommonData("StageScriptPath",stages[i]);
		SetStageIndex(i);
		SetStageMainScript(stages[i]);
		SetStagePlayerScript(player);
		//
		yield;
		StartStageScene;
		
		ShowBackground = false;
		OpenEye(15);
		
		////////////////////////////////////////////////
		// let pauseresult = WaitForStageSceneEnd;
		pauseresult = RESULT_CANCEL;
		while(GetStageSceneState!=STAGE_STATE_FINISHED){
			yield;
			if(GetVirtualKeyState(VK_PAUSE)==KEY_PUSH){
				pauseresult = Pause;
				if(pauseresult==RESULT_END || pauseresult==RESULT_RETRY){
					// CloseAllScript;
					// TerminateStageScene;
					// while(GetStageSceneState!=STAGE_STATE_FINISHED){yield;}
					break;
				}
				pauseresult = RESULT_CANCEL;
			}else{pauseresult = RESULT_CANCEL;}
		}
		if(pauseresult!=RESULT_CANCEL){break;}
		////////////////////////////////////////////////
		
		alternative(GetStageSceneResult)
		case(STAGE_RESULT_CLEARED){ /*continue to next stage*/ }
		case(STAGE_RESULT_PLAYER_DOWN){ break; }
		case(STAGE_RESULT_BREAK_OFF){   break; }
	}
	CloseAllScript;
	TerminateStageScene;
	while(GetStageSceneState!=STAGE_STATE_FINISHED){yield;}
	FinalizeStageScene;
	/////////////////////////////////////////////////////////////
	// Game ended, determine what to do next
	/////////////////////////////////////////////////////////////
	// ShowBackground = true; //also handled in individ cases, maybe remove this one
	MoveEyeFromSidebar;
	if(pauseresult!=RESULT_CANCEL){ //if game ended from pause menu
		alternative(pauseresult)
		case(RESULT_RETRY){
			RunStages(player,difficulty,stages);
			return;
		}
		case(RESULT_END){
			ShowBackground=true;
			eyex0 = 458; eyey0 = 258;
			SetEyeDestAtFrame(458,258,120);
			
			// TMenu;
			return;
		}
	}
	else{ //if game ended by running out of lives or winning
		loop{
			let endresult = Gameover;
			
			alternative(endresult)
			case(RESULT_END){
				ShowBackground=true;
				eyex0 = 458; eyey0 = 258;
				SetEyeDestAtFrame(458,258,120);
				// TMenu;
				return;
			}
			case(RESULT_RETRY){
				// StartGame(difficulty,player,mode,path);
				RunStages(player,difficulty,stages);
				return;
			}
			case(RESULT_SAVE_REPLAY){
				//TODO
			}
			case(RESULT_CANCEL){
				//used continue - TODO
			}
		}
		
	}
	
	
	
	sub CloseAllScript{ //Not sure if this is doing anything
		
		CloseScript(GetCommonData(SCRIPT_SINGLE,ID_INVALID));
		CloseScript(GetCommonData(SCRIPT_PLURAL,ID_INVALID));
		CloseScript(GetCommonData(SCRIPT_STAGE,ID_INVALID));
		// NotifyEventAll(EV_END_BOSS_STEP,[]);
		NotifyEventAll(12,[]);
	}
	
}







function Pause{
	PauseStageScene(true);

	let pausescript = LoadScript(dirsys~"Pause.txt"); //
	StartScript(pausescript);

	while(!IsCloseScript(pausescript)){yield;}

	let pauseresult = GetScriptResult(pausescript);

	PauseStageScene(false);
	return pauseresult;
}

function Gameover{
	PauseStageScene(true);
	
	HighScoreEntry(); //TODO: Put this in end scene script instead?
	let endscript = LoadScript(dirsys~"EndScene.txt");
	StartScript(endscript);

	while(!IsCloseScript(endscript)){yield;}

	let endresult = GetScriptResult(endscript);

	PauseStageScene(false);
	return endresult;
}






let choicespellpractice = 0;
let choicestagepractice = 0;

function SelectSpellPractice(scripttype){
	practicepath = "";
	let choice=0; let script;
	let done = false;
	loop{
		let scripts = GetScriptPathList(dirroot,scripttype);
		//TODO: Sort scripts here?
		let names = [];
		ascent(i in 0..length(scripts)){
			names = names ~ [ GetScriptInfoA1(scripts[i],INFO_SCRIPT_TITLE) ];
		}
		
		if(GetAreaCommonData("CONFIG","CheatEnable",false)){TShowPath;}
		task TShowPath{
			let obj = MakeMenuText(40, 40, 1, "", 15);
			ObjRender_SetColor(obj,192,150,128);
			while(!done){
				let script = scripts[min(GetCommonData("SelectIndex",0),length(scripts)-1)];
				let dirs = SplitString(script,"/");
				let fname = dirs[length(dirs)-1]; 
				ObjText_SetText(obj, fname );
				yield;
			}
			Obj_Delete(obj);
		}
		
		TShowDescription();
		task TShowDescription{
			let obj = MakeMenuText(40, 120, 12, "", 15);
			// ObjRender_SetPosition(obj,40,240,0);
			ObjRender_SetColor(obj,128,150,192);
			while(!done){
				let script = scripts[min(GetCommonData("SelectIndex",0),length(scripts)-1)];
				let descr = GetScriptInfoA1(script,INFO_SCRIPT_TEXT);
				ObjText_SetText(obj, descr );
				yield;
			}
			Obj_Delete(obj);
		}
		
		if(scripttype==TYPE_SCRIPT_SINGLE){ choice = choicespellpractice; }
		else{ choice = choicestagepractice; }
		
		choice = MakeChoicePaged(40,120, names, choicespellpractice, 10, CANCEL_CLOSE, 15);
		if(choice==-1){done=true;return;}else{SE_Play(se_confirm,100);}
		
		if(scripttype==TYPE_SCRIPT_SINGLE){ choicespellpractice = choice; }
		else{ choicestagepractice = choice; }
		
		script = scripts[choice];
		
		while(SelectDifficulty()){
			if(SelectPlayer()){
				done = true;
				break;
			}
		}
		if(done){ break; }
		
		// if(SelectDifficulty() && SelectPlayer()){ //TODO: fix this so canceling the second goes back to the first
			// break;
		// }
		
	}
	done=true;
	practicepath = script;
	let mode = MODE_PRACTICE_SPELL;
	if(scripttype == TYPE_SCRIPT_STAGE){ mode = MODE_PRACTICE_STAGE; }
	StartGame(mode);
	
}











function SelectMusicRoom(){
	let song = "";
	let choice=0;
	loop{
		let songs = GetCommonData("MusicList",choice);
		
		choice = MakeChoicePaged(40,120, songs, choice, 10, CANCEL_CLOSE, 15);
		if(choice==-1){return;}else{SE_Play(se_confirm,100);}
		
		// SetBGM(songs[choice]);
		NotifyEventAll(EV_SET_SONG,[songs[choice]]);	
	}
}













task TTitleImage{
	let bgpath  = dirpack~"img/TitleBackground.png";
	let titpath = dirpack~"img/Title.png";
	
	//Background
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);    
	ObjPrim_SetTexture(bg, bgpath);
	Obj_SetRenderPriorityI(bg, 0);
	ObjSprite2D_SetSourceRect(bg, 0,0,639,479);
	ObjSprite2D_SetDestRect(bg,   0,0,639,479);
	
	//Title
	let tit = ObjPrim_Create(OBJ_SPRITE_2D);   
	ObjPrim_SetTexture(tit, titpath);
	Obj_SetRenderPriorityI(tit, 2);
	ObjSprite2D_SetSourceRect(tit, 0,0,513,255);
	ObjSprite2D_SetDestCenter(tit);
	
	//Title transparency? don't remember, so now it's just "titty"
	let titty = ObjPrim_Create(OBJ_SPRITE_2D); 
	ObjPrim_SetTexture(titty, titpath);
	Obj_SetRenderPriorityI(titty, 2);
	ObjSprite2D_SetSourceRect(titty, 0,0,513,255);
	ObjSprite2D_SetDestCenter(titty);
	ObjRender_SetBlendType(titty,BLEND_ADD_ARGB);
	ObjRender_SetAlpha(titty,0);
	
	let titx = GetScreenWidth * 0.35;
	let tity = GetScreenHeight* 0.2;
	let Dx = (titx-(-256));
	ObjRender_SetX(tit,-256); ObjRender_SetY(tit,tity);
	ObjRender_SetX(titty,titx); ObjRender_SetY(titty,tity);
	
	
	//Fade in background
	ascent(i in 0..30){
		ObjRender_SetAlpha(bg,((i+1)/30)*255);
		yield;
	}
	
	SatoriEye(); //Start eye task
	task DelEnterEye{loop(60){yield;} EnterEye(); }
	DelEnterEye();
	
	//Swooce in title
	ascent(i in 0..120){
		let t = ((i+1)/120)^2;
		ObjRender_SetX(tit,-256+Dx*t);
		ObjRender_SetScaleXYZ(tit, 0.1+2-t^0.5,2-t^0.5,1);
		ObjRender_SetAlpha(tit,255*t^0.5);
		yield;
	}
	TWitchTitty;
	
	// SatoriEye(); //Start eye task
	// EnterEye();
	

	
	//Manage title glow effect
	//This name originally had some meaning but I don't remember it
	//so now it's just TwitchTitty
	task TWitchTitty{ 
		let i = 0;
		ObjRender_SetX(titty,titx); ObjRender_SetY(titty,tity);
		ObjRender_SetScaleX(titty,ObjRender_GetScaleX(tit));
		ObjRender_SetScaleY(titty,ObjRender_GetScaleY(tit));
		while(ShowBackground){
			ObjRender_SetX(titty,titx); ObjRender_SetY(titty,tity);
			ObjRender_SetAlpha(titty, 128-128*cos(i));
			// ObjRender_SetAlpha(tit  , 196+ 64*cos(i));
			yield; i++;
		}
	}
	
	let ver = ObjText_Create;
	ObjText_SetText(ver,version);
	// ObjText_SetFontType(ver,"THSpatial");
	// ObjText_SetFontSize(ver,12);
	ObjText_SetFontSize(ver,8);
	ObjText_SetSidePitch(ver,2.5);
	ObjText_SetFontBorderColor(ver,0,0,0);
	ObjText_SetFontBorderWidth(ver,1);
	// ObjRender_SetColor(ver,128,128,128);
	// ObjRender_SetPosition(ver,titx+100,tity+60,0);
	let xoff = 13; let yoff = 5;
	ObjText_SetMaxWidth(ver,GetScreenWidth-2*xoff);
	// ObjText_SetHorizontalAlignment(ver,ALIGNMENT_RIGHT);
	ObjRender_SetPosition(ver,xoff,GetScreenHeight-5-yoff,0);
	
	ascent(i in 0..60){
		ObjRender_SetAlpha(ver,((i+1)/30)*32);
		yield;
	}
	
	
	
	//Fade out the background when needed
	loop{
		while(ShowBackground){ yield; }
		descent(i in 0..30){
			ObjRender_SetAlpha(bg,((i+1)/30)*255);
			ObjRender_SetAlpha(tit,((i+1)/30)*255);
			ObjRender_SetAlpha(titty,((i+1)/30)*255);
			// ObjRender_SetAlpha(ver,((i+1)/30)*128);
			ObjRender_SetAlpha(ver,((i+1)/30)*96);
			yield;
		}
		Obj_SetVisible(bg,false);
		Obj_SetVisible(tit,false);
		Obj_SetVisible(titty,false);
		Obj_SetVisible(ver,false);
		while(!ShowBackground){ yield; }
		ascent(i in 0..30){
			ObjRender_SetAlpha(bg,((i+1)/30)*255);
			ObjRender_SetAlpha(tit,((i+1)/30)*255);
			// ObjRender_SetAlpha(ver,((i+1)/30)*128);
			ObjRender_SetAlpha(ver,((i+1)/30)*96);
			yield;
		}
		Obj_SetVisible(bg,true);
		Obj_SetVisible(tit,true);
		Obj_SetVisible(titty,true);
		Obj_SetVisible(ver,true);
		TWitchTitty;
	}

}








function SelectReplay(){
	//TODO
}





function GetDefaultHighScoreValues(mode){
	alternative(mode)
	case(MODE_MAIN_GAME){      return [10000000,9000000,8000000,7000000,6000000,5000000,4000000,3000000,2000000,1000000]; }
	case(MODE_EXTRA){          return [10000000,9000000,8000000,7000000,6000000,5000000,4000000,3000000,2000000,1000000]; }
	case(MODE_PRACTICE_STAGE){ return [1000000,900000,800000,700000,600000,500000,400000,300000,200000,100000]; }
	case(MODE_PRACTICE_SPELL){ return [1000000,900000,800000,700000,600000,500000,400000,300000,200000,100000]; }
}
function GetDefaultHighScoreNames(mode){
	return ["MerryBel","Renkoko","SanaeGG","PatchE","Akyuun","Tenko104","TeiInaba","Kogasa:P","Cirno99","Mima"];
}



function HighScoreEntry(){
	let pri = 10;
	
	let score = GetScore();
	if(score==NULL){score=GetCommonData("TempScore",10);} //temp
	
	let character = GetCommonData("PlayerScriptPath",player);
	let diff = GetCommonData("Difficulty",difficulty);
	let mode = GetCommonData("GameMode",MODE_PRACTICE_SPELL);
	let replayname = GetScriptInfoA1(character,INFO_SCRIPT_REPLAY_NAME);
	let app = "";
	if(mode == MODE_PRACTICE_SPELL){
		let script = GetCommonData("SingleScriptPath",practicepath);
		let dirs = SplitString(script,"/");
		let fname; if(length(dirs)>0){ fname = dirs[length(dirs)-1]; }else{ fname="TEST"; }
		app = "|"~fname;
	}else if(mode == MODE_PRACTICE_STAGE){
		let script = GetCommonData("StageScriptPath",practicepath);
		let dirs = SplitString(script,"/");
		let fname; if(length(dirs)>0){ fname = dirs[length(dirs)-1]; }else{ fname="TEST"; }
		app = "|"~fname;
	}
	if(GetAreaCommonData("CONFIG","EnableCheats",false)){
		app = app ~ "|DEBUG";
	}
	let scorekey = "ListScores"~"|"~replayname~"|"~itoa(diff)~"|"~mode~app;
	let namekey  = "ListNames" ~"|"~replayname~"|"~itoa(diff)~"|"~mode~app;
	let scores = GetAreaCommonData("SCORE",scorekey,GetDefaultHighScoreValues(mode));
	let names  = GetAreaCommonData("SCORE",namekey, GetDefaultHighScoreNames (mode));
	//insert into list
	let ind = 10;
	while(ind>0 && scores[ind-1] < score){ ind--; } //Find position of score in list
	
	function insert(arr,i,v){
		let len = length(arr);
		loop(2){arr=arr~[arr[len-1]];}
		let left  = arr[0..i];
		let right = arr[i..length(arr)];
		arr = left~[v]~right;
		return arr[0..len];
	}
	scores = insert(scores,ind,score);
	names  = insert(names, ind,"");
	
	//Display high score table
	let NameRows  = [];
	let ScoreRows = [];
	ascent(i in 0..10){
		let NameObjs = MakeTextSprites(40,40+20*i,12, pri);
		let pref = vtos( "3s", itoa(i+1)~"." )~" ";
		SetTextSprites(NameObjs,pref~names[i]);
		let scorestr = "...... "~vtos( "12s", ""~itoa(scores[i]) );
		let ScoreObjs = MakeTextSprites(40+13*12,40+20*i,length(scorestr), pri);
		SetTextSprites(ScoreObjs, scorestr );
		NameRows = NameRows ~ [NameObjs];
		ScoreRows= ScoreRows~ [ScoreObjs];
	}
	
	//Enter name
	if(ind < length(names)){
		let name = MakeChoiceNameEntry(8,GetAreaCommonData("SCORE","PrevScoreName",""),ind);
		if(length(name)>0){ SetAreaCommonData("SCORE","PrevScoreName",name); }
		else{ name = GetAreaCommonData("SCORE","PrevScoreName","Nanashi"); }
	// if(ind < length(names)){
		names[ind] = name;
	}else{
		yield; while(!IsKeyPush(VK_OK) && !IsKeyPush(VK_CANCEL)){yield;}
	}
	
	SetAreaCommonData("SCORE",scorekey,scores);
	SetAreaCommonData("SCORE",namekey,names);
	SaveCommonDataAreaA2("SCORE",dirdat~"score.dat");
	
	ascent(i in 0..length(NameRows )){ascent(j in 0..length(NameRows [i])){Obj_Delete(NameRows [i][j]);}}
	ascent(i in 0..length(ScoreRows)){ascent(j in 0..length(ScoreRows[i])){Obj_Delete(ScoreRows[i][j]);}}
}




function ShowHighScoresAuto(){
	let character = GetCommonData("PlayerScriptPath",player);
	let diff = GetCommonData("Difficulty",difficulty);
	let mode = GetCommonData("GameMode",MODE_PRACTICE_SPELL);
	ShowHighScores(character,diff,mode,false);
}
function ShowHighScoresSelect(){
	while(SelectPlayer()){
		while(SelectDifficulty()){
			ShowHighScores(player,difficulty,MODE_MAIN_GAME,true);
		}
	}
}


function ShowHighScores(character,diff,mode,allow_switch){
	let pri = 10;
	
	let replayname = GetScriptInfoA1(character,INFO_SCRIPT_REPLAY_NAME);
	let app = "";
	if(mode == MODE_PRACTICE_SPELL){
		let script = GetCommonData("SingleScriptPath",practicepath);
		let dirs = SplitString(script,"/");
		let fname = dirs[length(dirs)-1];
		app = "|"~fname;
	}else if(mode == MODE_PRACTICE_STAGE){
		let script = GetCommonData("StageScriptPath",practicepath);
		let dirs = SplitString(script,"/");
		let fname = dirs[length(dirs)-1]; 
		app = "|"~fname;
	}
	if(GetAreaCommonData("CONFIG","EnableCheats",false)){
		app = app ~ "|DEBUG";
	}
	
	let score = GetScore();
	if(score==NULL){score=GetCommonData("TempScore",10);} //temp
	
	let scorekey = "ListScores"~"|"~replayname~"|"~itoa(diff)~"|"~mode~app;
	let namekey  = "ListNames" ~"|"~replayname~"|"~itoa(diff)~"|"~mode~app;
	let scores = GetAreaCommonData("SCORE",scorekey,GetDefaultHighScoreValues(mode));
	let names  = GetAreaCommonData("SCORE",namekey, GetDefaultHighScoreNames (mode));
	
	//Display high score table
	let NameRows  = [];
	let ScoreRows = [];
	ascent(i in 0..10){
		let NameObjs = MakeTextSprites(40,40+20*i,12, pri);
		let pref = vtos( "3s", itoa(i+1)~"." )~" ";
		SetTextSprites(NameObjs,pref~names[i]);
		let scorestr = "...... "~vtos( "12s", ""~itoa(scores[i]) );
		let ScoreObjs = MakeTextSprites(40+13*12,40+20*i,length(scorestr), pri);
		SetTextSprites(ScoreObjs, scorestr );
		NameRows = NameRows ~ [NameObjs];
		ScoreRows= ScoreRows~ [ScoreObjs];
	}
	
	yield;
	while(GetVirtualKeyState(VK_OK)!=KEY_FREE || GetVirtualKeyState(VK_CANCEL)!=KEY_FREE){yield;}
	
	let end = true;
	if(!allow_switch){
		while(!IsKeyPush(VK_OK) && !IsKeyPush(VK_CANCEL)){yield;}
	}else{
		end = false;
		loop{
			if(     IsKeyPush(VK_OK)){     end = true; break; }
			else if(IsKeyPush(VK_CANCEL)){ end = true; break; }
			else if(IsKey(VK_UP)){
				diff = max(1,diff-1);
				break;
			}
			else if(IsKey(VK_UP)){
				diff = min(4,diff+1);
				break;
			}
			else if(IsKeyPush(VK_LEFT)){
				alternative(character)
				case(PLAYER_REIMU ){ character = PLAYER_MOKOU; }
				case(PLAYER_MARISA){ character = PLAYER_REIMU; }
				case(PLAYER_MOKOU ){ character = PLAYER_MARISA; }
				break;
			}
			else if(IsKeyPush(VK_RIGHT)){
				alternative(character)
				case(PLAYER_REIMU ){ character = PLAYER_MARISA; }
				case(PLAYER_MARISA){ character = PLAYER_MOKOU; }
				case(PLAYER_MOKOU ){ character = PLAYER_REIMU; }
				break;
			}
			yield;
		}
	}
	
	ascent(i in 0..length(NameRows )){ascent(j in 0..length(NameRows [i])){Obj_Delete(NameRows [i][j]);}}
	ascent(i in 0..length(ScoreRows)){ascent(j in 0..length(ScoreRows[i])){Obj_Delete(ScoreRows[i][j]);}}
	
	if(end){
		SE_Play(se_cancel,100);
	}else{
		SE_Play(se_select,100);
		ShowHighScores(character,diff,mode,allow_switch);
	}
}





















function DebugMenu(){
	loop{
		let choice = MakeChoiceWindow(bx+1*dx,by, ["Misc","Single","Plural","Stage","All"],0,CANCEL_CLOSE, priority);
		alternative(choice)
		case(-1){break;}
		case(0){
			loop{
				let choice = MakeChoiceWindow(bx+1*dx,by, ["Name Entry","Set Score","HS Table","Clear Test HS tables"],0,CANCEL_CLOSE, priority);
				alternative(choice)
				case(-1){
					break;
				}
				case(0){
					HighScoreEntry();
				}
				case(1){
					let score = atoi(MakeChoiceNameEntry(9, itoa(10*floor(rand(10,10000))), 0 ));
					SetCommonData("TempScore",score);
				}
				case(2){
					ShowHighScoresSelect();
				}
				case(3){
					let keys = GetCommonDataValueKeyList("SCORE");
					ascent(i in 0..length(keys)){
						let comps = SplitString(keys[i],"|");
						ascent(j in 0..length(comps)){
							if(comps[j]=="TEST"){
								DeleteAreaCommonData("SCORE",keys[i]);
								break;
							}
						}
					}
					SE_Play(se_pichuun,100);
					//doesn't actually save it here but whatever
				}
			}
		}
		case(1,2,3,4){
			let type = [TYPE_SCRIPT_SINGLE,TYPE_SCRIPT_PLURAL,TYPE_SCRIPT_STAGE,TYPE_SCRIPT_ALL][choice-1];
			SelectSpellPractice(type);
		}
		choicemain = 0;
	}
}



