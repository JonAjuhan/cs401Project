#include "./../Library/selibrary.txt"
#include "./../Library/DirPaths.txt"
#include "./../Library/EventList.txt"

let CANCEL_CLOSE = 0;
let CANCEL_SELECTLAST = 1;
let CANCEL_CONFIRMLAST = 2;
let CANCEL_DISABLE = 3;
let CANCEL_SELECTFIRST = 4;

//from Book of Star Mythology
function MakeChoiceWindow(bx, by, select_texts, startindex, canceltype, t_priority){
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	let select_count = length(select_texts);
	let selectValue = startindex;
	SetCommonData("SelectIndex",selectValue);
	
	let objSelects = [];
	ascent(i in 0..select_count){
		let obj = MakeMenuText(bx+2*i,by,i,select_texts[i],t_priority);		
		objSelects = objSelects ~ [obj];
	}
	SetCommonData("obj",objSelects);
	
	ascent(i in 0..8){
		let tmp = (i+1)/8;
		ascent(i in 0..length(objSelects)){
			ObjRender_SetAlpha(objSelects[i], tmp*255);
		}
		yield;
	}
	loop{
		if(IsKey(VK_UP)) { 
			SE_Play(se_select,100);
			selectValue = (selectValue+select_count-1)%select_count;
			SetCommonData("SelectIndex",selectValue);
		}
		else if(IsKey(VK_DOWN)) { 
			SE_Play(se_select,100);
			selectValue = (selectValue+1)%select_count; 
			SetCommonData("SelectIndex",selectValue);
		}
		else if(IsKeyPush(VK_OK)) { 
			// SE_Play(se_confirm,100); //do this in each option so some can be disabled
			break; 
		}
		else if(IsKeyPush(VK_CANCEL)) {
			SetCommonData("CancelIndex",selectValue);
			if(canceltype!=3){ SE_Play(se_cancel,100); }
			else{ SE_Play(se_invalid,100); }
			alternative(canceltype)
			case(CANCEL_CLOSE){ selectValue = -1; break; } //close menu
			case(CANCEL_SELECTFIRST){ selectValue = 0; }
			case(CANCEL_SELECTLAST){ selectValue = select_count-1; } //select last option
			case(CANCEL_CONFIRMLAST){ //select last option, then confirm it
				if(selectValue != select_count-1){ selectValue = select_count-1; }
				else{ break; }
			}
			case(3){ } //disable cancel
		}
		
		if(startindex!=-1){
			ascent(i in 0..length(objSelects)){
				if (selectValue == i) { ObjRender_SetColor(objSelects[i], 255, 255, 255); }
				else { ObjRender_SetColor(objSelects[i], 128, 128, 128); }
			}
		}
		yield;
	}
	
	FadeOut;
	task FadeOut{
		descent(i in 0..8){
			let tmp = (i+1)/8;
			ascent(j in 0..length(objSelects)){
				ObjRender_SetAlpha(objSelects[j], tmp*255);
			}
			yield;
		}
		ascent(i in 0..length(objSelects)){Obj_Delete(objSelects[i]);}
	}
	
	return( selectValue );
}

//for text alongside choice window
function MakeTextWindow(bx, by, select_texts, startindex, canceltype, t_priority){
	task Manage{
		MakeChoiceWindow(bx, by, select_texts, startindex, canceltype, t_priority);
	}
	Manage;
	return GetCommonData("obj",NULL);
}





function MakeNumSelectWindow(bx, by, parentindex, lower,upper,incr,def, t_priority){
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	let selectValue = def;	
	let i = parentindex;
	
	let obj = MakeMenuText(bx,by,parentindex,itoa(def),t_priority);
	ObjRender_SetColor(obj, 255, 255, 255);
		
	ascent(i in 0 .. 8){
		let tmp = (i+1)/8;
		ObjRender_SetAlpha(obj, tmp*255);
		yield;
	}
	loop{
		if(IsKey(VK_LEFT)) { 
			selectValue = max(lower,min((selectValue-incr),upper));
			ObjText_SetText(obj,itoa(selectValue));
			if(GetCommonData("HOLDTIME_"~itoa(VK_LEFT), 0)==0 || (lower<selectValue&&selectValue<upper)){
				SE_Play(se_select,80);
			}
		}
		else if(IsKey(VK_RIGHT)) { 
			selectValue = max(lower,min((selectValue+incr),upper)); 
			ObjText_SetText(obj,itoa(selectValue));
			if(GetCommonData("HOLDTIME_"~itoa(VK_RIGHT), 0)==0 || (lower<selectValue&&selectValue<upper)){
				SE_Play(se_select,80);
			}
		}
		else if (IsKeyPush(VK_OK)){ 
			SE_Play(se_confirm,100);
			break; 
		}		
		else if (IsKeyPush(VK_CANCEL)){
			SE_Play(se_cancel,100);
			SetCommonData("CancelValue",selectValue);
			selectValue = def;
			break;
		}
		yield;
	}
	
	FadeOut;
	task FadeOut{
		descent(i in 0 .. 8){
			let tmp = (i+1)/8;
			ObjRender_SetAlpha(obj, tmp*255);
			yield;
		}
		Obj_Delete(obj);
	}

	return( selectValue );
}

function IsKey(vk){
	alternative(GetVirtualKeyState(vk))
	case(KEY_PUSH){return true;}
	case(KEY_FREE,KEY_PULL){return false;}
	case(KEY_HOLD){
		let hold = GetCommonData("HOLDTIME_"~itoa(vk), 0);
		if(hold==0){ KeyHoldListener(vk); }
		return (hold > 15 && hold%3==0);
	}
	//Increment counter as long as key is held.
	//Uses common data so same task keeps working
	//for repeated calls of parent function
	task KeyHoldListener(vk){
		let hold = 0;
		while(GetVirtualKeyState(vk)==KEY_HOLD){
			hold++;
			SetCommonData("HOLDTIME_"~itoa(vk), hold);
			yield;
		}
		SetCommonData("HOLDTIME_"~itoa(vk), 0)
	}
}
// function IsKeyPush(vk){ return (GetVirtualKeyState(vk)==KEY_PUSH); }
function IsKeyPush(vk){ return (GetVirtualKeyState(vk)==KEY_PULL); }



function MakeMenuText(bx, by, index, text, t_priority){
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	let i = index;
	
	let obj = ObjText_Create();
	ObjRender_SetPosition(obj, bx, by+i*24, 0);
	Obj_SetRenderPriorityI(obj, t_priority+1);
	// ObjText_SetFontType(obj, "MS Gothic");
	ObjText_SetFontType(obj, "THSpatial");
	ObjText_SetFontSize(obj, 20);
	ObjText_SetFontBold(obj, false);
	ObjText_SetLinePitch(obj, 8);
	ObjText_SetSidePitch(obj, -1);
	ObjText_SetMaxWidth(obj, GetScreenWidth-32);
	ObjText_SetText(obj, text);

	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderWidth(obj, 1);
	// ObjText_SetFontBorderColor(obj, 64, 64, 64);
	// ObjText_SetFontBorderColor(obj, 0, 0, 0);

	
	//--------------------------------------------
	//While somewhat pretty, this is horrendous.
	//Retained for possible use elsewhere,
	//but white text is much more readable!
	// let c = 64;
	// let v = 255-c;
	
	// let t = (by+i*24)/GetScreenHeight; let T = 1-t;
	// t*=360; T*=360;
	
	// let r = sin(t+0)  * 127 + 128;
	// let g = sin(t+120)* 127 + 128;
	// let b = sin(t+240)* 127 + 128;
	
	// ObjText_SetFontColorTop(   obj, r,g,b);
	// ObjText_SetFontColorBottom(obj, r,g,b);
	
	// let R = (r/255 * g/255 * b/512) * 255;
	// let G = (g/255 * b/255 * r/512) * 255;
	// let B = (b/255 * r/255 * g/512) * 255;
	// ObjText_SetFontBorderColor(obj,R,G,B);
	//--------------------------------------------
	
	ObjText_SetFontColorTop(   obj,255,255,255);
	ObjText_SetFontColorBottom(obj,255,255,255);
	ObjText_SetFontBorderColor(obj,0,0,0);
	
	
	ObjText_SetAutoTransCenter(obj, false);
	ObjText_SetTransCenter(obj, 0, 32);
	ObjRender_SetColor(obj, 255, 255, 255);
	// ObjRender_SetColor(obj, 128, 128, 128);
	
	return obj;
}







function ShowChoicesDisable(bx, by, disable_indexes, canceltype, t_priority){
	let texts = [];
	ascent(i in 0..length(disable_indexes)){
		if(disable_indexes[i]){ texts=texts~["-DISABLE-"]; }
		else{ texts=texts~[""]; }
	}
	let objSelects = MakeTextWindow(bx,by,texts,-1,canceltype,t_priority);
	ascent(i in 0..length(objSelects)){
		let obj = objSelects[i];
		// ObjRender_SetColor(obj, 128,0,0);
		ObjRender_SetColor(obj, 128,0,0);
		ObjText_SetSidePitch(obj, 4);
		ObjText_SetFontBold(obj,true);
		ObjText_SetFontSize(obj,14);
		ObjRender_SetY(obj,ObjRender_GetY(obj)+5);

		ObjText_SetFontColorTop(obj,255,255,255);
		ObjText_SetFontColorBottom(obj,255,255,255);
	}
}














function MakeChoiceMainMenu(startindex){
	let bx = 40;
	let by = 200;
	let priority = 10;
	
	let path = dirpack~"img/MenuSheet.png";
	let pathback = dirpack~"img/SelectBack.png";
	
	let enable = [true,GetAreaCommonData("SCORE","ExtraUnlocked",false),true,true,false,true,true,true,true,true];
	
	let rects = [];
	ascent(i in 0..10){
		rects = rects ~ [ [0, 32*i, 255, 32*i+31] ];
	}
	
	let objs = [];
	ascent(i in 0..10){
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(       obj, path);
		Obj_SetRenderPriorityI(   obj, priority);
		let r = rects[i];
		ObjSprite2D_SetSourceRect(obj, r[0],r[1],r[2],r[3]);
		ObjSprite2D_SetDestRect(obj,   bx+6*i,by+24*i,bx+255+6*i,by+24*i+31);
		
		ObjRender_SetColor(obj,128,128,128);
		if(!enable[i]){ObjRender_SetColor(obj, 64, 64, 64);}
		
		objs=objs~[obj];
	}
	let backs = [];
	ascent(i in 0..10){
		let back = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(       back, pathback);
		Obj_SetRenderPriorityI(   back, priority-1);
		let r = rects[i];
		ObjSprite2D_SetSourceRect(back, 0,0,255,31);
		ObjSprite2D_SetDestRect(back,   bx+6*i,by+24*i,bx+196+6*i,by+24*i+31);
		ObjRender_SetColor(back, 64,64,64);
		backs=backs~[back];
	}
	
	//Small yin-yangs to cap off selection backs
	let bracksL = [];
	let bracksR = [];
	ascent(i in 0..10){
		bracksL=bracksL~[MakeBracket(i,  0)];
		bracksR=bracksR~[MakeBracket(i,196)];
	}
	function MakeBracket(i,dx){
		let brack = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(       brack, path);
		Obj_SetRenderPriorityI(   brack, priority-1);
		ObjSprite2D_SetSourceRect(brack, 577,129,591,143);
		ObjSprite2D_SetDestCenter(brack);
		ObjRender_SetColor(brack, 64,64,64);
		ObjRender_SetX(brack, bx+6*i+dx);
		ObjRender_SetY(brack, by+3+24*i);
		return brack;
	}
	
	
	
	
	let curs_dx =  0; //-6  //-12
	let curs_dy =  9; //12
	let cursor  = MakeCursorSprite;
	let cursor2 = MakeCursorSprite;
	ObjRender_SetColor(cursor, 128,128,128);
	ObjRender_SetColor(cursor2,128,128,128);
	
	function MakeCursorSprite{
		let cursor = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(cursor, path);
		ObjSprite2D_SetSourceRect(cursor, 519,7,569,57);
		ObjSprite2D_SetDestCenter(cursor);
		Obj_SetRenderPriorityI(cursor,priority);
		ObjRender_SetAlpha(cursor,0);
		ObjRender_SetScaleXYZ(cursor,0.75,0.75,1);
		ObjRender_SetX(cursor, bx +6*startindex+curs_dx);
		// ObjRender_SetY(cursor, by+24*startindex+curs_dy);
		ObjRender_SetY(cursor, -96);
		return cursor;
	}
	ObjRender_SetX(cursor2, bx +6*startindex-curs_dx + 196);
	
	let select_count = length(objs);
	let selectValue = startindex;
	SetCommonData("SelectIndex",selectValue);
	
	FadeIn;
	task FadeIn{
		ascent(i in 0..30){ //8
			let tmp = (i+1)/30;
			ascent(i in 0..length(objs)){
				ObjRender_SetAlpha(objs[i], tmp*255);
				ObjRender_SetAlpha(backs[i], tmp*255);
				ObjRender_SetAlpha(bracksL[i], tmp*255);
				ObjRender_SetAlpha(bracksR[i], tmp*255);
				ObjRender_SetAlpha(cursor,tmp*255);
				ObjRender_SetAlpha(cursor2,tmp*255);
			}
			yield;
		}
	}
	loop(8){yield;}
	
	let ani = 0;
	let ani2 = 0;
	
	loop{
		if(IsKey(VK_UP)) { 
			SE_Play(se_select,100);
			selectValue = (selectValue+select_count-1)%select_count;
			SetCommonData("SelectIndex",selectValue);
			ani=ani2;
		}
		else if(IsKey(VK_DOWN)) { 
			SE_Play(se_select,100);
			selectValue = (selectValue+1)%select_count; 
			SetCommonData("SelectIndex",selectValue);
			ani=ani2;
		}
		else if(IsKeyPush(VK_OK)) { 
			// SE_Play(se_confirm,100); //do this in each option so some can be disabled
			break; 
		}
		else if(IsKeyPush(VK_CANCEL)) {
			SetCommonData("CancelIndex",selectValue);
			SE_Play(se_cancel,100);
			selectValue = select_count-1;
		}
		else if(GetKeyState(KEY_D)==KEY_PUSH && GetAreaCommonData("CONFIG","CheatEnable",false)){
			selectValue = 99;
			SetCommonData("SelectIndex",selectValue);
			break;
		}
		
		ascent(i in 0..length(objs)){
			if(selectValue == i) { 
				ObjRender_SetColor(objs[i], 255, 255, 255);
				ObjSprite2D_SetSourceRect(backs[i], 0-ani,0,255-ani%512,31);
				ObjRender_SetColor(backs[i], 128, 128, 128);
				Obj_SetVisible(bracksL[i],false); Obj_SetVisible(bracksR[i],false);
			}
			else { 
				ObjRender_SetColor(objs[i], 128, 128, 128);
				// ObjSprite2D_SetSourceRect(backs[i], 0-ani2,0,255-ani2,31);
				ObjSprite2D_SetSourceRect(backs[i], 0,0,255,31);
				ObjRender_SetColor(backs[i], 64,64,64);
				Obj_SetVisible(bracksL[i],true);  Obj_SetVisible(bracksR[i],true);
			}
			if(!enable[i]){ObjRender_SetColor(objs[i], 64, 64, 64);}
		}
		
		ani =  (ani +  2)%512;
		ani2 = (ani2+0.5)%512;
		let t = -cos(ani*180/64);		
		ObjRender_SetX(cursor, bx +6*selectValue+curs_dx);
		ObjRender_SetY(cursor, by+24*selectValue+16+curs_dy*t);
		ObjRender_SetAngleZ(cursor, 3*(ani2*180/256));

		// t =      cos(ani*180/64+196);
		t = -cos(ani*180/64-64);
		ObjRender_SetX(cursor2, bx +6*selectValue-curs_dx + 196);
		ObjRender_SetY(cursor2, by+24*selectValue+16-t+curs_dy*t);
		ObjRender_SetAngleZ(cursor2,3*(ani2*180/256)+180);
		
		yield;
	}
	
	FadeOut;
	task FadeOut{
		descent(i in 0..8){
			let tmp = (i+1)/8;
			ascent(j in 0..length(objs)){
				ObjRender_SetAlpha(objs[j],  tmp*255);
				ObjRender_SetAlpha(backs[j], tmp*255);
				ObjRender_SetAlpha(bracksL[j], tmp*255);
				ObjRender_SetAlpha(bracksR[j], tmp*255);
				ObjRender_SetAlpha(cursor,   tmp*255);
				ObjRender_SetAlpha(cursor2,   tmp*255);
			}
			yield;
		}
		ascent(i in 0..length(objs)){Obj_Delete(objs[i]);}
		ascent(i in 0..length(backs)){Obj_Delete(backs[i]);}
		ascent(i in 0..length(bracksL)){Obj_Delete(bracksL[i]);}
		ascent(i in 0..length(bracksR)){Obj_Delete(bracksR[i]);}
		Obj_Delete(cursor);
		Obj_Delete(cursor2);
	}
	
	return( selectValue );
}


















function MakeManual(page){
	let PageCount = 3;
	let priority = 10;
	
	let path = dirpack~"img/Manual_"~itoa(page)~".png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(       obj, path);
	Obj_SetRenderPriorityI(   obj, priority);
	ObjSprite2D_SetSourceRect(obj,0,0,640,480);
	ObjSprite2D_SetDestRect(  obj,0,0,640,480);
	
	let shad = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(       shad, path);
	Obj_SetRenderPriorityI(   shad, priority-1);
	ObjSprite2D_SetSourceRect(shad,0,0,640,480);
	ObjSprite2D_SetDestRect(  shad,2,2,642,482);
	ObjRender_SetColor(shad,0,0,0);
	
	let pathbg = dirpack~"img/black.png";
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(       bg, pathbg);
	Obj_SetRenderPriorityI(   bg, priority-2);
	ObjSprite2D_SetSourceRect(bg,0,0,640,480);
	ObjSprite2D_SetDestRect(  bg,0,0,640,480);
	
	
	FadeIn;
	task FadeIn{
		ascent(i in 0..15){ //8
			let tmp = (i+1)/15;
			ObjRender_SetAlpha(obj,tmp*255);
			ObjRender_SetAlpha(shad,tmp*255);
			ObjRender_SetAlpha( bg,tmp*128);
			yield;
		}
	}
	loop(8){yield;}
	
	let next = -1;
	
	loop{
		if(IsKeyPush(VK_LEFT) || IsKeyPush(VK_UP)) { 
			if(page > 1){
				SE_Play(se_confirm,100);
				next = page-1;
				break;
			}else{
				SE_Play(se_invalid,100);
			}
		}else if(IsKeyPush(VK_RIGHT) || IsKeyPush(VK_DOWN)) { 
			if(page < PageCount){
				SE_Play(se_confirm,100);
				next = page+1;
				break;
			}else{
				SE_Play(se_invalid,100);
			}
		}
		else if(IsKeyPush(VK_CANCEL) || IsKeyPush(VK_OK)) {
			SE_Play(se_cancel,100);
			break;
		}
		
		yield;
	}
	
	FadeOut;
	task FadeOut{
		descent(i in 0..15){ //8
			let tmp = (i+1)/15;
			ObjRender_SetAlpha(obj,tmp*255);
			ObjRender_SetAlpha(shad,tmp*255);
			ObjRender_SetAlpha( bg,tmp*128);
			yield;
		}
		Obj_Delete(obj);
		Obj_Delete(shad);
		Obj_Delete( bg);
	}
	
	if(next!=-1){
		MakeManual(next);
	}
	
	return;
}






















function MakeChoicePaged(bx, by, select_texts, startindex, perpage, canceltype, t_priority){
	let baseWidth = GetStgFrameWidth;
	let baseHeight = 96;
	let baseX = GetStgFrameLeft;
	let baseY = GetStgFrameTop + GetStgFrameHeight - baseHeight;
	let baseTextX = baseX+16;
	let baseTextY = baseY+10;
	
	let select_count = length(select_texts);
	let page_count = ceil(select_count/perpage);
	
	let selectValue = startindex;
	let selectPage = floor(startindex/perpage);
	SetCommonData("SelectIndex",selectValue);
	
	let objSelects = [];
	ascent(i in 0..select_count){
		let obj = MakeMenuText(bx+1*(i%perpage),by,i%perpage,select_texts[i],t_priority);
		ObjRender_SetColor(obj,128,128,128);
		objSelects = objSelects ~ [obj];
	}
	SetCommonData("obj",objSelects); //can retrieve it from another task
	
	let objPageIcons = [];
	ascent(i in 0..page_count){
		let obj = MakeSprite2(dirpack~"img/MenuSheet.png",t_priority,[577,129,591,143],[7,7]);
		ObjRender_SetPosition(obj, bx + 24*i, by-16, 0);
		ObjRender_SetColor(obj,128,128,128);
		objPageIcons = objPageIcons ~ [obj];
	}
	
	
	let bg = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(       bg, dirpack~"img/black.png");
	Obj_SetRenderPriorityI(   bg, t_priority-1);
	ObjSprite2D_SetSourceRect(bg,0,0,640,480);
	ObjSprite2D_SetDestRect(  bg,0,0,640,480);
	FadeinBG;
	task FadeinBG{
		ascent(i in 0..8){ ObjRender_SetAlpha( bg,(i+1)/8*128); yield; }
	}
	
	
	function FadeinPage{
		selectPage = floor(selectValue/perpage);
		ascent(i in 0..length(objPageIcons)){
			let obj=objPageIcons[i];
			if(i!=selectPage){ ObjRender_SetColor(obj,128,128,128); }else{ ObjRender_SetColor(obj,255,255,255); }
		}
		task ManageFade{
			ascent(i in 0..8){
				let tmp = (i+1)/8;
				ascent(i in 0..length(objSelects)){
					Obj_SetVisible(objSelects[i], floor(i/perpage)==selectPage);
					ObjRender_SetAlpha(objSelects[i], tmp*255);
				}
				yield;
			}
		}
		ManageFade;
		loop(4){yield;}
	}
	
	FadeinPage;
	
	loop{
		if(IsKey(VK_UP)) { 
			SE_Play(se_select,100);
			selectValue = selectPage*perpage+(selectValue%perpage+perpage-1)%perpage;
			// if(selectValue>=select_count){ selectValue = (page_count-1)*perpage + (perpage-(select_count%perpage-1)); }
			if(selectValue>=select_count){ selectValue = max( (page_count-1)*perpage + (perpage-(select_count%perpage-1)), select_count-1 ); }
			SetCommonData("SelectIndex",selectValue);
			if(floor(selectValue/perpage)!=selectPage){FadeinPage;}
		}
		else if(IsKey(VK_DOWN)) { 
			SE_Play(se_select,100);
			selectValue = selectPage*perpage+(selectValue%perpage+1)%perpage;
			if(selectValue>=select_count){ selectValue = select_count - select_count%perpage; }
			SetCommonData("SelectIndex",selectValue);
			if(floor(selectValue/perpage)!=selectPage){FadeinPage;}
		}
		if(IsKey(VK_RIGHT)) { 
			SE_Play(se_select,100);
			let prevPage = selectPage;
			selectPage = (selectPage+1)%page_count;
			selectValue = min(select_count-1, selectPage*perpage + selectValue%perpage);
			
			SetCommonData("SelectIndex",selectValue);
			if(selectPage!=prevPage){FadeinPage;}
		}
		else if(IsKey(VK_LEFT)) { 
			SE_Play(se_select,100);
			let prevPage = selectPage;
			selectPage = (selectPage+page_count-1)%page_count;
			selectValue = min(select_count-1, selectPage*perpage + selectValue%perpage);
			
			SetCommonData("SelectIndex",selectValue);
			if(selectPage!=prevPage){FadeinPage;}
		}
		if(IsKeyPush(VK_OK)) { 
			// SE_Play(se_confirm,100); //do this in each option so some can be disabled
			break; 
		}
		else if(IsKeyPush(VK_CANCEL)) {
			SetCommonData("CancelIndex",selectValue);
			if(canceltype!=3){ SE_Play(se_cancel,100); }
			else{ SE_Play(se_invalid,100); }
			alternative(canceltype)
			case(CANCEL_CLOSE){ selectValue = -1; break; } //close menu
			case(CANCEL_SELECTFIRST){ selectValue = 0; }
			case(CANCEL_SELECTLAST){ selectValue = select_count-1; } //select last option
			case(CANCEL_CONFIRMLAST){ //select last option, then confirm it
				if(selectValue != select_count-1){ selectValue = select_count-1; }
				else{ break; }
			}
			case(3){ } //disable cancel
		}
		
		if(startindex!=-1){
			ascent(i in 0..length(objSelects)){
				if (selectValue == i) { ObjRender_SetColor(objSelects[i], 255, 255, 255); }
				else { ObjRender_SetColor(objSelects[i], 128, 128, 128); }
			}
		}
		SetCommonData("SelectIndex",selectValue);
		yield;
	}
	
	FadeOut;
	task FadeOut{
		descent(i in 0..8){
			let tmp = (i+1)/8;
			ascent(j in 0..length(objSelects)){
				ObjRender_SetAlpha(objSelects[j], tmp*255);
			}
			ascent(j in 0..length(objPageIcons)){
				ObjRender_SetAlpha(objPageIcons[j], tmp*255);
			}
			yield;
			ObjRender_SetAlpha( bg,(i+1)/8*128);
		}
		ascent(i in 0..length(objSelects)){Obj_Delete(objSelects[i]);}
		ascent(i in 0..length(objPageIcons)){Obj_Delete(objPageIcons[i]);}
		Obj_Delete(bg);
	}
	
	return( selectValue );
}










let sheet = 
	" "
   ~"!\"#$%&'()*+,-./01"
   ~"23456789:;<=>?@ABC"
   ~"DEFGHIJKLMNOPQRSTU"
   ~"VWXYZ[\\]^_ abcdefg"
   ~"hijklmnopqrstuvwxy"
   ~"z{|}~```" 
   //BS, END, SPACE
;

function getsheetpos(ch){
	ascent(i in 0..length(sheet)){
		if(sheet[i]==ch){ return i; }
	}
	return NULL;
}

function getrect(i){
	let x = 14*(i%18);
	let y = 14*floor(i/18);
	// let x = (14*i)%256;
	return [x,y,x+14,y+14];
}

let lines = [
	"ABCDEFGHIJKLM",
	"NOPQRSTUVWXYZ",
	"abcdefghijklm",
	"nopqrstuvwxyz",
	"0123456789+-=",
	".,!?@:;[]()_/",
	"{}|~^#$%&* ``"
];





function MakeChoiceNameEntry(maxlength,initstr, entry_row){
	let path = dirpack~"img/ascii.png";
	let pri = 19;
	let str = initstr;
	let pref = vtos( "3s", itoa(entry_row+1)~"." )~" ";
		
	//positioning for "keyboard"
	let dx = 20;
	let dy = dx;
	let cx = GetScreenWidth/2;
	let bx = cx - dx*6.5;
	let by = 240+40;
	//positioning for entry
	let Bx = 40;
	let By = 40+20*entry_row;
	
	let objs = [];
	
	ascent(j in 0..length(lines)){
		ascent(i in 0..length(lines[j])){
			let ch = lines[j][i];
			let rect = getrect( getsheetpos(ch) );
			
			let obj = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(obj,path);
			ObjSprite2D_SetSourceRect(obj,rect[0],rect[1],rect[2],rect[3]);
			ObjSprite2D_SetDestCenter(obj);
			ObjRender_SetPosition(obj, bx+dx*i, by+dy*j,0);
			Obj_SetRenderPriorityI(obj,pri);
			
			objs = objs ~ [obj];
		}
	}
	//Manually go back and change the rects for space, BS, OK
	ascent(i in 1..4){
		let rect = getrect(length(sheet)-(1+i%3));
		let obj = objs[length(objs)-i];
		ObjSprite2D_SetSourceRect(obj, rect[0],rect[1],rect[2],rect[3]);		
		ObjSprite2D_SetDestCenter(obj);
	}
	
	let sobjs = MakeTextSprites(Bx,By,maxlength+length(pref),pri);
	SetTextSprites(sobjs,pref~str);
	ascent(i in 0..length(sobjs)){
		ObjRender_SetColor(sobjs[i],255,192,128);
	}
	
	// ^Making sprites
	//////////////////////////////////////////////////////////////////////
	// vDoing things with them
	
	while(GetVirtualKeyState(VK_OK)!=KEY_FREE || GetVirtualKeyState(VK_CANCEL)!=KEY_FREE){yield;}
	
	let X=0;
	let Y=0;
	let hor = 13;
	let ver = 7;
	if(length(str)>0){ X=12; Y=6; }
	
	yield;
	loop{
		if(IsKey(VK_UP)) { 
			SE_Play(se_select,100);
			Y = (Y+ver-1)%ver;
		}
		else if(IsKey(VK_DOWN)) { 
			SE_Play(se_select,100);
			Y = (Y+1)%ver;
		}
		if(IsKey(VK_RIGHT)) { 
			SE_Play(se_select,100);
			X = (X+1)%hor;
		}
		else if(IsKey(VK_LEFT)) { 
			SE_Play(se_select,100);
			X = (X+hor-1)%hor;
		}
		if(IsKeyPush(VK_OK)) { 
			SE_Play(se_confirm,100);
			if(X+Y*hor == hor*ver-1 ){
				break;
			}else if(X+Y*hor == hor*ver-2 ){
				if(length(str) > 0){ str = str[0..length(str)]; }
			}else if(length(str) < maxlength){
				str = str ~ [ lines[Y][X] ];
			}else{
				str = str[0..maxlength-1] ~ [ lines[Y][X] ];
			}
			SetTextSprites(sobjs,pref~str);
		}
		else if(IsKeyPush(VK_CANCEL)) {
			SE_Play(se_cancel,100);
			if(length(str) > 0){
				str = str[0..length(str)-1];
				SetTextSprites(sobjs,pref~str);
			}else{
				break;
			}
		}
		
		ascent(i in 0..length(objs)){
			let x = (i%hor);
			let y = floor(i/hor);
			if(x==X && y==Y){
				ObjRender_SetColor(objs[i],255,255,255);
			}else{
				ObjRender_SetColor(objs[i],128,128,128);
			}
		}
		
		
		// ascent(i in 0..length(sobjs)){
			// let ind = NULL;
			// if(length(inds) > i){ ind = inds[i]; }
			// let rect = getrect(ind);
			// ObjSprite2D_SetSourceRect(sobjs[i],rect[0],rect[1],rect[2],rect[3]);
		// }
		
		yield;
	}
	
	
	ascent(i in 0..length(objs)){
		Obj_Delete(objs[i]);
	}
	ascent(i in 0..length(sobjs)){
		Obj_Delete(sobjs[i]);
	}
	
	
	
	return str;
}





function MakeTextSprites(x,y,maxlength,pri){
	let path = dirpack~"img/ascii.png";
	let sobjs = [];
	ascent(i in 0..maxlength){
		let rect = getrect(0);		
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj,path);
		ObjSprite2D_SetSourceRect(obj,rect[0],rect[1],rect[2],rect[3]);
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetPosition(obj, x+12*i, y,0);
		Obj_SetRenderPriorityI(obj,pri);
		
		sobjs = sobjs ~ [obj];
	}
	return sobjs;
}

function SetTextSprites(sobjs,str){
	ascent(i in 0..length(sobjs)){
		let ind = NULL;
		if(length(str) > i){ ind = getsheetpos(str[i]); }
		let rect = getrect(ind);
		ObjSprite2D_SetSourceRect(sobjs[i],rect[0],rect[1],rect[2],rect[3]);
	}
}

















function MakeChoicePlayerOld(){ //WIP
	let priority = 10;
	
	let X0 = GetScreenWidth/2;
	let Y0 = GetScreenHeight/2;
	
	// let Dx = 100;
	let Dx = 400;
	let Dy = 20;
	
	//Running index relative to original array,
	//rather than the array holding the sprites that keeps getting shuffled around
	let ind = GetAreaCommonData("SCORE","PrevPlayerSelection",0);
	
	// let players = GetCommonData("AllPlayerPaths",player_paths); 
	let players = GetCommonData("AllPlayerPaths",[]); //don't rely on globals being defined
	
	let len = length(players);
	let mx = Dx*length(players)/2; //TODO test, with both parities
	// let mx = GetScreenWidth/2 * 1/Dx*len ;
	// let mx = GetScreenWidth/2;
	
	let objs = [];
	// let imgs=[]; let titles=[]; let texts=[];
	
	ascent(i in 0..len){
		let img   = GetScriptInfoA1(players[i],INFO_SCRIPT_IMAGE);
		let title = GetScriptInfoA1(players[i],INFO_SCRIPT_TITLE);
		let text  = GetScriptInfoA1(players[i],INFO_SCRIPT_TEXT);
		LoadTexture(img);
		
		// let obj = MakeSprite1(img,priority, [1,1,GetTextureWidth(img)-1,GetTextureHeight(img)-1]);
		let obj = MakeSprite1(img,priority, [0,0,449,499]);
		ObjRender_SetScaleXYZ(obj,0.75,0.75,1);
		ObjRender_SetY(obj,Y0);
		// ObjRender_SetX(obj, X0+(Dx*(i-ind))%mx );
		ObjRender_SetX(obj, X0+(Dx*(i-ind))%mx );
		ObjRender_SetColor(obj,128,128,128);
		
		WriteLog(title);
		WriteLog(text);
		WriteLog(img);
		WriteLog(obj);
		
		objs=objs~[obj]; 
		// imgs=imgs~[img]; titles=titles~[title]; texts=texts~[text];
	}
	
	//Rotate array to put desired selection at index 0
	function Shift(change){
		let tmp=[]; let tmp2=[];
		ascent(i in 0..len){
			tmp=tmp~  [ objs[    (i+len-change)%len ] ];
			tmp2=tmp2~[ players[ (i+len-change)%len ] ];
		}
		objs = tmp;
		players = tmp2;
		ind = (ind+change)%len;
	}
	
	//Move each object to the appropriate position for its index
	sub UpdatePos{
		ascent(i in 0..len){ MoveToPos(i); }
		task MoveToPos(i){
			let obj = objs[i];
			// WriteLog("Move "~itoa(obj)~" (ind "~itoa(i)~") to position");
			let x0 = ObjRender_GetX(obj);
			// let x1 = X0+(Dx*i)%mx;
			let x1 = X0+(Dx*i); if( x1 > X0+mx){x1 -= 2*mx;}
			let dx = x1-x0;
			// WriteLog("From "~itoa(x0)~" to "~itoa(x1)~" (dx="~itoa(dx)~")");
			if((|dx|) > mx){ ObjRender_SetX(obj,x1); return; } //don't visibly fly across the whole screen
			let al0 = 128; if( (|x0-X0|) < Dx/2 ){ al0=255; }
			let al1 = 128; if(i==0){ al1=255; }
			let dAl = al1-al0;
			descent(j in 0..8){
				ObjRender_SetX(obj, x1-dx*j/8);
				ObjRender_SetColor(obj,al1-dAl*j/8,al1-dAl*j/8,al1-dAl*j/8);
				yield;
			}
			ObjRender_SetX(obj,x1);
			// WriteLog("Done moving "~itoa(obj)~" (ind "~itoa(i)~") to position");
			// WriteLog("Final position "~itoa(ObjRender_GetX(obj)));
		}
	}
	
	
	

	Shift(-ind); //arrange array with selection at 0
	UpdatePos;
	
	loop{
		if(IsKey(VK_RIGHT)){
			Shift(-1);
			UpdatePos;
			SE_Play(se_select,100);
		}
		if(IsKey(VK_LEFT)){
			Shift(1);
			UpdatePos;
			SE_Play(se_select,100);
		}
		if(IsKey(VK_OK)){
			SE_Play(se_confirm,100);
			break;
		}
		if(IsKey(VK_CANCEL)){
			SE_Play(se_cancel,100);
			ind = -1;
			break;
		}
		yield;
	}
	
	ascent(i in 0..length(objs)){Obj_Delete(objs[i]);}
	
	return ind;
}




function MakeChoicePlayer(){ //WIP
	let priority = 10;
	
	let X0 = GetScreenWidth/2;
	let Y0 = GetScreenHeight/2;
	
	// let Dx = 350; //400
	let Dx = 450; //400
	let Dy = 20;
	
	let ind = GetAreaCommonData("SCORE","PrevPlayerSelection",0);
	let players = GetCommonData("AllPlayerPaths",[]); //don't rely on globals being defined
	
	let len = length(players);
	let mx = Dx*length(players)/2; //TODO test, with both parities
	
	let objs = [];
	let imgs = [];
	
	function GetOffset(i){
		let off = Dx*(i-ind);
		// if(off > mx){ off-=2*mx; }
		return off;
	}
	
	ascent(i in 0..len){
		let img   = GetScriptInfoA1(players[i],INFO_SCRIPT_IMAGE);
		LoadTexture(img);
		
		let obj = MakeSprite1(img,priority, [0,0,449,499]);
		// ObjRender_SetScaleXYZ(obj,0.75,0.75,1);
		ObjRender_SetScaleXYZ(obj,0.85,0.85,1);
		ObjRender_SetY(obj,Y0);
		ObjRender_SetX(obj, X0+GetOffset(i) );
		ObjRender_SetColor(obj,128,128,128);
		
		objs=objs~[obj]; 
		imgs=imgs~[img];
	}
	
	//Move each object to the appropriate position
	sub UpdatePos{
		ascent(i in 0..len){ MoveToPos(i); }
		task MoveToPos(i){
			let obj = objs[i];
			let x0 = ObjRender_GetX(obj);
			let x1 = X0+GetOffset(i);
			let dx = x1-x0;
			// let al0 = 128; if( (|x0-X0|) < Dx/2 ){ al0=255; }
			let al0 = 128; if( (|x0-X0|) < Dx/2 ){ al0=255; } //if it was previously selected
			let al1 = 128; if( i==ind ){ al1=255; }
		
			// if((|dx|) > mx){ 
			// if((|dx|) > 1.5*mx){ 
			// if(   ObjRender_GetX(obj)-GetTextureWidth(imgs[i])/2 > GetScreenWidth
			   // || ObjRender_GetX(obj)+GetTextureWidth(imgs[i])/2 < 0 ){ 
				// ObjRender_SetX(obj,x1); 
				// ObjRender_SetColor(obj,al1,al1,al1); 
				// return; 
			// } //don't visibly fly across the whole screen
			
			let dAl = al1-al0;
			descent(j in 0..8){
				ObjRender_SetX(obj, x1-dx*j/8);
				ObjRender_SetColor(obj,al1-dAl*j/8,al1-dAl*j/8,al1-dAl*j/8);
				
				if(ObjRender_GetX(obj)-GetTextureWidth(imgs[i])*ObjRender_GetScaleX(obj) > X0+mx){
					ObjRender_SetX(obj, X0-mx);
				}else if(ObjRender_GetX(obj)+GetTextureWidth(imgs[i])*ObjRender_GetScaleX(obj) < X0-mx){
					ObjRender_SetX(obj, X0+mx);
				}
					
				yield;
			}
			ObjRender_SetX(obj,x1);
		}
	}
	UpdatePos;
	
	loop{
		if(IsKey(VK_RIGHT)){
			SE_Play(se_select,100);
			ind = (ind+1)%len;
			UpdatePos;
			loop(8){yield;if(GetVirtualKeyState(VK_RIGHT)==KEY_PULL){break;}}
		}
		if(IsKey(VK_LEFT)){
			SE_Play(se_select,100);
			ind = (ind+len-1)%len;
			UpdatePos;
			loop(8){yield;if(GetVirtualKeyState(VK_LEFT)==KEY_PULL){break;}}
		}
		if(IsKey(VK_OK)){
			SE_Play(se_confirm,100);
			break;
		}
		if(IsKey(VK_CANCEL)){
			SE_Play(se_cancel,100);
			ind = -1;
			break;
		}
		yield;
	}
	
	ascent(i in 0..length(objs)){Obj_Delete(objs[i]);}
	
	return ind;
}




















function MakeSprite1(img, priority, source){
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img);
	Obj_SetRenderPriorityI(obj, priority);
	ObjSprite2D_SetSourceRect(obj, source[0], source[1], source[2], source[3]);
	ObjSprite2D_SetDestCenter(obj);
	return obj;
}





function MakeSprite2 (texture, priorityInt, source, center ) {
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, texture);
	Obj_SetRenderPriorityI(obj, priorityInt);
	ObjSprite2D_SetSourceRect(obj, source[0], source[1], source[2], source[3]);
	ObjSprite2D_SetDestRect(  obj, -center[0], -center[1], source[2]-source[0]-center[0], source[3]-source[1]-center[1]);
	return obj;
}

