#include "./../Library/Resources.txt"
#include "./../Library/DirPaths.txt"
#include "./../Library/EventList.txt"
#include "./../Library/MiscConstants.txt"
#include "./../Library/selibrary.txt"
#include "./../Library/ExtendedDNF.txt"


//EV_END_BOSS_STEP, EV_TIMEOUT, EV_






//actual one
let dirCurrent = GetCurrentScriptDirectory();
let typeEnd = 0;
let END_FAILED = 1;
let END_SUCCESS = 2;
let bMiss = false;
let bSurvival = false;
let bLastSpell = false;
let timer;
// let text = ObjText_Create();


let mc_count = 0;
let initializing = true;

let quality;


@Initialize{
	TInitialize;
}
@Event{
	alternative(GetEventType())
	case(EV_END_BOSS_STEP){
		bMiss = ( ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) > 0
		           || ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) > 0 );
		if(bMiss || (timer==0 && !bSurvival) ){ 
			typeEnd = END_FAILED;
		}
		else{ 
			typeEnd = END_SUCCESS; 
		}
	}
	case(EV_TIMEOUT){
		if(!bSurvival){  typeEnd = END_FAILED;  }
		else{            typeEnd = END_SUCCESS; }
	}
	case(EV_GAIN_SPELL){ typeEnd = END_SUCCESS; }
	case(EV_FAIL_SPELL){ typeEnd = END_FAILED;  }
	
	case(EV_ADD_MAGICCIRCLE){
		let a = GetEventArgument(0);
		TMagicCircle(a[0],a[1],a[2],a[3],a[4],a[5],a[6], [ a[7],a[8],a[9] ] );
	}

}
@MainLoop{
	timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
	yield;
}




task TInitialize{
	if(!IsCloseScript(GetScriptID(SCRIPT_MAGICCIRCLE))){CloseScript(GetOwnScriptID);return;}
	SetScriptID(SCRIPT_MAGICCIRCLE);
	
	// loop(5){yield;}
	let objScene = GetEnemyBossSceneObjectID();
	while(objScene==ID_INVALID){
		yield;
		objScene = GetEnemyBossSceneObjectID();
	}
	
	let bosses = GetAllBossID();
	// let alpha0 = 64 + 64/length(bosses);
	let alpha0 = 64 + 32/length(bosses);
	
	let rad0 = ( 64+192/length(bosses) );
	
	quality = GetAreaCommonData("CONFIG","Effect Quality",2);
	
	ascent(i in 0..length(bosses)){
		let boss = bosses[i];
		if(Obj_GetValueD(boss,"EnableMagicCircle",true)){
			let rad = rad0 * Obj_GetValueD(boss,"MagicCircleTweak_Rad",1.2);
			// let el = Obj_GetValueD(boss,"MagicCircleTweak_Ellipse",1.2);
			let el = Obj_GetValueD(boss,"MagicCircleTweak_Ellipse",2);
			let rs = Obj_GetValueD(boss,"MagicCircleTweak_RotSpd",1.2);
			let alpha = Obj_GetValueD(boss,"MagicCircleMaxAlpha",alpha0);
			let color = Obj_GetValueD(boss,"MagicCircleColor",Obj_GetValueD(boss,CHARACTER_COLOR, [255,255,255] ));
			let mnum = Obj_GetValueD(boss,"MagicCircleCount", ceil(quality/length(bosses))+1 )-1; let num=0;
			
			// TMagicCircle(    boss,0, el*1.5*(-1)^i, 0+45*i,  2, rad, alpha, color); num++;
			TMagicCircle(    boss,0, rs*1.5*(-1)^i, 0+45*i,  el, rad, alpha, color); num++;
			if( num<mnum && length(bosses) < quality ){
				TMagicCircle(boss,1, rs*1.5*(-1)^i,90+45*i,  el, rad, alpha, color); num++;
			}
			if( num<mnum && i+2 < quality ){
				TMagicCircle(boss,2, rs*-1*(-1)^i , 0+45*i,  el, rad, alpha, color); num++;
				TMagicCircle(boss,3, rs*-1*(-1)^i ,90+45*i,  el, rad, alpha, color); num++;
			}
		}
	}
	
	initializing = false;
}





task TMagicCircle(centerObj, circleindex, rotspd,rotoff, distort, mRad, maxalpha, color){
	let dir = (|rotspd|)/rotspd;
	
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		
	//頂点奇数：偶数：円の外側、円の内側
	//Might need to be a power of 2?
	// let numVert = 16+16*quality - 4*mc_count; //64
	// let numVert = 16+16*quality - 2*ceil(max(0,10-quality)*mc_count/2); //64
	
	//Use a good number of vertices at first, but cut back a bit for additional circles
	let numVert = 32+16*quality - 2*ceil(max(0,10-quality)*mc_count/2); //64
	if(numVert<32){ //minimum needed to not look like crap
		if(initializing){ return; } //only abort circles added automatically
		else{ numVert=16+16*quality; }
	}
	let Rads = [];
	loop(numVert/2){
		Rads = Rads ~ [0];
		Rads = Rads ~ [100];
	}

	mc_count++;
	let path = dirsys~"img/magiccircle_00.png";
	
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, numVert);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj, PRI_MAGICCIRCLE); //30
	ObjPrim_SetTexture(obj, path);
	ascent(i in 0..numVert / 2){
		let I = i * 2;
		let left = i * 128;
		//Determines which part of the texture each vertex is "anchored" to, I think?
		ObjPrim_SetVertexUVT(obj, I+0, left,  0);
		ObjPrim_SetVertexUVT(obj, I+1, left, 64);
	}

	// loop(5){yield;}
	let objScene = GetEnemyBossSceneObjectID();
	while(objScene==ID_INVALID){
		yield;
		objScene = GetEnemyBossSceneObjectID();
	}
	// let objBoss = GetEnemyBossObjectID()[0];
	let timerOrg = ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF); //176400 ?
	if(timerOrg >= 60*ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF)){timerOrg/=60;}
	bLastSpell = ObjEnemyBossScene_GetInfo(objScene, INFO_IS_LAST_SPELL);
	bSurvival = ObjEnemyBossScene_GetInfo(objScene, INFO_IS_DURABLE_SPELL);
	
	
	// let mRad = 512 * 1.2; //was on this for quite a while // let mRad = 256 * 1.2;
	let alpha = 0;
	maxalpha = maxalpha/255;
	let effalpha = alpha;
	let frame = 0;
	let angleRender = 0;
	
	let R;      let G;      let B;
	let R_norm; let G_norm; let B_norm;
	let R_last; let G_last; let B_last;

	let DoGradient = false;
	let dColor = [0,0,0]; 
	let dR=0;   let dG=0;   let dB=0;
	
	timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
	let DoRadWithTimer = true;

	BalanceColors;
	sub BalanceColors{
		R=color[0]; G=color[1]; B=color[2];
		R=2*R-255; G=2*G-255; B=2*B-255; //So they'll average with 255 to give the default values
		R_norm = (R+192)/2; G_norm = (G+192)/2; B_norm = (B+255)/2;
		R_last = (R+255)/2; G_last = (G+192)/2; B_last = (B+192)/2;
		if(DoGradient){
			dR=dColor[0]-R; dG=dColor[1]-G; dB=dColor[2]-B;
			// dR = (2*(R+dR)-192)-R; dG = (2*(G+dG)-192)-G; dB = (2*(B+dB)-255)-B; 
		}
	}
	
	sub UpdateAlpha{
		if(!DoGradient){
			if(bLastSpell){
				ObjRender_SetColor(obj, R_last * effalpha, G_last * effalpha, B_last * effalpha);
			}else{
				ObjRender_SetColor(obj, R_norm * effalpha, G_norm * effalpha, B_norm * effalpha);
			}
		}else{
			ascent(i in 0..numVert/2){
				let I=2*i;
				// let t = sin( (360) / (numVert/2-1)*i );
				let t = (| sin( (180) / (numVert/2-1)*i ) |)^2;
				ObjPrim_SetVertexColor(obj,I+0, (R_norm+dR*t)*effalpha, (G_norm+dG*t)*effalpha, (B_norm+dB*t)*effalpha);
				ObjPrim_SetVertexColor(obj,I+1, (R_norm+dR*t)*effalpha, (G_norm+dG*t)*effalpha, (B_norm+dB*t)*effalpha);
			}
		}
		ObjRender_SetPosition(obj, cx, cy, 0);
		ObjRender_SetAngleZ(obj, angleRender);
	}
	
	UpdateCheck;
	sub UpdateCheck{
		let ext = ""; if(Obj_GetValueD(centerObj,"MagicCircleManageSeparate",false)){ ext=itoa(circleindex); }
		if(Obj_GetValueD(centerObj,"MagicCircleAlpha"~ext,NO_CHANGE)!=NO_CHANGE){
			alpha = Obj_GetValueD(centerObj,"MagicCircleAlpha"~ext,alpha*255)/255;
		}
		if(Obj_GetValueD(centerObj,"MagicCircleMaxAlpha"~ext,NO_CHANGE)!=NO_CHANGE){
			maxalpha = Obj_GetValueD(centerObj,"MagicCircleMaxAlpha"~ext,maxalpha*255)/255;
		}
		if(Obj_IsValueExists(centerObj,"MagicCircleColor"~ext)){
			color = Obj_GetValue(centerObj,"MagicCircleColor"~ext);
			BalanceColors;
		}
		if(Obj_IsValueExists(centerObj,"MagicCircleGradient"~ext)){
			// dColor = Obj_GetValue(centerObj,"MagicCircleGradient");
			// DoGradient = (dColor[0]!=0 || dColor[1]!=0 || dColor[2]!=0);
			dColor = Obj_GetValue(centerObj,"MagicCircleGradient"~ext);
			DoGradient = (dColor[0]!=color[0] || dColor[1]!=color[1] || dColor[2]!=color[2]);
			BalanceColors;
		}
		DoRadWithTimer = Obj_GetValueD(centerObj,"MagicCircleShrinkWithTimer"~ext,DoRadWithTimer);
		
		
		if(Obj_GetValueD(centerObj,"MagicCircleCount",mc_count) < circleindex){
			Obj_Delete(obj); mc_count--; if(mc_count > 0){ return; } //Todo: Allow adding more circles
		}
	}
	
	
	
	
	let dx0=0;
	let dy0=0;
	let dp0=0;
	
	let rad=mRad; 
	let wid=max(20,(30+rad/10)/2);
	
	let cx = ObjRender_GetX(centerObj); 
	let cy = ObjRender_GetY(centerObj);
	let cx1=cx;let cy1=cy;let cx0=cx;let cy0=cy;
	
	let drift = 0;
	
	while(typeEnd == 0){
		
		if(Obj_IsValueExists(centerObj,FLAG_CHECK)){
			UpdateCheck;
			if(Obj_GetValue(centerObj,FLAG_CHECK)==false){
				task TReset{yield;Obj_DeleteValue(centerObj,FLAG_CHECK);}TReset;
			}
		}
		
		
		alpha = min(alpha+1/120, maxalpha);
		
		
		cx0=cx1; cy0=cy1;
		cx1 = ObjRender_GetX(centerObj);
		cy1 = ObjRender_GetY(centerObj);
		
		let dx = (cx1-cx0); //4
		let dy = (cy1-cy0); //4
		// let dp = (dx^2+dy^2)^0.5;
		let dp = max((|dx|),(|dy|));
		
		
		
		
		//Smooth motion if boss suddenly changes position
		if(dp < 100 && drift == 0){
			dx0=dx; dy0=dy; dp0=dp; //use current speed
			dx = (cx1-cx)/4; dy = (cy1-cy)/4; //realign to boss
			effalpha = alpha - dp * 3/255;
		}else{
			if(dp >= 100){ drift=30; }
			drift--;
			if(drift > 0){
				dx=dx0; dy=dy0; dp=dp0; //keep using previous speed
			}else{
				//Realign to boss
				let a = getangle(cx,cy,cx1,cy1);
				dp = ((cx1-cx)^2+(cy1-cy)^2)^0.5;
				dx = (dp+mRad*0.75)*cos(a);
				dy = (dp+mRad*0.75)*sin(a);
				alpha = alpha/4; //fade back in
			}
			effalpha = (alpha - dp0 * 3/255) * (drift/30)^0.5;
		}
		
		
		if(!Obj_IsDeleted(centerObj)){
			cx += dx; // dx/4
			cy += dy; // dy/4
		}

		
		
		
		
		angleRender += 360/numVert/4 * dir;

		
		// bMiss = ( ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT) > 0
		           // || ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) > 0 );
		
		// let rad = mRad * (timer/timerOrg)^0.5; //overall radius
		// let wid = (30+rad/10)/2; //width of circle
		
		if(DoRadWithTimer){
			// timer = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF);
			let rRate = timer / timerOrg;
			rad = mRad * (timer/timerOrg)^0.5; //overall radius
			wid = (30+rad/10)/2; //width of circle
		}
		
		
		
		let rx = rad-distort*wid*cos(rotoff+frame*rotspd);
		let ry = rad-distort*wid*sin(rotoff+frame*rotspd);
		let a = rx; let b = ry;
		
		ascent(i in 0..numVert / 2){
			let I = i * 2;
			let angle = 360 / (numVert / 2 - 1) * i;
			
			//Ellipse radius
			let t = angle; //theta
			let r = a*b / ( b^2*cos(t)^2 + a^2*sin(t)^2 )^0.5;
			
			//Alright, let's try doing this in absolute terms
			Rads[I]   = r;
			Rads[I+1] = r-wid;

			//Outer circle (shrinks inward)
			let vx1 = Rads[I] * cos(angle);
			let vy1 = Rads[I] * sin(angle);
			ObjPrim_SetVertexPosition(obj, I+0, vx1, vy1, 0);
			// ObjPrim_SetVertexPosition(obj, I+0, vx1*Rads[I], vy1*Rads[I], 0);	
			//Inner circle
			let vx2 = Rads[I+1] * cos(angle);
			let vy2 = Rads[I+1] * sin(angle);			
			ObjPrim_SetVertexPosition(obj, I+1, vx2, vy2, 0);

		}
		
		

		UpdateAlpha;
		frame++;

		yield;
	}

	//スペルカード取得失敗
	//When spell ends
	// if(typeEnd == END_FAILED){
		// Obj_Delete(obj);
		// NotifyEventAll(EV_FAIL_SPELL,[]); //tell system to show failure message
		// yield;
		// CloseScript(GetOwnScriptID());
		// return;
	// }

	let contractdir = 1;
	if(typeEnd == END_FAILED){
		contractdir = -1;
		NotifyEventAll(EV_FAIL_SPELL,[]); //tell system to show failure message
	}
	
	// if(mc_finishing){
		// Obj_Delete(obj);
		// return;
	// }
	// mc_finishing = true;

	let rRate = 1.0;
	frame = 0;
	// alpha = 1;
	alpha = (1/mc_count);
	effalpha = alpha;
	let dalpha = -1/45 / mc_count;
	//スペルカード取得成功 //Capture bonus collapse onto player
	loop(105){
		angleRender += 360 / numVert / 4;
		let dx = (GetPlayerX() - cx) / 16;
		let dy = (GetPlayerY() - cy) / 16;
		cx += dx;
		cy += dy;
		if(frame >= 60){ //45
			// alpha -= 1 / 45;
			alpha += dalpha;
			alpha = max(alpha, 0);
			effalpha = alpha;
		}

		ascent(i in 0..numVert / 2) {
			let I = i * 2;
			let angle = 360 / (numVert / 2 - 1) * i;

			let vx1 = Rads[I] * cos(angle);
			let vy1 = Rads[I] * sin(angle);
			ObjPrim_SetVertexPosition(obj, I + 0, vx1, vy1, 0);

			let vx2 = Rads[I+1] * cos(angle);
			let vy2 = Rads[I+1] * sin(angle);
			ObjPrim_SetVertexPosition(obj, I + 1, vx2, vy2, 0);

			let drOut = 0;
			let drIn = 0;
			if(frame <= 45) {
				//魔方陣拡大
				let rRateOut = 1.0;
				drOut = (mRad * rRateOut - Rads[I]) / 8;

				let rRateIn = rRateOut - 0.08;
				if(rRateIn<0){rRateIn=0;}
				drIn = (mRad * rRateIn - Rads[I+1]) / 8;
			}
			else {
				cx = GetPlayerX();
				cy = GetPlayerY();

				rRate -= 1.0 / 60.0 * contractdir;
				let rRateOut = rRate * sin(angle % 60);
				drOut = (mRad * rRateOut - Rads[I]) / 16;

				let rRateIn = rRate * sin(angle % 60)-0.08;
				if(rRateIn<0){rRateIn=0;}
				drIn=(mRad * rRateIn - Rads[I+1])/16;
			}
			Rads[I]     = Rads[I]     + drOut;
			Rads[I + 1] = Rads[I + 1] + drIn;
			
			
		}
		UpdateAlpha();
		frame++;
		yield;
	}
	Obj_Delete(obj);
	CloseScript(GetOwnScriptID());

	
	
}
















function DRAWTEST(img,x,y) {
	//let img = CSD~"../img/magiccircle_rb.png";
	let boss = GetEnemyBossObjectID();
	let objscene = GetEnemyBossSceneObjectID();
	let objTest = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objTest, img);

	ObjSprite2D_SetSourceRect(objTest, 0, 0, 129, 129);
	ObjRender_SetScaleXYZ(objTest,1,1,0);
	Obj_SetRenderPriorityI(objTest,51);
	ObjSprite2D_SetDestCenter(objTest);
	ObjRender_SetPosition(objTest,x,y,0);
	ObjRender_SetBlendType(objTest,BLEND_ADD_ARGB);
	
}


task DRAWTEST2(path,x,y) {
	path = dirsys~"img/magiccircle_00.png";
	let numVert = 64;
	let Rads = [];
	loop(numVert){Rads = Rads ~ [0];}
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	//ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, numVert);
	ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
	Obj_SetRenderPriority(obj, 0.3);
	ObjPrim_SetTexture(obj, path);
	
	ascent(i in 0..numVert / 2)
	{
		let left = i * 128;
		let I = i * 2;
		ObjPrim_SetVertexUVT(obj, I + 0, left, 0);
		ObjPrim_SetVertexUVT(obj, I + 1, left, 64);		
	}
	
	
	while(true){
		ascent(i in 0..numVert/2) {
			ObjPrim_SetVertexPosition(obj, 2*i,   px+50*cos(i*743/numVert), py+50*sin(i*743/numVert), 0);
			ObjPrim_SetVertexPosition(obj, 2*i+1, px+40*cos(i*743/numVert), py+40*sin(i*743/numVert), 0);
		}
		yield;
	}
}
