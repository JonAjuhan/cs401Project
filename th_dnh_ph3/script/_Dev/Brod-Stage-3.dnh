#TouhouDanmakufu[Stage]
#ScriptVersion[3]
#Title["Brod Stage Test 3"]
#Text["Preliminary stage 2 or 3."]
#Image["./ExRumia(�����u�~�b�h�i�C�g�����@���G�v).jpg"]

#include "./Index.txt"
#System["./system/Andi_System.txt"]
#Background["./system/Background/Mystia/BG_work.txt"]


let bossScript;
let stageBGM;
let bossBGM;

@Loading{
	let csd = GetCurrentScriptDirectory();

	bossScript = LoadScriptInThread(csd~"./BrodPlural2.dnh");

	stageBGM = csd~"bgm/bgm - Song of the Night Sparrow ~ Night Bird.ogg";
	LoadSound(stageBGM);

	bossBGM  = csd~"bgm/bgm - Deaf to All but the Song.ogg";
	LoadSound(bossBGM);

	SetCommonData("InitialPlayerPower",200);

}

@Initialize
{
	SetCommonData("IsStage",true);
	InitPlural;
	TStage();
}
task InitPlural{
	wait(1200); //give it time to compile
	StartScript(bossScript); //will wait for event before starting boss
}

@MainLoop{
	CheckGameOver;
	yield;
}

@Finalize
{
}






task TStage {
	let csd = GetCurrentScriptDirectory();

	SetBGM("Song of the Night Sparrow ~ Night Bird");
	ShowPointOfCollection;

	FadeToBlack(0,0,60);

	loop(60){yield;}//1�b���炢�����΁A�R���p�C�����������Ǝv�������B


	let x; let y; let dir; let side;
  let typearr = ["red","blue"];

	let fairy = TFairy1(0,0,1.5,90,60);
	ObjMove_AddPatternA1(fairy, 100,1.5,45);
	ObjMove_AddPatternA1(fairy, 125,1.5,300);
	fairy = TFairy1(cx+190,0,1.5,90,60);
	ObjMove_AddPatternA1(fairy, 100,1.5,135);
	ObjMove_AddPatternA1(fairy, 125,1.5,210);

  wait(150);

  ascent(k in 0..6){
    dir = altSign(k);
    ascent(i in 0..6){
      let kd = TKedama(cx+dir*(cx+32),cy-120,2,90+90*dir,typearr[i%2],50);
      SetTurnAtFrame(kd,45, -180*dir,5);
      SetTurnAtFrame(kd,90, 180*dir,5);
      SetTurnAtFrame(kd,120,-180*dir,5);
      wait(10);
    }
  }

	wait(250);

	ascent(i in 0..4){
		let fairy = TFairy2(cx+i,20,1,90,60);
		ObjMove_AddPatternA1(fairy, 100,1.5,90);
		ObjMove_AddPatternA1(fairy, 175,1.5,315);
		fairy = TFairy2(cx+(i*2),20,1,90,60);
		ObjMove_AddPatternA1(fairy, 75,1,90);
		ObjMove_AddPatternA1(fairy, 150,1.5,225);
		wait(30);
	}
	wait(150);

	ascent(i in 0..3){
		let fairy = TFairy3(cx+(i*25),0,1.5,90,60);
		ObjMove_AddPatternA1(fairy,175,0.75,270);
	}

	wait(150);

  ascent(k in 0..5){
		dir = altSign(k);
		ascent(i in 0..5){
			let kd2 = TKedama2(cx+dir*(cx+32),cy-50,2,75+90*dir,typearr[i%2],50);
			SetTurnAtFrame(kd2,90, -150,5);
			SetTurnAtFrame(kd2,180, 100,5);
			SetTurnAtFrame(kd2,270,-150,5);
			wait(15);
		}
	}

	ascent(i in 0..5){
		let fairy = TFairy4(cx+i*20,10*i,2,30*i,60);
		ObjMove_AddPatternA1(fairy, 150,1.5,60);
		ObjMove_AddPatternA1(fairy, 150,1.5,180);
		ObjMove_AddPatternA1(fairy, 100,1.75,300);
		wait(30);
	}

  wait(200);

  ascent(i in 0..3){
    let fairy = TFairy3(cx-i+5,0,2,90,60);
    ObjMove_AddPatternA1(fairy, 100,1.5,315);
    let fairy2 = TFairy3(cx-i-5,0,2,90,60);
    ObjMove_AddPatternA1(fairy2, 100,1.5,225);
    wait(30);
  }

  wait(250);

  ascent(k in 0..3){
    dir = altSign(k);
    ascent(i in 0..5){
      let kd3 = TKedama(cx+dir*(cx+15),cy,2,90+90*dir,typearr[i%2],50);
      SetTurnAtFrame(kd3,75, -150,5);
      wait(15);
    }
  }

  ascent(i in 0..5){
		let fairy = TFairy4(cx+i*10,-25,1,30*i,90);
		ObjMove_AddPatternA1(fairy,200,1,270);
		wait(30);
	}

	wait(450);

	/////////////////////////////////////////////////////
	//End of the aforementioned bit where you say where to put enemies
	/////////////////////////////////////////////////////

	//Clean up any leftover shots and wait a moment before starting boss
	//There shouldn't be any enemies left by the time we get here
	loop(150){
		DeleteShotAll(TYPE_ALL,TYPE_FADE);
		yield;
	}
	//Start the boss plural
	// StartScript(bossScript);
	NotifyEvent(bossScript,EV_START_BOSS,[]);

	while(!IsCloseScript(bossScript) && GetPlayerState() != STATE_END){
		yield;
	}
	CloseStgScene();
	CloseScript(GetOwnScriptID);
}

function TFairy1(x,y,s,a,shootdel){
	let fairy = SpawnFairy(x,y,"yellow","INSet1",14,780); //x,y,color,type,hitbox,life
	ObjMove_SetSpeed(fairy,s); ObjMove_SetAngle(fairy,a);
	//By doing it this way, you can use ObjMove_Foo and such on created fairies
	Manage;
	return fairy;

	task Manage{
		let shot;
		let count=1;
		let a0 =0;
		let a=0;
		let N;
		let n;
		let spd;

		let diff = rank();
		alternative(diff)
		case(RANK_EASY){	N = 20; spd = 1.5;}
		case(RANK_NORM){	N = 22; spd = 1.75;}
		case(RANK_HARD){	N = 25; spd = 2;}
		case(RANK_LUNA){	N = 30; spd = 2.25;}

		fire;

		task fire{
			while(!Obj_IsDeleted(fairy)) {
				let fx = ObjMove_GetX(fairy); let fy = ObjMove_GetY(fairy);
				ascent(i in 0..N)
				{
					shot = CreateShotA1(fx+cos(a),fy+sin(a),spd, a0+i*(360/N),SUPP_RED+400, 0);
					ObjMove_SetAngularVelocity(shot,0.10*i);
					ObjMove_AddPatternA1(shot,150,NO_CHANGE,45);
					ObjMove_AddPatternA1(shot,250,NO_CHANGE,135);
				}
				wait(50);
			}
		}
		//For first (shootdel) frames, count%10 cannot be 0,
		//since count won't be an integer.
		//Kind of a hack but saves checking another thing in the loop
		//or making a duplicate loop without the SE.
		DelShoot;
		task DelShoot{loop(shootdel){count+=1/shootdel;}}

		//Update loop - update fx,fy with fairy position, increment count, and play shot SE
		while(!(ObjEnemy_GetLife(fairy)==0)){
			x=ObjMove_GetX(fairy); y=ObjMove_GetY(fairy); //update each frame with the fairy's position
			yield;
			count++;
			}
		if(!Obj_IsDeleted(fairy)){ //if it was shot down rather than leaving screen
			DeleteShotInCircle(TYPE_SHOT,TYPE_ITEM,x,y,150);
			DropItemsLarge(x,y);
			Obj_Delete(fairy);
		}
	}
}

function TKedama(x,y,s,a,color,life){
 let kd = SpawnKedama(x,y,color,life);
 ObjMove_AddPatternA1(kd,0,s,a);
 Manage;
 ManageFinalize;
 return kd;

 task Manage{
	 let del;
	 let N;
	 let n;
	 let shot1;
	 let shot2;
	 let delay;

	 alternative(rank)
	 case(RANK_EASY){ del = 90; s = 1.5; N = 3; n = 3; delay = 45;}
	 case(RANK_NORM){ del = 45; s = 1.75; N = 4; n = 4; delay = 30;}
	 case(RANK_HARD){ del = 30; s = 2;  N = 5; n = 5; delay = 20;}
	 case(RANK_LUNA){ del = 10; s = 2.5; N = 6; n = 6; delay = 15;}
	 others{ del = 1; }

	 wait(1*del); //lengthy delay before it actually shoots anything
	 while(!Obj_IsDeleted(kd) && ObjEnemy_GetLife(kd)>0){
		 x = ObjMove_GetX(kd); y = ObjMove_GetY(kd);
		 ascent(i in 0..N)
		 {
		 	ascent(j in 0..n)
		 	{
			 	shot1=CreateShotA1(x,y,s,160+(4*i),SUPP_RED+500, delay);
				ObjMove_SetAngularVelocity(shot1,0.25*-j);
			 	shot2=CreateShotA1(x,y,s, 340+(4*i),SUPP_RED+500, delay);
			 	ObjMove_SetAngularVelocity(shot2,0.25*j);
		 	}
		 }
		 SE_Play(se_shot,60);
		 loop(del){yield; if(ObjEnemy_GetLife(kd)==0){break;}}
	 }


 }
 task ManageFinalize{
	 let N=s*3;
	 let a0 =0;
	 let a=0;
	 let shot;
	 while(!Obj_IsDeleted(kd) && ObjEnemy_GetLife(kd)>0){yield;}
	 if(!Obj_IsDeleted(kd)){ //if it was shot down rather than leaving screen
		 x = ObjMove_GetX(kd); y = ObjMove_GetY(kd);
		 ascent(i in 0..N)
		 {
			 a=a0+i*(360/N);
			 ascent(j in -1..2)
			 {
				 shot = CreateShotA1(x+25*cos(a),y+25*sin(a),s*(1-0.05*i), a0+i*(360/N),SUPP_RED+500, 15);
				 ObjMove_SetAngularVelocity(shot,0.025*j);
			 }
			 a0+=15;
		 }
		 alternative(color)
		 case("red"){  DropItemsSmallest(x,y, I_POWER); }
		 case("blue"){ DropItemsSmallest(x,y, I_POINT); }
		 others{ DropItemsSmallest(x,y, tern(rand(0,1)<0.5,I_POINT,I_POWER)); }
		 Obj_Delete(kd);
	 }
 }
}

 function TFairy2(x,y,s,a,shootdel){
	let fairy = SpawnFairy(x,y,"yellow","INSet1",14,780); //x,y,color,type,hitbox,life
	ObjMove_SetSpeed(fairy,s); ObjMove_SetAngle(fairy,a);
	//By doing it this way, you can use ObjMove_Foo and such on created fairies
	Manage;
	return fairy;

	task Manage{
		let shot;
		let count=1;
		let a0 =0;
		let a=0;
		let N;
		let n;
		let spd;

		let diff = rank();
		alternative(diff)
		case(RANK_EASY){	N = 20; n = 1; spd = 1;}
		case(RANK_NORM){	N = 22; n = 1; spd = 1.25;}
		case(RANK_HARD){	N = 25; n = 2; spd = 1.75;}
		case(RANK_LUNA){	N = 30; n = 3; spd = 2;}

		fire;

		task fire{
			while(!Obj_IsDeleted(fairy)) {
				let fx = ObjMove_GetX(fairy); let fy = ObjMove_GetY(fairy);
				ascent(i in 0..N)
				{
					a=a0+i*(360/N);
					ascent(j in 0..n)
					{
						shot = CreateShotA1(fx+cos(a),fy+sin(a),spd, a0+i*(360/N),BALL_O_RED+20, 15);
						ObjMove_SetAngularVelocity(shot,0.50*j);
					}
				a0+=15;
				}
				wait(150);
			}
		}
		//For first (shootdel) frames, count%10 cannot be 0,
		//since count won't be an integer.
		//Kind of a hack but saves checking another thing in the loop
		//or making a duplicate loop without the SE.
		DelShoot;
		task DelShoot{loop(shootdel){count+=1/shootdel;}}

		//Update loop - update fx,fy with fairy position, increment count, and play shot SE
		while(!(ObjEnemy_GetLife(fairy)==0)){
			x=ObjMove_GetX(fairy); y=ObjMove_GetY(fairy); //update each frame with the fairy's position
			yield;
			count++;
		}
		if(!Obj_IsDeleted(fairy)){ //if it was shot down rather than leaving screen
			DeleteShotInCircle(TYPE_SHOT,TYPE_ITEM,x,y,150);
			DropItemsLarge(x,y);
			Obj_Delete(fairy);
		}
	}
}

function TFairy3(x,y,s,a,shootdel){
 let fairy = SpawnFairy(x,y,"yellow","INSet1",14,780); //x,y,color,type,hitbox,life
 ObjMove_SetSpeed(fairy,s); ObjMove_SetAngle(fairy,a);
 //By doing it this way, you can use ObjMove_Foo and such on created fairies
 Manage;
 return fairy;

 task Manage{
	 let shot;
	 let count=1;
	 let a0 =0;
	 let a=0;
	 let N;
	 let spd;

	 let diff = rank();
	 alternative(diff)
	 case(RANK_EASY){	N = 15; spd = 1.5;}
	 case(RANK_NORM){	N = 17; spd = 1.75;}
	 case(RANK_HARD){	N = 20; spd = 2;}
	 case(RANK_LUNA){	N = 25; spd = 2.25;}

	 fire;

	 task fire{
		 while(!Obj_IsDeleted(fairy)) {
			 let fx = ObjMove_GetX(fairy); let fy = ObjMove_GetY(fairy);
			 ascent(i in 0..N)
			 {
				 a=a0+i*(360/N);
				 shot = CreateShotA1(fx+cos(a),fy+sin(a),spd, a0+i*(360/N),PEL_RED+150, 15);
				 ObjMove_AddPatternA1(shot,rand(100,150),NO_CHANGE,90);
			 	 a0+=15;
			 }
			 wait(75);
		 }
	 }
	 //For first (shootdel) frames, count%10 cannot be 0,
	 //since count won't be an integer.
	 //Kind of a hack but saves checking another thing in the loop
	 //or making a duplicate loop without the SE.
	 DelShoot;
	 task DelShoot{loop(shootdel){count+=1/shootdel;}}

	 //Update loop - update fx,fy with fairy position, increment count, and play shot SE
	 while(!(ObjEnemy_GetLife(fairy)==0)){
		 x=ObjMove_GetX(fairy); y=ObjMove_GetY(fairy); //update each frame with the fairy's position
		 yield;
		 count++;
	 }
	 if(!Obj_IsDeleted(fairy)){ //if it was shot down rather than leaving screen
		 DeleteShotInCircle(TYPE_SHOT,TYPE_ITEM,x,y,150);
		 DropItemsLarge(x,y);
		 Obj_Delete(fairy);
	 }
 }
}

function TKedama2(x,y,s,a,color,life){
	let kd2 = SpawnKedama(x,y,color,life);
	ObjMove_AddPatternA1(kd2,0,s,a);
	Manage;
	ManageFinalize;
	return kd2;

	task Manage{
		let del;
		let shot;
		let N;

		alternative(rank)
		case(RANK_EASY){s = 2; N = 5;}
		case(RANK_NORM){s = 2.75; N = 7;}
		case(RANK_HARD){s = 3.5; N = 10;}
		case(RANK_LUNA){s = 4.25; N = 15;}

		wait(100); //lengthy delay before it actually shoots anything
		while(!Obj_IsDeleted(kd2) && ObjEnemy_GetLife(kd2)>0){
			x = ObjMove_GetX(kd2); y = ObjMove_GetY(kd2);
			ascent(i in 0..N){
				shot = CreateShotA1(x+(10*i),y+(20*i),s,45,KUNAI_RED,75);
				ObjMove_AddPatternA1(shot,125,NO_CHANGE,135);
			}
			loop(50){yield; if(ObjEnemy_GetLife(kd2)==0){break;}}
		}
	}
	task ManageFinalize{
		while(!Obj_IsDeleted(kd2) && ObjEnemy_GetLife(kd2)>0){yield;}
		if(!Obj_IsDeleted(kd2)){ //if it was shot down rather than leaving screen
			x = ObjMove_GetX(kd2); y = ObjMove_GetY(kd2);
			ascent(i in 0..3){
				CreateShotA1(x,y,2*(1-0.20*i),GetAngleToPlayer(kd2), KUNAI_RED+50,50);
			}
			alternative(color)
			case("red"){  DropItemsSmallest(x,y, I_POWER); }
			case("blue"){ DropItemsSmallest(x,y, I_POINT); }
			others{ DropItemsSmallest(x,y, tern(rand(0,1)<0.5,I_POINT,I_POWER)); }
			Obj_Delete(kd2);
		}
	}
}







function TFairy4(x,y,s,a,shootdel){
	let fairy = SpawnFairy(x,y,"yellow","INSet1",14,780); //x,y,color,type,hitbox,life
	ObjMove_SetSpeed(fairy,s); ObjMove_SetAngle(fairy,a);
	//By doing it this way, you can use ObjMove_Foo and such on created fairies
	Manage;
	return fairy;

	task Manage{
		let shot1;
		let shot2;
		let count=1;
		let N;
		let spd;
		let del;

		let diff = rank();
		alternative(diff)
		case(RANK_EASY){	N = 5; spd = 1.25; del = 30;}
		case(RANK_NORM){	N = 10; spd = 1.5; del = 25;}
		case(RANK_HARD){	N = 15; spd = 1.75; del = 20;}
		case(RANK_LUNA){	N = 20; spd = 2; del = 15;}

		fire;

		task fire{
			while(!Obj_IsDeleted(fairy))
			{
				let fx = ObjMove_GetX(fairy); let fy = ObjMove_GetY(fairy);
				ascent(i in 0..N)
					{
						shot1 = CreateShotA1(fx+(5*i),fy+(10*i),spd, 90, PEL_RED+250, 15);
						shot2 = CreateShotA1(fx-(5*i),fy+(10*i),spd, 90, PEL_RED+250, 15);
					}
				wait(2*del);
			}
		}
		//For first (shootdel) frames, count%10 cannot be 0,
		//since count won't be an integer.
		//Kind of a hack but saves checking another thing in the loop
		//or making a duplicate loop without the SE.
		DelShoot;
		task DelShoot{loop(shootdel){count+=1/shootdel;}}

		//Update loop - update fx,fy with fairy position, increment count, and play shot SE
		while(!(ObjEnemy_GetLife(fairy)==0)){
			x=ObjMove_GetX(fairy); y=ObjMove_GetY(fairy); //update each frame with the fairy's position
			yield;
			count++;
		}
		if(!Obj_IsDeleted(fairy)){ //if it was shot down rather than leaving screen
			DeleteShotInCircle(TYPE_SHOT,TYPE_ITEM,x,y,150);
			DropItemsLarge(x,y);
			Obj_Delete(fairy);
		}
	}
}

function DropItemsSmallest(x,y,type){
	DropItemsA1(x,y, type,1,0,0);
	ItemExplode(x,y,randint(1,2));
}

function DropItemsSmaller(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,3,15,a);
	DropItemsA1(x,y,I_POWER,1,0,a);
	ItemExplode(x,y,3);
}

function DropItemsSmall(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POWER,3,8,a);
	ItemExplode(x,y,5);
}
function DropItemsLarge(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POINT_S,16,28,a+360/16);
	DropItemsA1(x,y,I_POWER_L,1,0,a);
	ItemExplode(x,y,10);
}
function DropItemsLifePiece(x,y){
	let a = rand(0,360);
	DropItemsA1(x,y,I_POINT,8,20,a);
	DropItemsA1(x,y,I_POINT_S,16,28,a+360/16);
	DropItemsA1(x,y,I_EXTEND_S,1,0,a);
	ItemExplode(x,y,10);
}


function SetTurnAtFrame(obj,del,turndegrees,turnradius){
	let circum = todeg(2*pi*turnradius);
	let arclength = circum * turndegrees/360;

	let spd = ObjMove_GetSpeed(obj);
	let turntime = (|arclength/spd|);             //works for finding angv,
	let angv = circum/turntime*sign(turndegrees); //but then never stops?
	let actualrealfinalturntime = turndegrees/angv; // �P\_(�c)_/�P this works for some reason

	Manage;
	task Manage{
		wait(del);
		ObjMove_SetAngularVelocity(obj,angv);
		loop(actualrealfinalturntime){ yield; } //wait to face new angle
		ObjMove_SetAngularVelocity(obj,0);
	}

	return turntime;
}
