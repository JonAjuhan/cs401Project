#TouhouDanmakufu[Stage]
#ScriptVersion[3]
#Title["Stage-7"]
#Text["An example stage"]
#Image["./ExRumia(星符「ミッドナイトレヴァリエ」).jpg"]

#include "./Index.txt"
#BGM["./bgm/bgm - Kid's Festival ~ Innocent Treasures.ogg"] // CC-CGR-loop.ogg"]
#System["./system/Andi_System.txt"]
#Background["./system/background/Background_Sky.txt"]

//Fairy library
#include "./Library/Fairies.txt"
//Some test fairy patterns
#include "./Library/FairyPatterns.dnh"

let bossScript;

@Loading{
	//Preload the boss plural
	bossScript = LoadScriptInThread(GetCurrentScriptDirectory~"./Plural-Test.dnh");
}

@Initialize
{
	SetCommonData("IsStage",true);
	if(noPackage){SetDifficultyD(EXTRA);}
	TStage();
}

@MainLoop{
	yield;
}

@Finalize
{
}



//Alright, so stage scripts do stuff similar to both singles and plurals
//They call plurals like plurals call singles,
//but they also do shots in the stage script itself.

//Unlike in most singles, the shots are (usu.) created by individual "enemy" tasks,
//which are reused in different places/times.
//Enemy tasks can be defined in the stage script file itself 
//or imported from another file - here I've done both.
//Other patterns used here are defined in Library/FairyPatterns.dnh
	




task TStage
{
	let dir = GetCurrentScriptDirectory();

	loop(60){yield;}//1秒くらいあれば、コンパイル完了すると思われる。
	
	
	/////////////////////////////////////////////////////
	//The bit where you say where to put enemies
	/////////////////////////////////////////////////////
	
	
	//A bunch of basic fairies coming down randomly
	//just an example, don't emulate this
	//Enemy placement should almost never be randomized
	ascent(i in 0..15){
		//aimed shots, with some extra wingy bits
		TFairy1(cx+(cx-20)*sin(i*1120)*cos(i*115),-30,1.5,90+45*sin(i*1220)*cos(i*215));
		// TFairy1(rx,-30,1.5,rand(45,135));
		wait(30);
	}
	wait(60);
	
	//Some guys what do a thing when they die
	ascent(i in 0..3){
		//aimed shots and a wide aimed burst when it dies
		TYinYang1(0,50+50*i,3,-15);
		wait(30);
	}
	wait(60);
	
	//Pretty easy covering fire
	ascent(i in 0..15){
		//fixed pattern - start firing downward, spread out to sides
		TFairy2(cx+30*i*altSign(i),-30,2.5,90,60,60,1.5,0+180*altSign(i));
		wait(30);
	}
	
	wait(120);
	
	ascent(i in 0..2){
		//one big aimed burst
		TFairy3(cx+cx/2*altSign(i),-30,cx+cx/2*altSign(i),cy,60,180,1.5,270+45*altSign(i));
	}
	
	wait(180);
	
	//Hard part
	ascent(i in 0..5){
		//fixed-angle rings overlap to effectively cover the stage
		TBunnyFairy1(sx-50+(cx-50)/6*i,-20,3,135);
		TBunnyFairy1(0 +50-(cx-50)/6*i,-20,3,45);
		wait(30);
	}
	wait(150);
	ascent(i in 0..5){
		//fires a constant stream of shots aimed AROUND the player - don't move too much
		TSpirit1(cx+(100+20*i)*altSign(i),-20,3,90);
		wait(15);
	}	
	wait(150);
	
	ascent(i in 0..5){
		//fixed-angle rings overlap to effectively cover the stage
		//this time fairies spread out to slightly different places
		TBunnyFairy1(sx-50+(cx-50)/6*i,-20,3,135-5*i);
		TBunnyFairy1(0 +50-(cx-50)/6*i,-20,3,45 +5*i);
		wait(30);
	}
	
	wait(360); //150
	
	//off-aimed streams and aimed shots
	ascent(j in 0..2){
		ascent(i in 0..5){
			TSpirit1(cx+(100+20*i)*altSign(i),sy+20,3,270);
			TFairy1(cx+(cx+30)*altSign(j),40+50*i,2,90+105*altSign(j)-5*i*altSign(j));
			wait(15);
		}	
		wait(150);
	}
	//streams hemming player in plus big aimed bursts - mean combination
	ascent(i in 0..5){
		TSpirit1(cx+(100+20*i)*altSign(i),sy+20,3,270);
		wait(15);
	}
	ascent(i in 0..2){
		//big aimed burst
		TFairy3(cx+cx/2*altSign(i),-30,cx+cx/2*altSign(i),cy,60,180,1.5,270+45*altSign(i));
	}
	//a few more of those off-aimed guys just because
	ascent(i in 0..5){
		TSpirit1(cx+(100+20*i)*altSign(i),sy+20,3,270);
		wait(15);
	}

	wait(300); //wait for leftover enemies to finish
	
	/////////////////////////////////////////////////////
	//End of the aforementioned bit where you say where to put enemies
	/////////////////////////////////////////////////////
	
	//Clean up any leftover shots and wait a moment before starting boss
	//There shouldn't be any enemies left by the time we get here
	loop(150){
		DeleteShotAll(TYPE_ALL,TYPE_FADE);
		yield;
	}
	//Start the boss plural
	StartScript(bossScript);
	while(!IsCloseScript(bossScript) && GetPlayerState() != STATE_END)
	{
		yield;
	}
	loop(240){yield;}
	CloseStgScene();
}




//Enemy tasks:
//These do the shots and can be reused


//Here's a rundown of how to use the SpawnFairy function:
//x,y: coordinates to start at; at least one should preferably be offscreen
//color: string used to determine which sprite to use
//type: string used to determine which spritesheet to use
//hitbox: radius of the fairy's hitbox
//life: the fairy's life. 100=die immediately, 300=a bit tougher, etc

//Possible values for type:
//	"INSet1","INSet2","PoFV","MoF","DDC"
//	(these are the abbreviated names of the games each type first appeared in)
//	(Imperishable Night has a second set for the rabbit-eared fairies)
//Possible values for color:
//	"red","green","blue","yellow","purple",  "big"(PoFV only)
//	(not all types necessarily support all colors)

//Do try to use a different color or type for different kinds of fairies,
//so it's clear which ones are which.



//A basic fairy that fires aimed shots
//I put this one together to be simple/easy to modify
function TSampleFairy1(x,y,s,a){
	let fairy = SpawnFairy(x,y,"red","PoFV",10,100); //x,y,color,type,hitbox,life
	ObjMove_SetSpeed(fairy,s);
	ObjMove_SetAngle(fairy,a);
	//By doing it this way, you can use ObjMove_Foo on created fairies if you want
	TDoFairy;
	return fairy;
	
	task TDoFairy{
		wait(30); //delay before starting to shoot
		let shot; let fx; let fy; let count=0;
		while(!(ObjEnemy_GetLife(fairy)==0)){
			fx=ObjMove_GetX(fairy); fy=ObjMove_GetY(fairy); //update each frame with the fairy's position
			SE_Play(se_shot,60); //(se constant, volume%)
			
			a = GetAngleToPlayer(fairy);
			//Do the shots
			ascent(i in 0..3){
				shot = CreateShotA1(fx,fy,2.5,a-5+5*i,BALL_O_RED,10);
			}
			//Those were the shots
			
			wait(15); count++; //delay before doing more shots
		}
	}
}





//A basic fairy that fires aimed shots and extra aimed streams going around
task TFairy1(x,y,s,a){
	let fairy = SpawnFairy(x,y,"red","PoFV",10,100);
	let col = randint(0,7); //slapdash measure to make it easier to see what they're doing - make each one fire a random color of shots
	ObjMove_SetSpeed(fairy,s);
	ObjMove_SetAngle(fairy,a);
	wait(60);
	let shot; let fx; let fy; let count=0; let off=0; let da=13;
	while(!(ObjEnemy_GetLife(fairy)==0)){
		fx=ObjMove_GetX(fairy); fy=ObjMove_GetY(fairy); //update each frame with the fairy's position
		a = GetAngleToPlayer(fairy);
		SE_Play(se_shot3,50);
		
		let n = altBin(count); //0 or 1
		ascent(i in n..2){ //only shoot the ones aimed straight at the player every other time
			shot = CreateShotA1(fx,fy,2.5,a+off*i,DOT_WHITE+col,5);
			shot = CreateShotA1(fx,fy,2.5,a-off*i,DOT_WHITE+col,5);
		}
		wait(10); off+=da; count++;
	}
}


//A fairy that slows to a stop, pauses, and goes off in another direction
task TFairy2(x,y,s,a,del,pause,s2,a2){
	let fairy = SpawnFairy(x,y,"blue","PoFV",10,200);
	Move;
	wait(60);
	let shot; let fx; let fy; let count=0; let off=0; let da=13;
	while(!(ObjEnemy_GetLife(fairy)==0)){
		fx=ObjMove_GetX(fairy); fy=ObjMove_GetY(fairy); //update each frame with the fairy's position
		SE_Play(se_shot2,50);
		
		ascent(i in 1..3){
			shot = CreateShotA1(fx,fy,2.5,90+off*i,PEL_BLUE,5);
			shot = CreateShotA1(fx,fy,2.5,90-off*i,PEL_BLUE,5);
		}
		wait(10); off+=da; count++;
		// wait(max(30-sqrt(3*count),10)); off+=da; count++;
	}
	
	task Move{
		ObjMove_SetDestAtWeight(fairy,x+s*del*cos(a),y+s*del*sin(a),del,10);
		wait(del);
		wait(pause);
		ObjMove_SetSpeed(fairy,s2);
		ObjMove_SetAngle(fairy,a2);
	}
}



//A fairy that goes to a point, sprays a burst of semirandom shots at the player, and goes off in another direction
task TFairy3(x,y,x1,y1,del,pause,s2,a2){
	let fairy = SpawnFairy(x,y,"big","PoFV",10,300);
	Move;
	let shot; let fx; let fy; let count=0; let a;

	wait(del);
	loop(40){
		if(Obj_IsDeleted(fairy)){break;}
		fx=ObjMove_GetX(fairy); fy=ObjMove_GetY(fairy); //update each frame with the fairy's position
		SE_Play(se_shot,60);
		
		a = GetAngleToPlayer(fairy);
		ascent(i in 0..3){
			shot = CreateShotA1(fx,fy,2.5,a+120*i+rand(-15,15),BALL_O_GREEN,10);
			shot = CreateShotA1(fx,fy,2.5,a-120*i+rand(-15,15),BALL_O_AQUA+500,10);
		}
		wait(3); count++;
	}
	
	task Move{
		ObjMove_SetDestAtWeight(fairy,x1,y1,del,10);
		wait(del);
		wait(pause);
		ObjMove_SetSpeed(fairy,s2);
		ObjMove_SetAngle(fairy,a2);
	}
}


