
task TShotAll
{
	LoadTexture(IMG_SHOT);
	TShotSanae;
	TShot2Sanae;

}

task TShotSanae
{
	let pShot=false;
	ShotCheck;
	let Speed=22.5;
	let MainDamage=3.0;
	let DamageRate=1*2;
	while(SELECT_PLAYER==SELECT_SANAE)
	{
		while(!pShot){yield;}
		if(GetKeyState(KEY_P)==KEY_PUSH||GetKeyState(KEY_P)==KEY_HOLD)
		{
			MainShot(GetPlayerX()+8, GetPlayerY(), Speed, 270, 9999, 1, 109,1);
			MainShot(GetPlayerX()-8, GetPlayerY(), Speed, 270, 9999, 1, 109,-1);
		}
		else
		{
			MainShot(GetPlayerX()+8, GetPlayerY(), Speed, 270, MainDamage, 1, 109,1);
			MainShot(GetPlayerX()-8, GetPlayerY(), Speed, 270, MainDamage, 1, 109,-1);
		}
		PlaySE(SE_SHOT);
		loop(3){yield;}
	}

	task ShotCheck
	{
		while(SELECT_PLAYER==SELECT_SANAE)
		{
			if((GetVirtualKeyState(VK_SHOT)==KEY_PUSH || GetVirtualKeyState(VK_SHOT)==KEY_HOLD) && GetPlayerState==STATE_NORMAL && IsPermitPlayerShot&&SELECT_PLAYER==SELECT_SANAE&&!OnSpell)
			{
			pShot=true;

			}
			else
			{
			pShot=false;

			}
			yield;
		}
	}

	task MainShot(x,y,speed,angle,damage,pene,id,turner)
	{
		let obj=CreatePlayerShotA1(x,y,speed,angle,damage,pene,id);
		let scale=1;
		ObjRender_SetScaleXYZ(obj,scale,scale,scale);
		Obj_SetRenderPriorityI(obj,40);
		let OldX;
		let OldY;
		MOVE(obj,turner);
		while(!Obj_IsDeleted(obj))
		{
			OldX=ObjMove_GetX(obj);
			OldY=ObjMove_GetY(obj);
			angle=ObjMove_GetAngle(obj);
			yield;
		}
		HitEffect(OldX,OldY,speed,angle);
		Obj_Delete(obj);
	}
	task MOVE(obj,turner)
	{
		let c = 0;
		while(!Obj_IsDeleted(obj))
		{
			ObjMove_SetAngle(obj,-90+(17*cos(c))*turner);
			c+=60;
			yield;
		}
	}
	task HitEffect(x,y,speed,angle)
	{
		let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		ObjPrim_SetTexture(obj,IMG_SHOT);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
		ObjPrim_SetVertexCount(obj, 4);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(obj,40);
		ObjRender_SetAngleZ(obj,0);

		ObjPrim_SetDestCenter(obj,411,49,426,63);

		ObjRender_SetPosition(obj,x+1,y-18,0);
		speed/=8;
		let Alpha=0.75;
		let R=255;
		let G=255;
		let B=255;
		loop(15)
		{
			ObjRender_SetPosition(obj,ObjRender_GetX(obj)+speed*cos(angle),ObjRender_GetY(obj)+speed*sin(angle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
		//	ObjRender_SetAngleZ(obj,angle);
			Alpha-=0.25/15;
			yield;
		}

		ObjPrim_SetDestCenter(obj,411,33,426,47);

		loop(5)
		{
			ObjRender_SetPosition(obj,ObjRender_GetX(obj)+speed*cos(angle),ObjRender_GetY(obj)+speed*sin(angle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
		//	ObjRender_SetAngleZ(obj,angle);
			Alpha-=0.25/5;
			yield;
		}

		ObjPrim_SetDestCenter(obj,411,17,426,31);

		loop(5)
		{
			ObjRender_SetPosition(obj,ObjRender_GetX(obj)+speed*cos(angle),ObjRender_GetY(obj)+speed*sin(angle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
		//	ObjRender_SetAngleZ(obj,angle);
			Alpha-=0.25/5;
			yield;
		}
		ObjPrim_SetDestCenter(obj,411,1,426,15);

		loop(5)
		{
			ObjRender_SetPosition(obj,ObjRender_GetX(obj)+speed*cos(angle),ObjRender_GetY(obj)+speed*sin(angle),0);
			ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
		//	ObjRender_SetAngleZ(obj,angle);
			Alpha-=0.25/5;
			yield;
		}
		Obj_Delete(obj);
	}

}
task TShot2Sanae
{//??
	let pShot=false;
	ShotCheck;
	let ShotDamage=10.0*0*2;
	let LaserDamage=0.6*2;
	let DamageRate=1*2;
	let ShotAngle_P1=[250,0,0,0];
	let ShotAngle_P2=[270,270,0,0];
	let ShotAngle_P3=[225,270+20,315,0];
	let ShotAngle_P4=[270,270-35,270,270+35];
	let ShotAngle=[ShotAngle_P1,ShotAngle_P2,ShotAngle_P3,ShotAngle_P4];
	
	let ShotAngle2_P1=[290,0,0,0];
	let ShotAngle2_P2=[250,290,0,0];
	let ShotAngle2_P3=[315,270-20,225,0];
	let ShotAngle2_P4=[270+15,270-45,270-15,270+45];
	let ShotAngle2=[ShotAngle2_P1,ShotAngle2_P2,ShotAngle2_P3,ShotAngle2_P4];
	
	let LaserLagCount=6;
	let ShotLagCount=0;
	while(SELECT_PLAYER==SELECT_SANAE)
	{
		while(!pShot){ShotLagCount=0;yield;}
		if(IsPlayerSpellActive){DamageRate=0.5*2;}
		else{DamageRate=1.0*2;}
		if(GetVirtualKeyState(VK_SLOWMOVE)==KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE)==KEY_HOLD)
		{
			ascent(i in 0..PlayerPower_Int)
			{	
				SnakeShot(OptionX[i]+4,OptionY[i],270,ShotDamage,0);
				SnakeShot(OptionX[i]-4,OptionY[i],270,ShotDamage,0);
			}
			ShotLagCount+=1;
			loop(8){yield;}
			if(ShotLagCount%2==0){loop(3){yield;}}
		}
		else
		{
//			PlaySE(SE_MISSILE);

			ascent(i in 0..PlayerPower_Int)
			{
				FrogShot(OptionX[i],OptionY[i],ShotAngle[PlayerPower_Int-1][i],ShotDamage*3,0);
				FrogShot(OptionX[i],OptionY[i],ShotAngle2[PlayerPower_Int-1][i],ShotDamage*3,1);
			}
			
			ShotLagCount+=1;
			loop(3){yield;}
			if(ShotLagCount%1==0)
			{
				loop(30)
				{	
					if(GetVirtualKeyState(VK_SLOWMOVE)==KEY_PUSH ||GetVirtualKeyState(VK_SLOWMOVE)==KEY_HOLD)
					{
					}
					else
					{
						yield;
					}
				}
			}
		}

		loop(1){yield;}
	}

	task ShotCheck
	{
		while(SELECT_PLAYER==SELECT_SANAE)
		{
			if((GetVirtualKeyState(VK_SHOT)==KEY_PUSH || GetVirtualKeyState(VK_SHOT)==KEY_HOLD) && GetPlayerState==STATE_NORMAL && IsPermitPlayerShot&&SELECT_PLAYER==SELECT_SANAE&&!OnSpell)
			{
			pShot=true;

			}
			else
			{
			pShot=false;

			}
			yield;
		}
	}
	task FrogShot(x,y,angle,damage,Opnum)
	{
		let speed=8;
		let speedPlus=2;
		let obj=CreatePlayerShotA1(x,y,speed,angle,damage,1,99);
		ObjMove_SetAcceleration(obj,-0.2);
		ObjMove_SetMaxSpeed(obj,4);
		Obj_SetRenderPriorityI(obj,40);
		let scale=1.0;
		ObjRender_SetScaleXYZ(obj,scale,scale,scale);
		let count=2;
		let OldX=x;
		let OldY=y;
		let Alpha=255;
		GraChange;
		loop(6)
		{
			if(Obj_IsDeleted(obj)){break;}
			OldX=ObjMove_GetX(obj);
			OldY=ObjMove_GetY(obj);
			count+=1;
			yield;
		}
		while(!Obj_IsDeleted(obj))
		{
			OldX=ObjMove_GetX(obj);
			OldY=ObjMove_GetY(obj);
			speed = ObjMove_GetSpeed(obj);
			count+=1;
			yield;
		}
		ExplodeAttack(OldX,OldY);
		T_HitEffect(OldX,OldY,speed,angle);
		Obj_Delete(obj);

		task GraChange
		{
			while(!Obj_IsDeleted(obj))
			{	
				//if(count%8<4){ObjShot_SetGraphic(obj,23);}
			//	else{ObjShot_SetGraphic(obj,24);}
				yield;
			}
		}

		task ExplodeAttack(x,y)
		{
			if(y>0&&GetPlayerState==STATE_NORMAL && IsPermitPlayerShot){
			let objAK=CreatePlayerShotA1(x,y,0,0,2,65525,21);

			
			ObjRender_SetAlpha(objAK,0);
			loop(10)
			{
				ObjShot_SetIntersectionCircleA1(objAK,24);
				loop(2){yield;}
			}
			Obj_Delete(objAK);
			}
			
		}

		task T_HitEffect(x,y,speed,angle)
		{
			if(y>0)
			{
	//		PlaySE(SE_MISSILE2);
			HitEffect(x,y,3);
			ascent(i in 0..10)
			{
				let ra=rand(0,360);
				HitEffect(x+4*i*cos(ra),y+4*i*sin(ra),1);
				y-=4;
				loop(2){yield;}
			}
			}
		}

		task HitEffect(x,y,Scaleadd)
		{
			let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
			ObjPrim_SetTexture(obj,IMG_SHOT);
			ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
			ObjPrim_SetVertexCount(obj, 4);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			Obj_SetRenderPriorityI(obj,40);
			ObjRender_SetAngleZ(obj,0);

			ObjRender_SetPosition(obj,x,y,0);
			let Alpha=0.5;
			let Scale=0;
			let R=255;
			let G=255;
			let B=255;

			ObjPrim_SetDestCenter(obj,96,97,128,128);
			loop(4)
			{
				ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
				Scale+=Scaleadd/4;
				ObjRender_SetScaleXYZ(obj,Scale,Scale,1);
				yield;
			}
			ObjPrim_SetDestCenter(obj,96,65,128,96);
			loop(4)
			{
				ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
				ObjRender_SetScaleXYZ(obj,Scale,Scale,1);
				yield;
			}
			Alpha=0.25;
			ObjPrim_SetDestCenter(obj,96,33,128,64);
			loop(4)
			{
				ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
				ObjRender_SetScaleXYZ(obj,Scale,Scale,1);
				yield;
			}
			ObjPrim_SetDestCenter(obj,96,1,128,32);
			loop(4)
			{
				ObjRender_SetColor(obj,R*Alpha,G*Alpha,B*Alpha);
				ObjRender_SetScaleXYZ(obj,Scale,Scale,1);
				yield;
			}
			Obj_Delete(obj);
		}
	}

	task SnakeShot(x,y,angle,damage,Opnum)
	{
		let scale=1.0;
		
		let speed=3;
		let obj=CreatePlayerShotA1(x,y-10,10,angle,5,1,108);

		
		Obj_SetRenderPriorityI(obj,40);

		ObjRender_SetScaleXYZ(obj,scale,scale,scale);
		let count=0;
		let OldX=x;
		let OldY=y;
		let Alpha=255;
		ObjShot_SetIntersectionEnable(obj,true);
		let ANG = ObjMove_GetAngle(obj);
		ObjRender_SetAlpha(obj,192);
		
		let swatch = 1;
		let swatch2 = 1;
		while(!Obj_IsDeleted(obj))
		{
			speed = ObjMove_GetSpeed(obj);
			OldX=ObjMove_GetX(obj);
			OldY=ObjMove_GetY(obj);
			ANG = ObjMove_GetAngle(obj);
				let EnemyObjectArray=GetIntersectionRegistedEnemyID;
				if(swatch==1&&swatch2==1){
				//angle = 270;
				}
				let tmpAngle;
				if(swatch==1){
				if(length(EnemyObjectArray)!=0 )
				{
					ascent(i in 0..length(EnemyObjectArray))
					{
						if(ObjMove_GetY(obj)<ObjMove_GetY(EnemyObjectArray[i])+10&&ObjMove_GetY(obj)>ObjMove_GetY(EnemyObjectArray[i])-10)
						{
							
						tmpAngle = atan2(ObjMove_GetY(EnemyObjectArray[i])-ObjMove_GetY(obj),ObjMove_GetX(EnemyObjectArray[i])-ObjMove_GetX(obj));
						tmpAngle %= 360;
						swatch=0;
						swatch2=0;
						if(tmpAngle > 180 && tmpAngle < 270){
							angle = 180;
							break;
						}
						else if(tmpAngle > 270 && tmpAngle < 360){
							angle = 0;
							break;
						}
						}
					}
				}
				}
				if(swatch==0){
				ObjMove_SetSpeed(obj,20);
				ObjMove_SetAngle(obj,angle);
				}
			yield;
			
		}
		HitEffect(OldX,OldY,angle,speed);
		
		task HitEffect(x,y,angleT,speed)
		{
			let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
			ObjPrim_SetTexture(obj,IMG_SHOT);
			ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
			ObjPrim_SetVertexCount(obj, 4);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			Obj_SetRenderPriorityI(obj,40);
			//ObjRender_SetAngleZ(obj,0);
			ObjRender_SetAngleZ(obj,angleT+90);
			ObjRender_SetPosition(obj,x,y,0);
			let Alpha2=192;
			let Scale=1;
			let R=255;
			let G=255;
			let B=255;
			
			ObjPrim_SetDestCenter(obj,381,193,391,252);
			loop(20)
			{
				ObjRender_SetPosition(obj,ObjRender_GetX(obj)+speed/6*cos(angleT),ObjRender_GetY(obj)+speed/6*sin(angleT),0);
				Scale+=1/20;
				ObjRender_SetScaleXYZ(obj,Scale,Scale,1);
				ObjRender_SetAlpha(obj,Alpha2);
				Alpha2-=192/20;
				yield;
			}
			Obj_Delete(obj);
		}
	}
}