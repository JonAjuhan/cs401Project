#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Cascade \"Hyper Danmaku Reactor\""]
#Text["..."] 
#BGM["./bgm/bgm - CC-CGR-loop.ogg"]
#System["./system/Default_System.txt"]
#Background["./system/Background_Sky.txt"]

#include "./Index.txt"

let timer = 37; //37

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(2000);
	}
	case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(5000000);
    }
	case(EV_REQUEST_IS_DURABLE_SPELL) {
		SetScriptResult(true);
	}
	
	case(EV_REQUEST_TIMER) { SetScriptResult(timer*60); }
}
@Initialize
{
	SetCommonData("CurrentSC","Cascade \"Hyper Danmaku Reactor\"");
	SetCommonData("Difficulty","Extra");
	
	boss = spawnBoss();
	
	ObjEnemy_SetDamageRate(boss,0,0);
	SetShotAutoDeleteClip(16,16,16,16);
	
	MainTask;
	

}
@MainLoop
{

	if(ObjEnemy_GetInfo(boss, INFO_LIFE) <= 0 && !finishing)
	{
		finishing = true;
		TBreakSpell([]);
	}
	else {
		SetBossHitbox(boss,ex,ey);
	}
	frame++;
	yield;
}


task MainTask {
	ObjEnemy_SetDamageRate(boss,0,0);
	ObjMove_SetDestAtFrame(boss, cx, cy-120, 60);
	
	SetSpellCard;
	MCircNextAlpha = 80;
	Obj_SetValue(objSpellCircle,"MaxAlpha",64);
	
	ObjEnemyBossScene_StartSpell(objScene);
	ObjEnemyBossScene_SetSpellTimer(objScene,timer*60); //5760
	
	//SetCaution;
	//SetBossBlur(true);
	AuraRainbow(boss,255,255,255);
	TSpellImmune;

	//ConcentrationA2(boss,"HEXAGON",90,3,10,[255,0,255]);
		
	wait(90);
	Tmovement(cx-120,cx+120, cy-90,cy-60, 60,240, [MOVE_PLAYERBIAS,2,0,MOVE_MAXSPEED,1.5] );
	ObjEnemy_SetDamageRate(boss,24,8);
	frame = 0;
	
	
	TShoot;
	
}






task TShoot{
	let shot;

	let N = 30;
	let a0; let a;
	let del; let da;

	while(!Obj_IsDeleted(boss)){
		SE_Play(se_charge2,100);
		wait(20);
		SE_Play(se_charge,100);
		ObjMove_Still(boss,20);
		wait(20);
		SetAttackPose(40);
		wait(20);
		
		SE_Play(se_shot,100);
		shot = CreateShotA2(swdx,swdy,0,GetAngleToPlayer(boss),0.1,30,LARGE_RED+500,15);
		ObjMove_SetDestAtWeight(shot,px,py,15,30);
		ObjShot_SetSpellResist(shot,true);
		wait(60);
		let shot2 = CopyShot(shot); ObjMove_SetSpeed(shot2,0); ObjShot_FadeDelete(shot2);
		
		ObjMove_AddPatternA2(shot,0,NO_CHANGE,NO_CHANGE,0.1,0,3);
		ObjShot_SetGraphic(shot,BALL_O_WHITE);
		ObjRender_SetBlendType(shot,BLEND_ADD_ARGB);
		setalpha(shot,180);
		
		let shot1 = CopyShot(shot);
		ObjMove_SetAngle(shot ,ObjMove_GetAngle(shot )+90);
		ObjMove_SetAngle(shot1,ObjMove_GetAngle(shot1)-90);
		SE_Play(se_kira02,60);
	
		SplitRecursive(shot, 8,135,15,5,0.5);
		SplitRecursive(shot1,8,135,15,5,0.5);
		
		SE_Play(se_charge3b,100);
		
		
		wait(150);
	}
}

task SplitRecursive(shot0,num,ang,del,ra,rd){
	wait(del+randint(-rd,rd)); if(Obj_IsDeleted(shot0)){return;}
	
	let c = 0;
	alternative(num)
	case(8){c=0;}
	case(7){c=1;}
	case(6){c=2;}
	case(5){c=3;}
	case(4){c=4;}
	case(3){c=5;}
	case(2){c=6;}
	case(1){c=14;}
	case(0){c=7;}
	
	ObjShot_SetGraphic(shot0,BALL_WHITE + c - 16*randBin*randBin);
	
	let shot1 = CopyShot(shot0);
	ObjMove_SetAngle(shot0,ObjMove_GetAngle(shot0)+ang+randint(-ra,ra));
	ObjMove_SetAngle(shot1,ObjMove_GetAngle(shot1)-ang+randint(-ra,ra));
	SE_Play(se_kira02,60);
	if(num>0){
		num--;
		SplitRecursive(shot0,num,ang+randint(-ra,ra),del,ra,rd);
		SplitRecursive(shot1,num,ang+randint(-ra,ra),del,ra,rd);
	}else{
		ObjShot_SetSpellResist(shot0,false);
		ObjShot_SetSpellResist(shot1,false);
		SE_Play(se_chime2,100);
	}
}


