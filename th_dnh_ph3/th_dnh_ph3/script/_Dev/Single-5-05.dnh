#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Boundary \"Mandala of Scatterment and Concentration\""]
#Text["..."] 
#BGM["./bgm/bgm - A Maiden's Illusionary Funeral ~ Necro-Fantasy.ogg"]						//"./bgm/bgm - Bhava-Agra As Seen Through a Child's Mind.mp3"]
#System["./system/Default_System.txt"]
#Background["./system/Background_Sky.txt"]

#include "./Index.txt"


let fog; let ingap; let outgap;

let timer = 37; //30

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(2000);
	}
	case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(5000000);
    }
	case(EV_REQUEST_IS_DURABLE_SPELL) {
		SetScriptResult(true);
	}
//	case(EV_REQUEST_IS_LAST_SPELL){
//		SetScriptResult(true);
//	}
	
	case(EV_REQUEST_TIMER) { SetScriptResult(timer*60); } //4500
}
@Initialize
{
	SetCommonData("CurrentSC","Boundary \"Mandala of Scatterment and Concentration\"");
	SetCommonData("Difficulty","Phantasm");
	
	boss = spawnBossYukari();
	
	ObjEnemy_SetDamageRate(boss,0,0);
	SetShotAutoDeleteClip(64,96,64,64);
	
	MainTask;
	

}
@MainLoop
{

	if(ObjEnemy_GetInfo(boss, INFO_LIFE) <= 0 && !finishing)
	{
		finishing = true;
		TBreakSpell([]);
	}
	else {
		SetBossHitbox(boss,ex,ey);
	}
	frame++;
	yield;
}


task MainTask {
	
	ObjEnemy_SetDamageRate(boss,0,0);
	ObjMove_SetDestAtFrame(boss, cx, cy-120, 60);
	
	SetSpellCard;
//	MCircNextAlpha = 80;
//	Obj_SetValue(objSpellCircle,"MaxAlpha",64);
	
	ObjEnemyBossScene_StartSpell(objScene);
	ObjEnemyBossScene_SetSpellTimer(objScene,timer*60); //5760
	
//	SetCaution;
//	SetBossBlur(true);
	AuraRainbow(boss,255,255,255);
	TSpellImmune;
	
	wait(90);
	Tmovement(cx-120,cx+120, cy-90,cy-60, 60,240, [MOVE_PLAYERBIAS,2,0,MOVE_MAXSPEED,1.5] );
	ObjEnemy_SetDamageRate(boss,24,8);
	frame = 0;

	TShoot;
	//TBigShots;
	TFog;
	TSafespotTrain;
	
//	TRandomGaps;
}




task TShoot {
	
	let shot; //let types = [PELLET_RED+500,PELLET_YELLOW+500,PELLET_GREEN+500,PELLET_AQUA+500,PELLET_MAGENTA+500]; let nT = length(types); //[BUTT_RED,BUTT_GREEN,BUTT_PURPLE];
	//let types = [BUTT_RED,BUTT_ORANGE,BUTT_YELLOW,BUTT_GREEN,BUTT_BLUE,BUTT_AQUA,BUTT_PURPLE,KNIFE_RED,KNIFE_ORANGE,KNIFE_YELLOW,KNIFE_GREEN,KNIFE_BLUE,KNIFE_AQUA,KNIFE_PURPLE]; 
	let types = [BUTT_GREEN,BUTT_BLUE,BUTT_AQUA,BUTT_PURPLE,KNIFE_RED,KNIFE_ORANGE,KNIFE_YELLOW]; 
	
	let nT = length(types);
	
	let a = 0; let a2 = 0;
	let count = 0;
	let endpattern = 0;
	while(!Obj_IsDeleted(boss)) {
		
		loop(30){
			loop(20){ 
				shot = CreateShotA1(swdx+20*cos(a+0)    ,swdy+20*sin(a+0)    ,rand(1,3), a+0  , SUPP_RED+500   , 10); 
			//	shot = CreateShotA1(swdx+20*cos(a+0),swdy+20*sin(a+0),rand(1,2), a+0, ICE_MAGENTA+500, 10);

				Obj_SetValue(shot,"HoldShot",rand(0,30));
				Obj_SetValue(shot,"GapConvert",false);
				Obj_SetValue(shot,"ConvertGraphic",types[count%nT]);
	
			
				shot = CreateShotA2(swdx,swdy,  rand(rand(0,2),2)*altSign(count)*rand(-0.25,1.75), a2+rand(-5,5)+120*(count%3),  rand(-0.05,-1.5)*altSign(count),    2,  GLOW_RED+500, 10);
			
				Obj_SetValue(shot,"GapConvert",true);
				Obj_SetValue(shot,"ConvertDelay",1);
				Obj_SetValue(shot,"ConvertSpeed",0); 
				Obj_SetValue(shot,"ConvertAcceleration",0.05);
				Obj_SetValue(shot,"ConvertAngularVelocity",rand(-1,1));
				Obj_SetValue(shot,"ConvertMaxSpeed",2.5);
				//Obj_SetValue(shot,"ConvertGraphic",types[count%nT]);			
				Obj_SetValue(shot,"HoldShot",rand(0,30));
				
				
				count++;
				a  += 2;
				a2 += absolute(1.5*sin(count));
				//a = 90+180*sin(count);
			}
			SE_Play(se_hornshort,60);
			
			count++;
			wait(10);
		}
		
		let x; let y;
		if(endpattern==0){
			outgap = CreateGapA1(cx        ,cy     ,sx,45 ,90          ,120,0, GAP_OUT,TARGET_ENEMY,0     ,[GAP_HIDDEN]);
			Obj_SetValue(outgap,"HoldShots",-1);
			loop(20){
				x=rand(0,sx); y=rand(0,sy);
				ingap  = CreateGapA1(x,y,100,15 ,angleBetween(x,y,ex,ey) ,30 ,0  , GAP_IN ,TARGET_ENEMY,outgap,[]);
				wait(5);
			}
			ObjGap_SetAngle(outgap,angleBetween(ObjRender_GetX(outgap),ObjRender_GetY(outgap),px,py));
			Obj_SetValue(outgap,"Unhide",0);
			wait(20);
			Obj_SetValue(outgap,"HoldShots",0);
			endpattern = 1;
		}else{
			let outgaps = [];
			loop(20){
				x=rand(0,sx); y=rand(0,sy);
				outgap = CreateGapA1(x,y,100,15 ,angleBetween(x,y,px,py) ,30 ,0  , GAP_OUT,TARGET_ENEMY,0     ,[GAP_HIDDEN]);
				ingap  = CreateGapA1(x,y,100,15 ,angleBetween(x,y,ex,ey) ,30 ,0  , GAP_IN ,TARGET_ENEMY,outgap,[]);
				Obj_SetValue(outgap,"HoldShots",-1);
				outgaps = outgaps ~ [outgap];
				wait(5);
			}
			ObjGap_SetAngle(outgap,angleBetween(ObjRender_GetX(outgap),ObjRender_GetY(outgap),px,py));
			ascent(i in 0..length(outgaps)){
				Obj_SetValue(outgaps[i],"Unhide",0);
			}
			wait(20);
			ascent(i in 0..length(outgaps)){
				Obj_SetValue(outgaps[i],"HoldShots",0);
			}
			endpattern = 0;
		}
		
	}
}


task TRandomGaps{
	wait(180);
	let ingap; let outgap; let a;
	while(!Obj_IsDeleted(boss)){
		outgap = CreateGapA1(rand(0,sx),rand(0,sy),50,15 ,rand(0,360) ,90,0 , GAP_OUT,TARGET_ENEMY,0     ,[]);
		ingap  = CreateGapA1(rand(0,sx),rand(0,cy),50,15 ,rand(0,360) ,90,0 , GAP_IN ,TARGET_ENEMY,outgap,[]);
		Obj_SetValue(ingap,"WarpSE",se_gapshot);
		wait(rand(20,40));
		a=rand(0,360);
		outgap = CreateGapA1(px+50*cos(a),py+50*sin(a) ,50,15 ,a+180       ,90,0 , GAP_OUT,TARGET_ENEMY,0     ,[]);
		ingap  = CreateGapA1(rand(0,sx)  ,rand(0,cy)   ,50,15 ,rand(0,360) ,90,0 , GAP_IN ,TARGET_ENEMY,outgap,[]);
		Obj_SetValue(ingap,"WarpSE",se_gapshot);
		wait(rand(20,40));
	}
}









task TFog {
	
	let targ = CreateDummyShot(cx,cy); 
	
	//"Clouds"
	fog = NightBlindA1(300,300,0,  0,255,120);
	ObjRender_SetColor(fog,255,128,255);
	ObjRender_SetBlendType(fog,BLEND_ADD_ARGB);
	Obj_SetValue(fog,"Target",targ);
	Obj_SetValue(fog,"RotSpeed",5); //3
	Obj_SetValue(fog,"Check",false);
	
	// while(!Obj_IsDeleted(boss)){
		// ObjMove_SetDestAtFrame(targ,ex,ey,240);
		// yield;
	// }
	
	
	
}




//if the player tries to hide above her, they get train'd
task TSafespotTrain {
	

	
	while(!Obj_IsDeleted(boss)){
		if(py<ey){wait(60);if(py<ey){
			//Get train'd on
			let dir = boolSign(px>cx); let y = (90+py)/2;
			CreateGapA1(cx+cx*dir,y,200,50,90+90*dir,90,0,  GAP_OUT,TARGET_ENEMY, 0, []);
			SetBossBlur(true);
			wait(30);
			CreateTrainA2(cx+(cx+250)*dir,y,0,90+90*dir,0.15,15,-0.05*dir,0);
			SE_Play(se_train,200); SE_Play(se_tracks,200);
			wait(50);
			CreateGapA1(cx-cx*dir,y+30,200,50,90-90*dir,40,0,  GAP_VOID,TARGET_ENEMY, 0, []);
			wait(120);
			SetBossBlur(false);
		}}
		yield;
	}
}




	

