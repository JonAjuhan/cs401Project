#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Lost World \"Urban Forest Ruins\""]
#Text["..."] 
#BGM["./bgm/bgm - A Maiden's Illusionary Funeral ~ Necro-Fantasy.ogg"]						//"./bgm/bgm - Bhava-Agra As Seen Through a Child's Mind.mp3"]
#System["./system/Default_System.txt"]
#Background["./system/Background_Sky.txt"]

#include "./Index.txt"


let fog; let ingap; let outgap;

let timer = 57; //30

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(2000);
	}
	case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(5000000);
    }
//	case(EV_REQUEST_IS_DURABLE_SPELL) {
//		SetScriptResult(true);
//	}
//	case(EV_REQUEST_IS_LAST_SPELL){
//		SetScriptResult(true);
//	}
	
	case(EV_REQUEST_TIMER) { SetScriptResult(timer*60); } //4500
}
@Initialize
{
	SetCommonData("CurrentSC","Lost World \"Urban Forest Ruins\"");
	SetCommonData("Difficulty","Phantasm");
	
	boss = spawnBossYukari();
	
	ObjEnemy_SetDamageRate(boss,0,0);
	SetShotAutoDeleteClip(64,96,64,64);
	
	MainTask;
	

}
@MainLoop
{

	if(ObjEnemy_GetInfo(boss, INFO_LIFE) <= 0 && !finishing)
	{
		finishing = true;
		TBreakSpell([]);
	}
	else {
		SetBossHitbox(boss,ex,ey);
	}
	frame++;
	yield;
}


task MainTask {
	
	ObjEnemy_SetDamageRate(boss,0,0);
	ObjMove_SetDestAtFrame(boss, cx, cy-120, 60);
	
	SetSpellCard;
//	MCircNextAlpha = 80;
//	Obj_SetValue(objSpellCircle,"MaxAlpha",64);
	
	ObjEnemyBossScene_StartSpell(objScene);
	ObjEnemyBossScene_SetSpellTimer(objScene,timer*60); //5760
	
//	SetCaution;


	AuraRainbow(boss,255,255,255);
	TSpellImmune;
	
	wait(90);
	ObjEnemy_SetDamageRate(boss,6,0);
	frame = 0;

	TFog;

	
	TSetup;


}




task TSetup{
	
	let outgap = CreateGapA1(cx/2,30 ,cx,55 ,90 ,300,0 , GAP_OUT,TARGET_ENEMY,0     ,[]);
	let ingap  = CreateGapA1(cx/2,230,cx,55 ,90 ,300,0 , GAP_VOID,TARGET_ENEMY,0   ,[]);
	ObjMove_SetDestAtWeight(boss,cx*3/2,100,45,10);
	wait(60);
	SetAttackPose(-1);
	wait(15);
	
	let x; let y; let sshot;
	ascent(i in 0..30){
		x=rand(30,cx-30); y=30;
		sshot = CreateSignA2(x,y,0,90, 0.15, 3.5, i%3, 60);
	//	ObjMove_SetAngularVelocity(sshot,1);
		//ObjMove_SetAngularVelocity(sign,rand(-0.5,0.5));
		ObjMove_AddPatternA2(sshot,60,0,NO_CHANGE,NO_CHANGE, 0, 3.5);
		SE_Play(se_gapshot,100);
		wait(5);
	}
	
	SetAttackPose(0);
	wait(60);
	ObjEnemy_SetDamageRate(boss,24,8);
	TSigneningAway;
	TSafespotTrain;
	Tmovement(cx-120,cx+120, cy-90,cy-60, 60,240, [MOVE_PLAYERBIAS,2,0,MOVE_MAXSPEED,1.5] );
	
}



task TSigneningAway {
	let a;
	
	let N = 5; let dA = 360/N; let rad = 50;
	while(!Obj_IsDeleted(boss)){
		a=rand(0,360);
		ascent(i in 0..N){
			SignGap(px+rad*cos(a+dA*i),py+rad*sin(a+dA*i),a+dA*i+180);
		}
		wait(60);
	}
	
}
task SignGap(x,y,a){
	let outgap = CreateGapA1(x,y ,70,25 ,a ,40,0 , GAP_OUT,TARGET_ENEMY,0     ,[]);
	let sign;
	wait(30);
	ascent(i in 0..3){
		sign = CreateSignA2(x,y,0,a, 0.15, 3.5, i, 60);
		ObjMove_SetAngularVelocity(sign,rand(-0.5,0.5));
		ObjMove_AddPatternA2(sign,60,NO_CHANGE,NO_CHANGE,NO_CHANGE, 0, 3.5);
		SE_Play(se_gapshot,100);
		wait(randint(1,5));
	}
}










task TFog {
	
	let targ = CreateDummyShot(cx,cy); 
	
	//"Clouds"
	fog = NightBlindA1(300,300,0,  0,255,120);
	ObjRender_SetColor(fog,255,128,255);
	ObjRender_SetBlendType(fog,BLEND_ADD_ARGB);
	Obj_SetValue(fog,"Target",targ);
	Obj_SetValue(fog,"RotSpeed",5); //3
	Obj_SetValue(fog,"Check",false);
	
	// while(!Obj_IsDeleted(boss)){
		// ObjMove_SetDestAtFrame(targ,ex,ey,240);
		// yield;
	// }
	
	
	
}




//if the player tries to hide above her, they get train'd
task TSafespotTrain {
	

	
	while(!Obj_IsDeleted(boss)){
	//	if(py<ey){wait(60);if(py<ey){
		wait(240);
			//Get train'd on
			let dir = boolSign(px>cx); let y = (90+2*py)/3;
			CreateGapA1(cx+cx*dir,y,200,50,90+90*dir,90,0,  GAP_OUT,TARGET_ENEMY, 0, []);
			if(absolute(y-ey)<100) { SetBossBlur(true); }
			wait(30);
			CreateTrainA2(cx+(cx+250)*dir,y,0,90+90*dir,0.15,15,-0.05*dir,0);
			SE_Play(se_train,200); SE_Play(se_tracks,200);
			wait(50);
			CreateGapA1(cx-cx*dir,y+30,200,50,90-90*dir,40,0,  GAP_VOID,TARGET_ENEMY, 0, []);
			wait(120);
			SetBossBlur(IsPlayerSpellActive);
	//	}}
		yield;
	}
}




	

