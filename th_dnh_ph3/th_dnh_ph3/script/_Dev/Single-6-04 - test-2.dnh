#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Test Sign \"Test 2\""]
#Text["..."] 
#BGM["./bgm/bgm - Hartmann's Youkai Girl.mp3"]
// #BGM["./bgm/bgm - Bhava-Agra As Seen Through a Child's Mind.mp3"]
#System["./system/Default_System.txt"]
#Background["./system/Background_Sky.txt"]

#include "./Index.txt"



let fog;

let timer = 37; //30

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(2000);
	}
	case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(5000000);
    }
	case(EV_REQUEST_IS_DURABLE_SPELL) {
		SetScriptResult(false);
	}
//	case(EV_REQUEST_IS_LAST_SPELL){
//		SetScriptResult(true);
//	}
	
	case(EV_REQUEST_TIMER) { SetScriptResult(timer*60); } //4500
}
@Initialize
{
	SetCommonData("CurrentSC","Test Sign \"Test\"");
	SetCommonData("Difficulty","Extra");
	
	boss = spawnBoss();
	
	ObjEnemy_SetDamageRate(boss,0,0);
	SetShotAutoDeleteClip(64,96,64,64);
	
	MainTask;
	

}
@MainLoop
{

	if(ObjEnemy_GetInfo(boss, INFO_LIFE) <= 0 && !finishing)
	{
		finishing = true;
		TBreakSpell([]);
	}
	else {
		SetBossHitbox(boss,ex,ey);
	}
	frame++;
	yield;
}


task MainTask {
	
	ObjEnemy_SetDamageRate(boss,0,0);
	ObjMove_SetDestAtFrame(boss, cx, cy-120, 60);
	
	SetSpellCard;
//	MCircNextAlpha = 80;
	Obj_SetValue(objSpellCircle,"MaxAlpha",64);
	
	ObjEnemyBossScene_StartSpell(objScene);
//	ObjEnemyBossScene_SetSpellTimer(objScene,timer*60); //5760
	
//	SetCaution;
//	SetBossBlur(true);
	AuraRainbow(boss,255,255,255);
	
	wait(90);
	Tmovement(cx-120,cx+120, cy-90,cy-60, 60,240, [MOVE_PLAYERBIAS,2,0,MOVE_MAXSPEED,1.5] );
	ObjEnemy_SetDamageRate(boss,24,8);
	frame = 0;

	TShoot;
}








task TShoot{
	loop{
		wait(60);
		TestExplode(rx,ry/2); 
		//rx and ry are very lazy shortcut functions
		//rx returns rand(0,sx) and ry returns rand(0,sy)
		//recall that sx is a global holding the width of the stage frame and ditto with sy/height
		//so ry/2 gets a random y in the top half of the screen
	}
}

function TestExplode(x,y){
	let a0 = rand(0,360); let a1 = getangle(ex,ey,x,y); let d1 = getdist(ex,ey,x,y);
	ascent(i in 0..90){
		CreateShotA1(ex+i/90*d1*cos(a1),ey+i/90*d1*sin(a1),2,a0+i*360/30,SCALE_AQUA+altBin(i)*altSign(i/3), 15+i+2*altSign(i));
		//a0+i*360/30: initial angle plus a bit each shot such that it goes around 3 times
		//SCALE_AQUA+altBin(i)*altSign(i/3): vary shot graphic. altBin returns 0/1, altSign 1/-1 depending on if input even or odd
		//15+i+2*altSign(i): increase shot's delay with i, plus a small alternating offset.
		//This allows all shots to be created at once, but start moving at different times.
	}
	SE_Play(se_shot2,100);
}