#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Suppression \"Butterfly Garden Choked With Vines\""]
#Text["..."] 
#BGM["./bgm/Suwa Foughten Field.mp3"]	//#BGM["./bgm - Last Word.ogg"]
#System["./system/Default_System.txt"]
#Background["./system/Background_Stars.txt"]

#include "./Index.txt"

let type0 = 210;
let type1 = 212;
let type2 = 216;



@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(2000);
	}
	case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(5000000);
    }
	 //case(EV_REQUEST_IS_DURABLE_SPELL) {
		// SetScriptResult(true);
	 //}
	case(EV_REQUEST_TIMER) { SetScriptResult(4500); }
}
@Initialize
{
	SetCommonData("CurrentSC","Suppression \"Butterfly Garden Choked With Vines\"");
	SetCommonData("Difficulty","Extra");
	
	boss = spawnBoss();
	
	ObjEnemy_SetDamageRate(boss,0,0);
	SetShotAutoDeleteClip(16,64,16,16);
	
	EnemyName(boss, "Andi", 255, 180, 255);
	
	MainTask;
	

}
@MainLoop
{

	if(ObjEnemy_GetInfo(boss, INFO_LIFE) <= 0 && !finishing)
	{
		finishing = true;
		TBreakSpell([]);
	}
	else {
		ObjEnemy_SetIntersectionCircleToShot(boss, ex, ey, 32); //hitbox against player bullets. 32 is the radius.
		ObjEnemy_SetIntersectionCircleToPlayer(boss, ex, ey, 24); //hitbox against the player. 24 is the radius.
	}
	frame++;
	yield;
}


task MainTask {
	
	ObjEnemy_SetDamageRate(boss,0,0);
	//ObjMove_SetDestAtFrame(boss, rand(cx+60, cx-60), rand(cy-120, cy-90), 60);
	ObjMove_SetDestAtFrame(boss, cx, cy-120, 60);
	
	SetSpellCard;
	ObjEnemyBossScene_StartSpell(objScene);
	ObjEnemyBossScene_SetSpellTimer(objScene,5760); //5760
	//TAfterImageBoss(boss,[255,255,255],1,1,15,3,BLEND_ADD_ARGB,0);
	SE_Play(nyaa,60);
	//SetCaution;

	wait(90);
	
	ObjEnemy_SetDamageRate(boss,24,8);


	
	frame = 0;
	
	TShoot;
	TBigShots;
//	Tmovement(cx-60,cx+60, cy,cy-60, 60,240, []); //[MOVE_PLAYERBIAS,2,0]

	//NightBlindA1(600,100,240,  0,255,30);

}





let N = 1; //3

let rad0 = 30;
//let rad1 = rad0+5*M;
let off0 = 90;
let coloff = 0;

task TShoot {
	let seobj = ObjSound_Create;
	let shot;
	
	let a = 0;
	

	let types = [758]; let nt = length(types);
	
	while(!Obj_IsDeleted(boss)) {
		ascent(j in 0..14){
			ascent(k in 0..4){
				shot = CreateShotA2(swdx,swdy,5-k,j*360/14+a, -0.05,2.5-0.5*k,   types[j%nt], 10);
				ObjMove_SetAngularVelocity(shot,0.5*k*altSign(j));
				ObjMove_AddPatternA2(shot,180,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.5*k*altSign(j+1),2.5-0.5*k  );
				ObjMove_AddPatternA2(shot,360,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.5*k*altSign(j),2.5-0.5*k  );
			
				//Normal
				//ObjMove_AddPatternA2(shot,720,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.25*k*altSign(j+1),2.75-0.45*k  );
				//ObjMove_AddPatternA2(shot,900,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.25*k*altSign(j),2.75-0.45*k  );
				//Hard
				ObjMove_AddPatternA2(shot,720,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.35*k*altSign(j+1),2.75-0.45*k  );
				ObjMove_AddPatternA2(shot,900,NO_CHANGE,NO_CHANGE, NO_CHANGE,0.35*k*altSign(j),2.75-0.45*k  );
				
				ObjShot_SetSpellResist(shot,true);
				
				
				
			}
			
		}
		SE_PlayA2(se_chime,40,seobj,30);
		a++;
		wait(15);
	}
}



task TBigShots {
	let shot; //let ang;
	
	let x; let y;
	let dir=1;
	
	let types = [292,296,298]; let nt = length(types);
	
	while(!Obj_IsDeleted(boss)) {
		wait(30);
		SetAttackPose(45);
		wait(30);
		
		x = GetSwordTipX(); y = GetSwordTipY();
		// let N=10; let Rings = 3;
		// ascent(i in 0..N){
			// ascent(j in 0..Rings){
				// shot = CreateShotA2(x,y, 5-j,i*360/N, -0.05,2.5-0.5*j,   292, 30); //765, 875
				// ReAim(shot, 30, 2.5-0.5*j);
				// //ObjMove_SetAngularVelocity(shot,0.5*dir/(j+1));
			// }
		// } 
		let ang = 90+45*dir;
		ascent(i in 0..3) {
			ascent(j in 1..4){
				shot = CreateShotA2(x,y, 4-i,ang, -0.05*(i/3),2-0.5*i,   types[(i+j)%nt], 30); //765, 875
				ReAim(shot, 30, 2.5-0.45*i, j/3);
			}
		}
		SE_Play(se_shot,100);
		shot = CreateShotA1(x,y, 0,0, 0,0); ObjShot_SetDeleteFrame(shot,50);
		ConcentrationA4Invert(shot,"HEXAGON",3,50,[255,0,200]);	
		dir*=-1;
		
		wait(60);
//		ObjMove_SetDestAtFrame(boss,rand(cx-60,cx+60),rand(cy,cy-60),60);
	}
	
	
}



task ReAim(shot, del, mspd, scl) {
	let dA;
	while(!Obj_IsDeleted(shot)){
		dA = (GetAngleToPlayer(shot)-ObjMove_GetAngle(shot))%180;
		if( dA < 91 && dA > 89 ) {
			//ObjMove_SetAngle(shot,GetAngleToPlayer(shot));
			ObjMove_AddPatternA2(shot,0, 0,GetAngleToPlayer(shot), 0.075*scl,0, mspd*scl);
			return;
		}
		yield;
	}
}